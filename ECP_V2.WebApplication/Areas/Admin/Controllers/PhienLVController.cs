using ECP_V2.Business.Repository;
using ECP_V2.Common.Classes;
using ECP_V2.Common.Helpers;
using ECP_V2.Common.Mvc;
using ECP_V2.DataAccess;
using ECP_V2.WebApplication.Helpers;
using ECP_V2.WebApplication.Logger;
using ECP_V2.WebApplication.Models;
using ECP_V2.WebApplication.Util;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using NPOI.SS.UserModel;
using NPOI.SS.Util;
using NPOI.XSSF.UserModel;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Security;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Web.Configuration;
using System.Web.Mvc;
//using System.Web.Services.Description;
using System.Web.UI.WebControls;
using Message = ECP_V2.DataAccess.Message;


namespace ECP_V2.WebApplication.Areas.Admin.Controllers
{
    [Authorize]
    public class PhienLVController : UTController
    {

        //
        // GET: /Admin/PhienLV/
        private PhienLVRepository _plviec_ser = new PhienLVRepository();
        private ChinhSuaPhienLamViecRepository chinhSuaPhienLamViecRepository = new ChinhSuaPhienLamViecRepository();
        private PhieuCongTacRepository _pcongtac_ser = new PhieuCongTacRepository();
        private DonViRepository _dvi_ser = new DonViRepository();
        private PhongBanRepository _pban_ser = new PhongBanRepository();
        private NhanVienRepository _nhanvien_ser = new NhanVienRepository();
        private MessagesRepository messagesRepository = new MessagesRepository();
        RoleManager<ApplicationRole> _roleManager = new RoleManager<ApplicationRole>(new RoleStore<ApplicationRole>(new ApplicationDbContext()));
        private NhanVienRepository _kh_ser = new NhanVienRepository();
        private NhanVienPhieuCongTacRepositor _nvphieucontac = new NhanVienPhieuCongTacRepositor();
        private AspNetUserRepository aspNetUserRepository = new AspNetUserRepository();
        private ThuocTinhPhienRepository thuocTinhPhienRepository = new ThuocTinhPhienRepository();
        private TinhChatPhienRepository tinhChatPhienRepository = new TinhChatPhienRepository();
        private TrangThaiPhienRepository trangThaiPhienRepository = new TrangThaiPhienRepository();
        private PhienLamViecThuocTinhPhienRepository phienLamViecThuocTinhPhienRepository = new PhienLamViecThuocTinhPhienRepository();
        private NhatKyPhienLamViecRepository nhatKyPhienLamViecRepository = new NhatKyPhienLamViecRepository();
        private ImagesRepository _img_ser = new ImagesRepository();
        private GroupImageRepository _groupimg_ser = new GroupImageRepository();
        private LichSuCapSoPhieuRepository _lsCapSoPhieu_ser = new LichSuCapSoPhieuRepository();
        private SoPhieuHienTaiRepository _SoPhieuHienTai_ser = new SoPhieuHienTaiRepository();
        private ThangLamViecRepository _thanglamviec_ser = new ThangLamViecRepository();
        private d_LoaiCongViecRepository loaicv_ser = new d_LoaiCongViecRepository();
        private TramRepository tramRepository = new TramRepository();
        private KeHoachLichLamViecRepository _keHoachLichLamViecRepository = new KeHoachLichLamViecRepository();
        private string strcon = System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString;

        SafeTrainRepository safeTrainRepository = new SafeTrainRepository();
        ApprovePlanReponsitory appPlanRepo = new ApprovePlanReponsitory();

        //Call API để convert html tới pdf.        
        //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        //string path = url + "ConvertHtmlToPdf";
        string path = System.Configuration.ConfigurationManager.AppSettings["API_CONVERT"].ToString() + "jxlsToFile";
        string ApiNotify = System.Configuration.ConfigurationManager.AppSettings["API_Notify"].ToString();

        //Lấy file template từ database
        //[AreaAuthorization]



        private void DisposeAll()
        {
            if (_plviec_ser != null)
            {
                _plviec_ser.Dispose();
                _plviec_ser = null;
            }

            if (chinhSuaPhienLamViecRepository != null)
            {
                chinhSuaPhienLamViecRepository.Dispose();
                chinhSuaPhienLamViecRepository = null;
            }

            if (_pcongtac_ser != null)
            {
                _pcongtac_ser.Dispose();
                _pcongtac_ser = null;
            }

            if (_nhanvien_ser != null)
            {
                _nhanvien_ser.Dispose();
                _nhanvien_ser = null;
            }

            if (messagesRepository != null)
            {
                messagesRepository.Dispose();
                messagesRepository = null;
            }

            if (_roleManager != null)
            {
                _roleManager.Dispose();
                _roleManager = null;
            }

            if (_kh_ser != null)
            {
                _kh_ser.Dispose();
                _kh_ser = null;
            }

            if (aspNetUserRepository != null)
            {
                aspNetUserRepository.Dispose();
                aspNetUserRepository = null;
            }

            if (thuocTinhPhienRepository != null)
            {
                thuocTinhPhienRepository.Dispose();
                thuocTinhPhienRepository = null;
            }

            if (tinhChatPhienRepository != null)
            {
                tinhChatPhienRepository.Dispose();
                tinhChatPhienRepository = null;
            }

            if (trangThaiPhienRepository != null)
            {
                trangThaiPhienRepository.Dispose();
                trangThaiPhienRepository = null;
            }

            if (phienLamViecThuocTinhPhienRepository != null)
            {
                phienLamViecThuocTinhPhienRepository.Dispose();
                phienLamViecThuocTinhPhienRepository = null;
            }

            if (nhatKyPhienLamViecRepository != null)
            {
                nhatKyPhienLamViecRepository.Dispose();
                nhatKyPhienLamViecRepository = null;
            }

            if (_img_ser != null)
            {
                _img_ser.Dispose();
                _img_ser = null;
            }

            if (_groupimg_ser != null)
            {
                _groupimg_ser.Dispose();
                _groupimg_ser = null;
            }

            if (_nvphieucontac != null)
            {
                _nvphieucontac.Dispose();
                _nvphieucontac = null;
            }

            if (_pban_ser != null)
            {
                _pban_ser.Dispose();
                _pban_ser = null;
            }
        }

        #region Index
        [HasCredential(MenuCode = "DSPLV;TA;TAHT;DSPLV;plv;ViewImage")]
        public ActionResult Index(string id = "", string date = "",
            string DateFrom = "", string DateTo = "", string MaDV = "", string TinhChat = "", string TrangThai = "", string BC110 = "")
        {
            var listTCPhien = tinhChatPhienRepository.List();
            ViewBag.ListTCPhien = listTCPhien;

            var listTTPhien = trangThaiPhienRepository.List();
            ViewBag.ListTTPhien = listTTPhien;

            var listThuocTinhPhienCatDien = thuocTinhPhienRepository.GetByLoaiThuocTinh(3);
            ViewBag.ThuocTinhPhienCatDien = listThuocTinhPhienCatDien;

            var listThuocTinhPhienTiepDia = thuocTinhPhienRepository.GetByLoaiThuocTinh(4);
            ViewBag.ThuocTinhPhienTiepDia = listThuocTinhPhienTiepDia;

            var listThuocTinhPhien5 = thuocTinhPhienRepository.GetByLoaiThuocTinh(5);
            ViewBag.ThuocTinhPhien5 = listThuocTinhPhien5;

            if (!string.IsNullOrEmpty(id))
            {
                DateTime dts = new DateTime();
                DateTime dte = new DateTime();

                dts = DateTime.Now;
                dte = DateTime.Now;
                //PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);

                ViewBag.TuNgay = dts.ToString("dd/MM/yyyy");
                ViewBag.DenNgay = dte.ToString("dd/MM/yyyy");
                ViewBag.DonViID = id;
            }

            if (!string.IsNullOrEmpty(date))
            {
                ViewBag.TuNgay = date;
                ViewBag.DenNgay = date;
            }

            //
            if (!string.IsNullOrEmpty(DateFrom))
            {
                ViewBag.TuNgay = DateFrom;
            }
            if (!string.IsNullOrEmpty(DateTo))
            {
                ViewBag.DenNgay = DateTo;
            }
            if (!string.IsNullOrEmpty(TinhChat))
                TinhChat = TinhChat.Split('(')[0].Trim();
            if (TinhChat == "CV theo kế hoạch")
                ViewBag.TinhChat = 2;
            else if (TinhChat == "CV bổ sung")
                ViewBag.TinhChat = 1;
            else if (TinhChat == "CV theo đột xuất")
                ViewBag.TinhChat = 3;
            else
                ViewBag.TinhChat = 0;

            //if (!string.IsNullOrEmpty(TrangThai))
            //    ViewBag.TrangThai = int.Parse(TrangThai);
            //else
            //    ViewBag.TrangThai = 0;

            if (!string.IsNullOrEmpty(MaDV))
            {
                try
                {
                    ViewBag.DonViID = MaDV.Split('-')[1];
                }
                catch (Exception ex)
                {
                    ViewBag.DonViID = MaDV;
                }
            }


            DisposeAll();

            return View();
        }
        #endregion

        #region List
        [HttpGet]
        public ActionResult List(int page, int pageSize, string filter, int tcphien, int catdien, int tiepdia,
            int khac, string DateFrom, string DateTo, string DonViId, string PhongBanId, int ttPhien, int? chuyenNPC, int? phieuky, Boolean? isShowBtnHoanHuy,
            string LoaiBieuDo = "DS")
        {
            filter = filter.Trim().ToUpper();
            int page1 = (page - 1) * pageSize;
            int pagelength1 = page * pageSize;
            int Count = 0;
            int Duyet = 0;
            string donviId = null;
            try
            {
                donviId = Session["DonViID"].ToString();
            }
            catch { }


            if (ttPhien > 0)
            {
                Duyet = ttPhien;
            }


            List<PhienLVModel> model;
            if (DonViId == null)
            {
                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "");
            }
            else
            {
                if (string.IsNullOrEmpty(DonViId))
                {
                    model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                    Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "");
                }
                else
                {
                    var donVi = _dvi_ser.GetById(donviId);

                    if (donVi != null)
                    {
                        if (((donviId.Length == 4 && donVi.DviCha.Equals("PA")) || donviId.ToUpper().Equals("PH") || donviId.ToUpper().Equals("PN") || donviId.ToUpper().Equals("PM")) && (User.IsInRole("Master") || User.IsInRole("Manager")))
                        {
                            if (Duyet == 0)
                            {
                                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaDuyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                List<PhienLVModel> modelVuaTao = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.VuaTao, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                List<PhienLVModel> modelDaXong = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaXong, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                List<PhienLVModel> modelHuyBo = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.HuyBo, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();

                                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaDuyet, chuyenNPC ?? -1, phieuky ?? -1, "");
                                int CountDaXong = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaXong, chuyenNPC ?? -1, phieuky ?? -1, "");
                                int CountHuyBo = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.HuyBo, chuyenNPC ?? -1, phieuky ?? -1, "");
                                int CountVuaTao = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.VuaTao, chuyenNPC ?? -1, phieuky ?? -1, "");

                                Count += (CountDaXong + CountHuyBo + CountVuaTao);
                                model.AddRange(modelVuaTao);
                                model.AddRange(modelDaXong);
                                model.AddRange(modelHuyBo);
                            }
                            else if (Duyet == (int)TrangThaiPhienLV.DaXong || Duyet == (int)TrangThaiPhienLV.DaDuyet || Duyet == (int)TrangThaiPhienLV.HuyBo || Duyet == (int)TrangThaiPhienLV.VuaTao)
                            {
                                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "");
                            }
                            else
                            {
                                model = new List<PhienLVModel>();
                                Count = 0;
                            }
                        }
                        else
                        {
                            if (User.IsInRole("Leader"))
                            {
                                string phongBanID = Session["PhongBanId"].ToString();

                                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, phongBanID, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "leader").ToList();
                                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, phongBanID, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "leader");
                            }
                            else
                            {
                                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "");
                            }

                        }
                    }
                    else
                    {
                        model = new List<PhienLVModel>();
                        Count = 0;
                    }
                }
            }

            var ListNewsPageSize = new PageData<PhienLVModel>();

            if (model.Count() > 0)
            {
                ListNewsPageSize.Data = model;
                // Nếu isShowBtnHoanHuy (xem trang ở chức năng Kế hoạch lịch làm việc thì chỉ lấy ra data có trạng thái là Đã duyệt và có Hình thức kiểm tra đầu/ cuối giờ)
                if ((bool)isShowBtnHoanHuy)
                {
                    ListNewsPageSize.Data = model.FindAll(m => m.TrangThai == 2 && m.HinhThucKiemTra != null);
                }
                ListNewsPageSize.Page = new Page()
                {
                    RecordsName = "Phiên làm việc",
                    NumberOfPages = Convert.ToInt32(Math.Ceiling((double)Count / pageSize)),
                    RecordsPerPage = pageSize,
                    CurrentPage = page,
                    TotalRecords = Count
                };

                DateTime dts = new DateTime();
                DateTime dte = new DateTime();

                try
                {
                    if (!string.IsNullOrEmpty(DateFrom) && !string.IsNullOrEmpty(DateTo))
                    {
                        dts = DateTime.ParseExact(DateFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        dte = DateTime.ParseExact(DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);
                    }

                    Session["TuNgay"] = dts.ToString("dd/MM/yyyy");
                    Session["DenNgay"] = dte.ToString("dd/MM/yyyy");
                }
                catch (Exception ex)
                {
                    Session["TuNgay"] = "";
                    Session["DenNgay"] = "";
                }
            }
            else
            {
                ListNewsPageSize.Data = new List<PhienLVModel>();
                ListNewsPageSize.Page = new Page()
                {
                    RecordsName = "Phiên làm việc",
                    NumberOfPages = 0,
                    RecordsPerPage = 0,
                    CurrentPage = 0,
                    TotalRecords = 0
                };

                Session["TuNgay"] = "";
                Session["DenNgay"] = "";
            }

            ViewBag.PhienLVTong = model.Count();
            ViewBag.PhienLVDaXong = model.Count(x => x.TrangThai == 3);
            ViewBag.PhienLVDaDuyet = model.Count(x => x.TrangThai == 2);
            ViewBag.PhienLVChuaDuyet = model.Count(x => x.TrangThai == 1);
            ViewBag.PhienLVHuyBo = model.Count(x => x.TrangThai == 7);



            if (LoaiBieuDo == "DS")
            {
                foreach (var item in ListNewsPageSize.Data)
                {
                    try
                    {
                        var objPCT = _pcongtac_ser.GetById(item.MaPCT ?? 0);
                        if (objPCT != null)
                        {
                            //item.TT_Phien = (int)objPCT.MaTT;
                            item.IdPhieuCongTac = objPCT.ID;
                            item.SoPhieu = objPCT.SoPhieu;
                            item.MaLP = (int)objPCT.MaLP;
                            item.NguoiDuyetPCT = objPCT.NguoiDuyet;
                            item.NgayDuyetPCT = objPCT.NgayDuyet;
                            item.MaYeuCauCRM = objPCT.MaYeuCauCRM;
                            item.isShowBtnHoanHuy = isShowBtnHoanHuy ?? false;
                        }
                    }
                    catch (Exception ex)
                    { }

                }
                DisposeAll();
                if ((bool)isShowBtnHoanHuy)
                {
                    return PartialView("_ListCTHT", ListNewsPageSize);
                }
                else
                {
                    return PartialView("_List", ListNewsPageSize);
                }
            }
            else
            {
                foreach (var item in ListNewsPageSize.Data)
                {
                    item.isShowBtnHoanHuy = isShowBtnHoanHuy ?? false;
                    // lay location tu dia diem
                    try
                    {
                        if (item.KinhDo == null && item.ViDo == null)
                        {
                            String url = "https://maps.googleapis.com/maps/api/geocode/json?address=" + item.DiaDiem + "&key=AIzaSyAIVkam84peG4Z8bcxJVeUO_3zStLdOIHs";
                            using (WebClient httpClient = new WebClient())
                            {
                                var jsonData = httpClient.DownloadString(url);
                                dynamic jObj = JsonConvert.DeserializeObject(jsonData);
                                foreach (var res in jObj.results)
                                {
                                    item.longitude = res.geometry.location.lng;
                                    item.latitude = res.geometry.location.lat;
                                }
                            }
                        }
                        else
                        {
                            item.longitude = item.KinhDo ?? 0;
                            item.latitude = item.ViDo ?? 0;
                        }
                    }
                    catch (Exception ex)
                    { }

                    //tao html window
                    try
                    {
                        item.htmlWindow =
                            "<div style='margin-bottom:5px'><lable><strong>" + item.NoiDung + "</strong></lable></div>" +
                            "<div class='blog-gallery' style='width:400px;height:300px;overflow:auto'>"
                            ;
                        var data = _plviec_ser.GetImageByPhienLVId(item.Id, "");


                        foreach (var group in data.GroupBy(x => x.GroupId))
                        {
                            var groupImage = _groupimg_ser.GetById(group.Key);

                            item.htmlWindow = item.htmlWindow +
                                "<lable>" + groupImage != null ? groupImage.NoiDung : "Không thuộc nhóm ảnh nào" + "</lable><ul style='margin:5px' class='list-inline'>";
                            foreach (var it in group)
                            {
                                item.htmlWindow = item.htmlWindow +
                                "<li><img style='height:100px;width:100px' src='/Files/" + it.Url + "' /></li>"
                                ;
                            }
                            item.htmlWindow = item.htmlWindow + "</ul><div class='clearfix'></div>";
                        }
                        item.htmlWindow = item.htmlWindow + "</div>";
                    }
                    catch (Exception ex)
                    { }

                    try
                    {
                        var objPCT = _pcongtac_ser.GetById(item.MaPCT);
                        if (objPCT != null)
                        {
                            //item.TT_Phien = (int)objPCT.MaTT;
                            item.IdPhieuCongTac = objPCT.ID;
                            item.SoPhieu = objPCT.SoPhieu;
                            item.MaLP = (int)objPCT.MaLP;
                            item.NguoiDuyetPCT = objPCT.NguoiDuyet;
                            item.NgayDuyetPCT = objPCT.NgayDuyet;
                            item.MaYeuCauCRM = objPCT.MaYeuCauCRM;
                        }
                    }
                    catch (Exception ex)
                    { }

                }
                DisposeAll();
                return PartialView("_ListBieuDo", ListNewsPageSize);
            }
            //return null;
        }
        #endregion

        #region XuatExcelBCKHLLV
        [HttpGet]
        public ActionResult XuatExcelBCKHLLV(int tcphien, int catdien, int tiepdia,
            int khac, string DateFrom, string DateTo, string DonViId, string PhongBanId, int ttPhien, int? chuyenNPC, int? phieuky)
        {

            int Count = 0;
            int Duyet = 0;
            string donviId = null;
            try
            {
                donviId = Session["DonViID"].ToString();
            }
            catch { }


            if (ttPhien > 0)
            {
                Duyet = ttPhien;
            }

            List<PhienLVModel> model;
            if (DonViId == null)
            {
                model = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                Count = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "");
            }
            else
            {
                if (string.IsNullOrEmpty(DonViId))
                {
                    model = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                    Count = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "");
                }
                else
                {
                    var donVi = _dvi_ser.GetById(donviId);

                    if (donVi != null)
                    {
                        if (((donviId.Length == 4 && donVi.DviCha.Equals("PA")) || donviId.ToUpper().Equals("PH") || donviId.ToUpper().Equals("PN") || donviId.ToUpper().Equals("PM")) && (User.IsInRole("Master") || User.IsInRole("Manager")))
                        {
                            if (Duyet == 0)
                            {
                                model = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaDuyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                List<PhienLVModel> modelVuaTao = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.VuaTao, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                List<PhienLVModel> modelDaXong = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaXong, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                List<PhienLVModel> modelHuyBo = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.HuyBo, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();

                                Count = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaDuyet, chuyenNPC ?? -1, phieuky ?? -1, "");
                                int CountDaXong = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaXong, chuyenNPC ?? -1, phieuky ?? -1, "");
                                int CountHuyBo = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.HuyBo, chuyenNPC ?? -1, phieuky ?? -1, "");
                                int CountVuaTao = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.VuaTao, chuyenNPC ?? -1, phieuky ?? -1, "");

                                Count += (CountDaXong + CountHuyBo + CountVuaTao);
                                model.AddRange(modelVuaTao);
                                model.AddRange(modelDaXong);
                                model.AddRange(modelHuyBo);
                            }
                            else if (Duyet == (int)TrangThaiPhienLV.DaXong || Duyet == (int)TrangThaiPhienLV.DaDuyet || Duyet == (int)TrangThaiPhienLV.HuyBo || Duyet == (int)TrangThaiPhienLV.VuaTao)
                            {
                                model = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                Count = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "");
                            }
                            else
                            {
                                model = new List<PhienLVModel>();
                                Count = 0;
                            }
                        }
                        else
                        {
                            if (User.IsInRole("Leader"))
                            {
                                string phongBanID = Session["PhongBanId"].ToString();

                                model = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, phongBanID, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "leader").ToList();
                                Count = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, phongBanID, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "leader");
                            }
                            else
                            {
                                model = _plviec_ser.AdvancedSearchPhienLvAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "").ToList();
                                Count = _plviec_ser.CountTotalPhienLVAll(tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "");
                            }

                        }
                    }
                    else
                    {
                        model = new List<PhienLVModel>();
                        Count = 0;
                    }
                }
            }


            ExportExcelKeHoachLichLamViec(model, tcphien, DateFrom, DateTo);


            return null;
        }


        [HttpGet]
        public ActionResult XuatBCKHLLVDoc(string DateFrom, string DateTo, string DonViId, string LoaiBaoCao, string TuanThang, int TrangThaiBienBan, int IdBienBan, int soBienBan)
        {
            try
            {
                var model = _plviec_ser.sp_AdvancedSearchPhienLVNewAllCV(0, 0, 0, 0, DateFrom, DateTo, DonViId, "", (int)TrangThaiPhienLV.DaDuyet, -1, -1, "").ToList();



                string format = "dd/MM/yyyy";
                var donVi = _dvi_ser.Context.tblDonVis.FirstOrDefault(x => x.Id == DonViId);
                if (donVi == null)
                {
                    return null;
                }
                var CVKTKSTT = model.FindAll(x => x.TrangThai_KHLLV == 1).Count();
                var CVKeHoach = model.FindAll(x => x.TT_Phien == 2).Count();
                var CVBoSung = model.FindAll(x => x.TT_Phien == 1).Count();
                var CVDotXuat = model.FindAll(x => x.TT_Phien == 3).Count();
                var tongcv = CVKeHoach + CVBoSung + CVDotXuat;
                ViewBag.CVKTKSTT = CVKTKSTT;
                ViewBag.CVKeHoach = CVKeHoach;
                ViewBag.CVBoSung = CVBoSung;
                ViewBag.CVDotXuat = CVDotXuat;
                ViewBag.TuanThang = TuanThang;
                ViewBag.TrangThaiBienBan = TrangThaiBienBan;
                ViewBag.IdBienBan = IdBienBan;
                ViewBag.soBienBan = soBienBan;
                double tyleKH = 0;
                if (tongcv > 0)
                {
                    tyleKH = CVKeHoach * 100 / tongcv;
                    tyleKH = Math.Round(tyleKH, 2);

                }
                ViewBag.tyleKH = tyleKH;
                ViewBag.tongcv = tongcv;
                ViewBag.DonVi = donVi;
                ViewBag.DonViId = DonViId;
                ViewBag.DonViCha = _dvi_ser.Context.tblDonVis.FirstOrDefault(x => x.Id == donVi.DviCha);
                ViewBag.TenVietTat = _dvi_ser.Context.tblDonVis.FirstOrDefault(x => x.Id == DonViId).TenVietTat;
                ViewBag.TuNgay = DateTime.ParseExact(DateFrom, format, CultureInfo.InvariantCulture);
                ViewBag.DenNgay = DateTime.ParseExact(DateTo, format, CultureInfo.InvariantCulture);
                ViewBag.LoaiBaoCao = LoaiBaoCao;

                string formattedDateFrom = DateTime.Parse(DateFrom).ToString("yyyyMMdd");
                string formattedDateTo = DateTime.Parse(DateTo).ToString("yyyyMMdd");

                // lấy lại data
                var data = _plviec_ser.Get_SoLuong_PLV_BaoCao(DonViId, formattedDateFrom, formattedDateTo);
                if (data != null)
                {
                    /// truyền tham số
                    ViewBag.TongSoPhien = data.TongSoPhien;
                    ViewBag.TongSoPhienKeHoach = data.TongSoPhienKeHoach;
                    ViewBag.TongSoBoSung = data.TongSoBoSung;
                    ViewBag.TongSoDotXuat = data.TongSoDotXuat;
                    ViewBag.TongSoKTKS_TrucTiep = data.TongSoKTKS_TrucTiep;
                    ViewBag.TongSoKTKS_HinhAnh = data.TongSoKTKS_HinhAnh;
                    ViewBag.TyLePhanTram = data.TyLePhanTram;
                }
                List<tblNhanVien> nhanVien = _kh_ser.List();
                if (nhanVien != null && nhanVien.Count > 0)
                {
                    ViewBag.nhanVien = nhanVien;
                }
                DisposeAll();
                return View("ViewBienBanQDKTKS");

            }
            catch (Exception)
            {
                DisposeAll();
                throw;
            }
        }

        #endregion
        #region EditPhienLv
        [HttpPost]
        public async Task<ActionResult> EditPhienLv(string Id, string PhongBanID, int TT_Phien, string NoiDung, string DiaDiem, string NgayLamViec, string GioBd, string GioKt, string NgayKt, string NguoiDuyet_SoPa, string NguoiChiHuy, string GiamSatVien, string NguoiKiemSoat, string NguoiKiemTraPhieu, string LanhDaoTrucBan, string LyDoThayDoi, string NguoiDuyet_SoPa_Id, string NguoiChiHuy_Id, string GiamSatVien_Id, string NguoiKiemSoat_Id, string NguoiKiemTraPhieu_Id, string LanhDaoTrucBan_Id,
                     string LanhDaoCongViec_Id,
            string LanhDaoCongViec,
            string NguoiCapPhieu_Id,
            string NguoiCapPhieu,

            // Update bảng plv_KeHoachLichLamViec
            int? HinhThucKiemTra, string NguoiDaiDienKT, string NguoiDaiDienKT_Id,
            int CatDien = 0, int TiepDia = 0, int TinhChat = 0, int PhieuLenh = 0)
        {
            int kt = 0;
            string donViID = null;
            if (Session["DonViID"] != null)
            {
                donViID = Session["DonViID"].ToString();
            }
            List<string> userPushNotificationWeb = new List<string>();
            Dictionary<string, int> messageList = new Dictionary<string, int>();
            try
            {

                if (PhieuLenh == 0)
                {
                    DisposeAll();

                    return Json("Bạn chưa chọn Phiếu/Lệnh công tác !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(PhongBanID))
                {
                    DisposeAll();

                    return Json("Bạn chưa chọn Đơn vị làm công việc !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(NoiDung))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Nội dung !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(DiaDiem))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Địa điểm !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(NgayLamViec))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Ngày làm việc !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(GioBd))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Giờ bắt đầu, hoặc nhập không chính xác !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(GioKt))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Giờ kết thúc, hoặc nhập không chính xác !", JsonRequestBehavior.AllowGet);
                }

                if (PhieuLenh == 0)
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập loại công việc cấp phiếu/lệnh công tác !", JsonRequestBehavior.AllowGet);
                }

                var plv = _plviec_ser.GetById(int.Parse(Id));
                if (plv == null || plv.Id < 1)
                {
                    DisposeAll();

                    return Json("Phiên làm việc không tồn tại !", JsonRequestBehavior.AllowGet);
                }
                else
                {
                    if (plv.MaPCT > 0)
                    {
                        plv_PhieuCongTac phieuCongTac = _plviec_ser.Context.plv_PhieuCongTac.FirstOrDefault(x => x.ID == plv.MaPCT);
                        //Namcv bổ sung
                        //Kiểm tra xem đã cấp số phiếu thì không cho đổi Kiểu công tác (Phiếu CT => Lệnh CT và Ngược lại).
                        //Condition: PhieuLenh <> phieuCongTac.MaLP && plv.SoPhieu > 0
                        if ((phieuCongTac.MaLP != PhieuLenh) & (phieuCongTac.SoPhieu != null))
                        {
                            return Json("Số phiếu đã được cấp không thể sửa loại Phiếu công tác => Lệnh công tác và Ngược lại!", JsonRequestBehavior.AllowGet);
                        }

                        if (phieuCongTac != null)
                        {
                            if (PhieuLenh > 0)
                            {
                                if (phieuCongTac != null)
                                {
                                    phieuCongTac.NoiDung = plv.NoiDung;
                                    phieuCongTac.MaLP = PhieuLenh;
                                    _plviec_ser.Context.SaveChanges();
                                }
                            }
                        }
                    }
                    else
                    {
                        if (PhieuLenh > 0)
                        {
                            int maLenhPhieu = PhieuLenh;
                            if (maLenhPhieu > 0)
                            {
                                plv_PhieuCongTac phieuCongTac = new plv_PhieuCongTac();
                                phieuCongTac.NoiDung = plv.NoiDung;
                                phieuCongTac.MaLP = maLenhPhieu;
                                phieuCongTac.MaTT = 1;
                                phieuCongTac.NgayTao = DateTime.Now;
                                phieuCongTac.NguoiTao = User.Identity.Name;
                                phieuCongTac.DonViId = plv.DonViId;

                                _plviec_ser.Context.plv_PhieuCongTac.Add(phieuCongTac);
                                _plviec_ser.Context.SaveChanges();

                                var phienLamViec = _plviec_ser.Context.tblPhienLamViecs.FirstOrDefault(x => x.Id == plv.Id);
                                phienLamViec.MaPCT = phieuCongTac.ID;
                                _plviec_ser.Context.SaveChanges();
                            }
                        }
                    }
                }

                IBaseConverter<tblPhienLamViec, PhienLVModel> convertChinhSua = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                var modelConvert = convertChinhSua.ConvertObject(plv);

                string noiDung = JsonConvert.SerializeObject(modelConvert);

                DateTime dt1 = plv.NgayLamViec;
                DateTime ngayKt = DateTime.ParseExact(NgayKt, "dd/MM/yyyy", null);
                var formats = new[] { "%h", "h\\.m" };

                DateTime gioBd = MyString2Timespan(GioBd.ToString().Trim().Split('-', '–')[0].Replace("h", ":").Replace("H", ":").Trim());
                DateTime gioKetThuc = MyString2Timespan(GioKt.ToString().Trim().Split('-', '–')[0].Replace("h", ":").Replace("H", ":").Trim());

                DateTime thoiGianBd = new DateTime(dt1.Year, dt1.Month, dt1.Day, gioBd.Hour, gioBd.Minute, 0);
                DateTime thoiGianKt = new DateTime(ngayKt.Year, ngayKt.Month, ngayKt.Day, gioKetThuc.Hour, gioKetThuc.Minute, 0);

                if (thoiGianBd == null || thoiGianKt == null || thoiGianBd.Year < 1970 || thoiGianKt.Year < 1970)
                {
                    DisposeAll();

                    return Json("Thời gian làm việc không chính xác !", JsonRequestBehavior.AllowGet);
                }
                else if (thoiGianBd >= thoiGianKt)
                {
                    DisposeAll();

                    return Json("Thời gian bắt đầu phải nhỏ hơn kết thúc !", JsonRequestBehavior.AllowGet);
                }

                plv.PhongBanID = int.Parse(PhongBanID);

                plv.PhongBanIDCreate = int.Parse(Session["PhongBanId"].ToString());
                if (NguoiCapPhieu_Id != null)
                {
                    var gnvcp = _nhanvien_ser.GetById(NguoiCapPhieu_Id);
                    if (gnvcp != null)
                        plv.PhongBanIDCreate = gnvcp.PhongBanId;
                }

                tblPhongBan phongBan = _pban_ser.GetById(plv.PhongBanID);
                if (phongBan != null)
                {
                    plv.DonViId = phongBan.MaDVi;
                }
                else
                {
                    plv.DonViId = Session["DonViID"].ToString();
                }

                plv.NoiDung = NoiDung.Replace("\n", "").Replace("\t", "").Trim();
                plv.DiaDiem = DiaDiem.Replace("\n", "").Replace("\t", "").Trim();

                plv.GioBd = thoiGianBd;
                plv.GioKt = thoiGianKt;

                if (_plviec_ser.KiemTraTrung2(dt1, plv.PhongBanID, plv.DiaDiem, plv.GioBd, plv.NoiDung, plv.Id))
                {
                    DisposeAll();

                    return Json("Công việc đã tồn tại !", JsonRequestBehavior.AllowGet);
                }

                plv.NguoiDuyet_SoPa = NguoiDuyet_SoPa;
                plv.NguoiChiHuy = NguoiChiHuy;
                plv.GiamSatVien = GiamSatVien;
                plv.NguoiKiemSoat = NguoiKiemSoat;
                plv.NguoiKiemTraPhieu = NguoiKiemTraPhieu;
                plv.LanhDaoTrucBan = LanhDaoTrucBan;
                plv.NgaySua = DateTime.Now;
                plv.NguoiSua = User.Identity.Name;
                plv.TT_Phien = TT_Phien;
                //plv.TrangThai = TrangThai;
                plv.LyDoThayDoi = LyDoThayDoi;

                plv.NguoiDuyet_SoPa_Id = NguoiDuyet_SoPa_Id;
                plv.NguoiChiHuy_Id = NguoiChiHuy_Id;
                plv.GiamSatVien_Id = GiamSatVien_Id;
                plv.NguoiKiemSoat_Id = NguoiKiemSoat_Id;
                plv.NguoiKiemTraPhieu_Id = NguoiKiemTraPhieu_Id;
                plv.LanhDaoTrucBan_Id = LanhDaoTrucBan_Id;

                plv.LanhDaoCongViec_Id = LanhDaoCongViec_Id;
                plv.LanhDaoCongViec = LanhDaoCongViec;

                plv.NguoiCapPhieu_Id = NguoiCapPhieu_Id;
                plv.NguoiCapPhieu = NguoiCapPhieu;

                kt = _plviec_ser.PhienLamViec_UpdateNew(plv);
                if (kt > 0)
                {
                    try
                    {
                        #region Update plv_KeHoachLichLamViec
                        if (HinhThucKiemTra != null)
                        {
                            var input_dataKHLLV = new plv_KeHoachLichLamViec
                            {
                                PhienLamViecId = kt,
                                HinhThucKiemTra = HinhThucKiemTra,
                                NguoiDaiDienKT_Id = NguoiDaiDienKT_Id,
                                NguoiDaiDienKT = NguoiDaiDienKT,
                                LyDoHoanHuy = "NULL"
                            };

                            var check = await _keHoachLichLamViecRepository.Update_Plv_KeHoachLichLamViec(input_dataKHLLV);
                        }

                        #endregion Update plv_KeHoachLichLamViec
                        string errorChinhSua = "";
                        var chinhSuaPhienLamViec = new tblPhienLamViec_ChinhSua();
                        var user = aspNetUserRepository.GetByUserName(User.Identity.GetUserName());

                        chinhSuaPhienLamViec.PhienLamViecId = plv.Id;
                        chinhSuaPhienLamViec.NoiDung = noiDung;
                        chinhSuaPhienLamViec.NgayTao = DateTime.Now;
                        chinhSuaPhienLamViec.NguoiTao = User.Identity.Name;

                        if (user != null)
                        {
                            chinhSuaPhienLamViec.DienThoai = user.PhoneNumber;
                        }

                        chinhSuaPhienLamViecRepository.Create(chinhSuaPhienLamViec, ref errorChinhSua);
                    }
                    catch
                    {
                    }

                    var listDelete = _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Where(x => x.PhienLamViecId == kt);
                    if (listDelete != null)
                    {
                        _plviec_ser.Context.tbl_NhanVien_PhienLamViec.RemoveRange(listDelete);
                        _plviec_ser.Context.SaveChanges();
                    }

                    if (!string.IsNullOrEmpty(NguoiDuyet_SoPa_Id))
                    {
                        string[] arr_NguoiDuyet_SoPa_Id = NguoiDuyet_SoPa_Id.Split(',');
                        if (arr_NguoiDuyet_SoPa_Id != null && arr_NguoiDuyet_SoPa_Id.Length > 0)
                        {
                            foreach (var item in arr_NguoiDuyet_SoPa_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiDuyet_SoPa, PhienLamViecId = kt, DonViId = donViID, PhongBanId = plv.PhongBanID });
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(NguoiChiHuy_Id))
                    {
                        string[] arr_NguoiChiHuy_Id = NguoiChiHuy_Id.Split(',');
                        if (arr_NguoiChiHuy_Id != null && arr_NguoiChiHuy_Id.Length > 0)
                        {
                            foreach (var item in arr_NguoiChiHuy_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiChiHuy, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(GiamSatVien_Id))
                    {
                        string[] arr_GiamSatVien_Id = GiamSatVien_Id.Split(',');
                        if (arr_GiamSatVien_Id != null && arr_GiamSatVien_Id.Length > 0)
                        {
                            foreach (var item in arr_GiamSatVien_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.GiamSatVien, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(NguoiKiemSoat_Id))
                    {
                        string[] arr_NguoiKiemSoat_Id = NguoiKiemSoat_Id.Split(',');
                        if (arr_NguoiKiemSoat_Id != null && arr_NguoiKiemSoat_Id.Length > 0)
                        {
                            foreach (var item in arr_NguoiKiemSoat_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiKiemSoat, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(NguoiKiemTraPhieu_Id))
                    {
                        string[] arr_NguoiKiemTraPhieu_Id = NguoiKiemTraPhieu_Id.Split(',');
                        if (arr_NguoiKiemTraPhieu_Id != null && arr_NguoiKiemTraPhieu_Id.Length > 0)
                        {
                            foreach (var item in arr_NguoiKiemTraPhieu_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiKiemTraPhieu, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(LanhDaoTrucBan_Id))
                    {
                        string[] arr_LanhDaoTrucBan_Id = LanhDaoTrucBan_Id.Split(',');
                        if (arr_LanhDaoTrucBan_Id != null && arr_LanhDaoTrucBan_Id.Length > 0)
                        {
                            foreach (var item in arr_LanhDaoTrucBan_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.LanhDaoTrucBan, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }

                    try
                    {
                        List<tblPhienLamViec_ThuocTinh> listThuocTinh = _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Where(x => x.PhienLamViecId == kt).ToList();
                        if (listThuocTinh != null)
                        {
                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.RemoveRange(listThuocTinh);
                            _plviec_ser.Context.SaveChanges();
                        }

                        if (CatDien > 0)
                        {
                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                            phienLV_ThuocTinh.ThuocTinhId = CatDien;
                            phienLV_ThuocTinh.PhienLamViecId = kt;
                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                        }
                        if (TiepDia > 0)
                        {
                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                            phienLV_ThuocTinh.ThuocTinhId = TiepDia;
                            phienLV_ThuocTinh.PhienLamViecId = kt;
                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                        }
                        if (TinhChat > 0)
                        {
                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                            phienLV_ThuocTinh.ThuocTinhId = TinhChat;
                            phienLV_ThuocTinh.PhienLamViecId = kt;
                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                        }
                        _plviec_ser.Context.SaveChanges();
                    }
                    catch { }

                    string userName = WebConfigurationManager.AppSettings["userEmail"];
                    string password = WebConfigurationManager.AppSettings["passEmail"];

                    IBaseConverter<tblPhienLamViec, PhienLVModel> convert = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                    var model = convert.ConvertObject(plv);
                    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietSuaCongViecNhanVienEmail.cshtml", model);

                    NhanVienRepository nvr = new NhanVienRepository();
                    tblNhanVien nv = nvr.GetByUserName(plv.NguoiTao);

                    if (nv != null)
                    {
                        userPushNotificationWeb.Add(nv.Username);

                        try
                        {
                            //await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo sửa công việc", html));
                        }
                        catch
                        {
                        }


                        // Create messages to user
                        //try
                        //{
                        //    Message message = new Message();
                        //    message.NoiDung = plv.NoiDung + " vừa được cập nhật bởi " + User.Identity.Name;
                        //    message.NgayTao = DateTime.Now;
                        //    message.NguoiTao = User.Identity.Name;
                        //    message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                        //    message.MaTaiKhoan = nv.Id;
                        //    message.TrangThai = (int)TrangThaiMessage.UnRead;
                        //    message.MA_DVIQLY = nv.DonViId;
                        //    message.MA_PBAN = plv.PhongBanID.ToString();
                        //    message.PhienLamViecId = plv.Id;

                        //    string errorMessage = "";

                        //    var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                        //    messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                        //}
                        //catch
                        //{

                        //}

                        //try
                        //{
                        //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                        //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                        //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                        //    TwilioClient.Init(accountSid, authToken);

                        //    var from = new PhoneNumber(fromPhoneNumber);
                        //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                        //    var sms = await Task.Run(() => MessageResource.Create(
                        //        to: to,
                        //        from: from,
                        //        body: plv.NoiDung + " vừa được cập nhật bởi " + User.Identity.Name));
                        //}
                        //catch (Exception e)
                        //{

                        //}

                        try
                        {
                            tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                            nhatKy.PhienLamViecId = plv.Id;
                            nhatKy.NgayTao = DateTime.Now;
                            nhatKy.NguoiTao = User.Identity.Name;
                            nhatKy.DonViId = plv.DonViId;
                            nhatKy.TrangThaiCu = plv.TrangThai;
                            nhatKy.TrangThaiMoi = plv.TrangThai;
                            nhatKy.GhiChu = "Sửa công việc";
                            nhatKy.PhongBanId = plv.PhongBanID;

                            string strError = "";
                            nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                        }
                        catch
                        {

                        }

                        //try
                        //{
                        //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                        //    noti.title = "Phiên làm việc vừa được cập nhật";
                        //    noti.body = plv.NoiDung + " vừa được cập nhật bởi " + User.Identity.Name;
                        //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id;
                        //    noti.tag = plv.Id.ToString();

                        //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";
                        //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                        //    {
                        //        //var connection = new HubConnection(url, useDefaultUrl: false);
                        //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                        //        connection.Start().Wait();
                        //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                        //    }
                        //}
                        //catch
                        //{ }
                    }

                    ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} sửa phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                }
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = -1;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi Sửa phiên làm việc. Chi tiết: {0}", ex.Message));
            }

            DisposeAll();

            return Json(kt, JsonRequestBehavior.AllowGet);

        }
        #endregion

        #region HuyBoPhienLv
        [HttpGet]
        public async Task<ActionResult> HuyBoPhienLv(string Id, string LyDoThayDoi)
        {
            string kt = "";

            List<string> userPushNotificationWeb = new List<string>();
            Dictionary<string, int> messageList = new Dictionary<string, int>();
            try
            {

                if (string.IsNullOrEmpty(LyDoThayDoi.Trim()))
                {
                    DisposeAll();

                    return Json("Nhập lý do hủy bỏ công việc", JsonRequestBehavior.AllowGet);
                }

                var plv = _plviec_ser.GetById(int.Parse(Id));

                if (plv == null || plv.Id < 1)
                {
                    DisposeAll();

                    return Json("Phiên làm việc không tồn tại !", JsonRequestBehavior.AllowGet);
                }

                int trangThaiCu = plv.TrangThai ?? 0;

                plv.TrangThai = (int)TrangThaiPhienLV.HuyBo;
                plv.LyDoThayDoi = LyDoThayDoi.Trim();

                kt = _plviec_ser.PhienLamViec_UpdateTrangThai(plv);

                string userName = WebConfigurationManager.AppSettings["userEmail"];
                string password = WebConfigurationManager.AppSettings["passEmail"];

                IBaseConverter<tblPhienLamViec, PhienLVModel> convert = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                var model = convert.ConvertObject(plv);
                string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietHuyBoCongViecNhanVienEmail.cshtml", model);

                tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                if (nv != null)
                {
                    userPushNotificationWeb.Add(nv.Username);

                    try
                    {
                        //await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo sửa công việc", html));
                    }
                    catch
                    {
                    }
                    // Create messages to user

                    try
                    {
                        Message message = new Message();
                        message.NoiDung = plv.NoiDung + " vừa được hủy bỏ bởi " + User.Identity.Name;
                        message.NgayTao = DateTime.Now;
                        message.NguoiTao = User.Identity.Name;
                        message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                        message.MaTaiKhoan = nv.Id;
                        message.TrangThai = (int)TrangThaiMessage.UnRead;
                        message.MA_DVIQLY = nv.DonViId;
                        message.MA_PBAN = plv.PhongBanID.ToString();
                        message.PhienLamViecId = plv.Id;

                        string errorMessage = "";

                        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                        messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                    }
                    catch
                    {

                    }

                    //try
                    //{
                    //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                    //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                    //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                    //    TwilioClient.Init(accountSid, authToken);

                    //    var from = new PhoneNumber(fromPhoneNumber);
                    //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                    //    var sms = await Task.Run(() => MessageResource.Create(
                    //        to: to,
                    //        from: from,
                    //        body: plv.NoiDung + " vừa được cập nhật bởi " + User.Identity.Name));
                    //}
                    //catch (Exception e)
                    //{

                    //}

                    try
                    {
                        tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                        nhatKy.PhienLamViecId = plv.Id;
                        nhatKy.NgayTao = DateTime.Now;
                        nhatKy.NguoiTao = User.Identity.Name;
                        nhatKy.DonViId = plv.DonViId;
                        nhatKy.TrangThaiCu = trangThaiCu;
                        nhatKy.TrangThaiMoi = plv.TrangThai;
                        nhatKy.GhiChu = "Hủy bỏ công việc";
                        nhatKy.PhongBanId = plv.PhongBanID;

                        string strError = "";
                        nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                    }
                    catch
                    {

                    }

                    //try
                    //{
                    //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                    //    noti.title = "Phiên làm việc vừa được hủy bỏ";
                    //    noti.body = plv.NoiDung + " vừa được hủy bỏ bởi " + User.Identity.Name;
                    //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id;
                    //    noti.tag = plv.Id.ToString();

                    //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                    //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                    //    {
                    //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                    //        connection.Start().Wait();
                    //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                    //    }


                    //}
                    //catch
                    //{ }
                }

                ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} sửa phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = "Lỗi hủy bỏ phiên làm việc";
                //NLoger.Error("loggerDatabase", string.Format("Lỗi hủy bỏ phiên làm việc. Chi tiết: {0}", ex.Message));
            }

            DisposeAll();

            return Json(kt, JsonRequestBehavior.AllowGet);
        }
        #endregion

        [HttpGet]
        public ActionResult CapNhatTrangThaiVuaTao(string Id)
        {
            try
            {
                var plv = _plviec_ser.GetById(int.Parse(Id));

                if (plv != null)
                {
                    plv.TrangThai = (int)TrangThaiPhienLV.VuaTao;
                    plv.NgayKetThuc = null;
                    plv.IsChuyenNPC = false;

                    string error = "";

                    _plviec_ser.Update(plv, ref error);

                    if (error == "")
                    {
                        try
                        {
                            tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                            nhatKy.PhienLamViecId = plv.Id;
                            nhatKy.NgayTao = DateTime.Now;
                            nhatKy.NguoiTao = User.Identity.Name;
                            nhatKy.DonViId = plv.DonViId;
                            nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.VuaTao;
                            nhatKy.TrangThaiMoi = plv.TrangThai;
                            nhatKy.GhiChu = "Cập nhật công việc về vừa tạo";
                            nhatKy.PhongBanId = plv.PhongBanID;

                            string strError = "";
                            nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                        }
                        catch
                        {

                        }

                        DisposeAll();

                        return Json(new { success = true, responseText = "Cập nhật trạng thái phiên làm việc thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }

                DisposeAll();

                return Json(new { success = false, responseText = "Cập nhật trạng thái phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();

                return Json(new { success = false, responseText = "Cập nhật trạng thái phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult CapNhatTrangThaiVuaTaoPhieuLenh(string Id)
        {
            try
            {
                //var plv = _pcongtac_ser.GetById(int.Parse(Id));

                //if (plv != null)
                //{
                //    plv.MaTT = (int)TrangThaiPhienLV.VuaTao;
                //    //plv.NgayKetThuc = null;
                //    plv.IsChuyenNPC = false;

                //    string error = "";

                //    _pcongtac_ser.Update(plv, ref error);

                //    if (error == "")
                //    {
                //        DisposeAll();

                //        return Json(new { success = true, responseText = "Cập nhật trạng thái phiên làm việc thành công" }, JsonRequestBehavior.AllowGet);
                //    }
                //}

                //DisposeAll();

                return Json(new { success = false, responseText = "Cập nhật trạng thái phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();

                return Json(new { success = false, responseText = "Cập nhật trạng thái phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        #region Create
        [HttpPost]
        public async Task<ActionResult> CreatePhienLv(string PhongBanID, int TT_Phien, string NoiDung, string DiaDiem, string NgayLamViec, string GioBd, string GioKt, string NgayKt, string NguoiDuyet_SoPa, string NguoiChiHuy, string GiamSatVien, string NguoiKiemSoat, string NguoiKiemTraPhieu, string LanhDaoTrucBan,
            string LyDoThayDoi, string NguoiDuyet_SoPa_Id, string NguoiChiHuy_Id, string GiamSatVien_Id, string NguoiKiemSoat_Id, string NguoiKiemTraPhieu_Id, string LanhDaoTrucBan_Id,
            string LanhDaoCongViec_Id,
            string LanhDaoCongViec,
            string NguoiCapPhieu_Id,
            string NguoiCapPhieu,
            //insert bảng plv_KeHoachLichLamViec
            int? HinhThucKiemTra, string NguoiDaiDienKT, string NguoiDaiDienKT_Id,
            int CatDien = 0, int TiepDia = 0, int TinhChat = 0, int PhieuLenh = 0)
        {
            int kt = 0;
            List<string> userPushNotificationWeb = new List<string>();
            Dictionary<string, int> messageList = new Dictionary<string, int>();

            tblPhienLamViec plv = new tblPhienLamViec();

            try
            {

                if (PhieuLenh == 0)
                {
                    DisposeAll();

                    return Json("Bạn chưa chọn Phiếu/Lệnh công tác !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(PhongBanID))
                {
                    DisposeAll();

                    return Json("Bạn chưa chọn Đơn vị làm công việc !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(NoiDung))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Nội dung !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(DiaDiem))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Địa điểm !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(NgayLamViec))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Ngày làm việc !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(GioBd))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Giờ bắt đầu, hoặc nhập không chính xác !", JsonRequestBehavior.AllowGet);
                }
                if (string.IsNullOrEmpty(GioKt))
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập Giờ kết thúc, hoặc nhập không chính xác !", JsonRequestBehavior.AllowGet);
                }

                if (PhieuLenh == 0)
                {
                    DisposeAll();

                    return Json("Bạn chưa nhập loại công việc cấp phiếu/lệnh công tác !", JsonRequestBehavior.AllowGet);
                }

                IFormatProvider culture = new System.Globalization.CultureInfo("vi-VN", true);
                DateTime dt1 = DateTime.Parse(NgayLamViec.Trim(), culture, DateTimeStyles.None);
                DateTime gioBd = MyString2Timespan(GioBd.ToString().Trim().Split('-', '–')[0].Replace("h", ":").Replace("H", ":").Trim());
                DateTime gioKetThuc = MyString2Timespan(GioKt.ToString().Trim().Split('-', '–')[0].Replace("h", ":").Replace("H", ":").Trim());
                //DateTime ngayBd = DateTime.ParseExact(NgayBd, "dd/MM/yyyy", null);
                DateTime ngayKt = DateTime.ParseExact(NgayKt, "dd/MM/yyyy", null);

                DateTime thoiGianBd = new DateTime(dt1.Year, dt1.Month, dt1.Day, gioBd.Hour, gioBd.Minute, 0);
                DateTime thoiGianKt = new DateTime(ngayKt.Year, ngayKt.Month, ngayKt.Day, gioKetThuc.Hour, gioKetThuc.Minute, 0);

                if (thoiGianBd == null || thoiGianKt == null || thoiGianBd.Year < 1970 || thoiGianKt.Year < 1970)
                {
                    DisposeAll();

                    return Json("Thời gian làm việc không chính xác !", JsonRequestBehavior.AllowGet);
                }
                else if (thoiGianBd >= thoiGianKt)
                {
                    DisposeAll();

                    return Json("Thời gian bắt đầu phải nhỏ hơn kết thúc !", JsonRequestBehavior.AllowGet);
                }
                plv.GioBd = thoiGianBd;
                plv.GioKt = thoiGianKt;
                plv.PhongBanID = int.Parse(PhongBanID);

                plv.PhongBanIDCreate = int.Parse(Session["PhongBanId"].ToString());
                if (NguoiCapPhieu_Id != null)
                {
                    var gnvcp = _nhanvien_ser.GetById(NguoiCapPhieu_Id);
                    if (gnvcp != null)
                        plv.PhongBanIDCreate = gnvcp.PhongBanId;
                }

                tblPhongBan phongBan = _pban_ser.GetById(plv.PhongBanID);
                if (phongBan != null)
                {
                    plv.DonViId = phongBan.MaDVi;
                }
                else
                {
                    plv.DonViId = Session["DonViID"].ToString();
                }
                plv.NoiDung = NoiDung.Replace("\n", "").Replace("\t", "").Trim();
                plv.DiaDiem = DiaDiem.Replace("\n", "").Replace("\t", "").Trim();
                plv.NgayLamViec = dt1;

                if (_plviec_ser.KiemTraTrung2(dt1, int.Parse(PhongBanID), DiaDiem.Trim(), plv.GioBd, NoiDung.Trim(), null))
                {
                    DisposeAll();

                    return Json("Công việc đã tồn tại !", JsonRequestBehavior.AllowGet);
                }

                plv.NguoiDuyet_SoPa = NguoiDuyet_SoPa;
                plv.NguoiChiHuy = NguoiChiHuy;
                plv.GiamSatVien = GiamSatVien;
                plv.NguoiKiemSoat = NguoiKiemSoat;
                plv.NguoiKiemTraPhieu = NguoiKiemTraPhieu;
                plv.LanhDaoTrucBan = LanhDaoTrucBan;
                plv.NgayTao = DateTime.Now;
                plv.NguoiTao = User.Identity.Name;
                plv.TT_Phien = TT_Phien;
                plv.LyDoThayDoi = LyDoThayDoi;

                plv.NguoiDuyet_SoPa_Id = NguoiDuyet_SoPa_Id;
                plv.NguoiChiHuy_Id = NguoiChiHuy_Id;
                plv.GiamSatVien_Id = GiamSatVien_Id;
                plv.NguoiKiemSoat_Id = NguoiKiemSoat_Id;
                plv.NguoiKiemTraPhieu_Id = NguoiKiemTraPhieu_Id;
                plv.LanhDaoTrucBan_Id = LanhDaoTrucBan_Id;

                plv.LanhDaoCongViec_Id = LanhDaoCongViec_Id;
                plv.LanhDaoCongViec = LanhDaoCongViec;

                plv.NguoiCapPhieu_Id = NguoiCapPhieu_Id;
                plv.NguoiCapPhieu = NguoiCapPhieu;

                //plv.MaPCT = plv_pct.ID;
                plv.IsChuyenNPC = false;

                //Trạng thái : Vừa tạo, đã duyệt
                plv.TrangThai = (int)TrangThaiPhienLV.VuaTao;


                kt = _plviec_ser.PhienLamViec_AddNew(plv);
                if (kt > 0)
                {

                    #region Insert_plv_KeHoachLichLamViec
                    if (HinhThucKiemTra != null)
                    {
                        var input_dataKHLLV = new plv_KeHoachLichLamViec
                        {
                            PhienLamViecId = kt,
                            HinhThucKiemTra = HinhThucKiemTra,
                            NguoiDaiDienKT_Id = NguoiDaiDienKT_Id,
                            NguoiDaiDienKT = NguoiDaiDienKT,
                            TrangThai = 1,
                            LyDoHoanHuy = "NULL"
                        };

                        var check = await _keHoachLichLamViecRepository.AddNew(input_dataKHLLV);
                    }
                    #endregion

                    bool save_tbl_NhanVien_PhienLamViec = false;

                    if (!string.IsNullOrEmpty(NguoiDuyet_SoPa_Id))
                    {
                        string[] arr_NguoiDuyet_SoPa_Id = NguoiDuyet_SoPa_Id.Split(',');
                        if (arr_NguoiDuyet_SoPa_Id != null && arr_NguoiDuyet_SoPa_Id.Length > 0)
                        {
                            save_tbl_NhanVien_PhienLamViec = true;
                            foreach (var item in arr_NguoiDuyet_SoPa_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiDuyet_SoPa, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });

                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(NguoiChiHuy_Id))
                    {
                        string[] arr_NguoiChiHuy_Id = NguoiChiHuy_Id.Split(',');
                        if (arr_NguoiChiHuy_Id != null && arr_NguoiChiHuy_Id.Length > 0)
                        {
                            save_tbl_NhanVien_PhienLamViec = true;
                            foreach (var item in arr_NguoiChiHuy_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiChiHuy, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });

                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(GiamSatVien_Id))
                    {
                        string[] arr_GiamSatVien_Id = GiamSatVien_Id.Split(',');
                        if (arr_GiamSatVien_Id != null && arr_GiamSatVien_Id.Length > 0)
                        {
                            save_tbl_NhanVien_PhienLamViec = true;
                            foreach (var item in arr_GiamSatVien_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.GiamSatVien, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(NguoiKiemSoat_Id))
                    {
                        string[] arr_NguoiKiemSoat_Id = NguoiKiemSoat_Id.Split(',');
                        if (arr_NguoiKiemSoat_Id != null && arr_NguoiKiemSoat_Id.Length > 0)
                        {
                            save_tbl_NhanVien_PhienLamViec = true;
                            foreach (var item in arr_NguoiKiemSoat_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiKiemSoat, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(NguoiKiemTraPhieu_Id))
                    {
                        string[] arr_NguoiKiemTraPhieu_Id = NguoiKiemTraPhieu_Id.Split(',');
                        if (arr_NguoiKiemTraPhieu_Id != null && arr_NguoiKiemTraPhieu_Id.Length > 0)
                        {
                            save_tbl_NhanVien_PhienLamViec = true;
                            foreach (var item in arr_NguoiKiemTraPhieu_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiKiemTraPhieu, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(LanhDaoTrucBan_Id))
                    {
                        string[] arr_LanhDaoTrucBan_Id = LanhDaoTrucBan_Id.Split(',');
                        if (arr_LanhDaoTrucBan_Id != null && arr_LanhDaoTrucBan_Id.Length > 0)
                        {
                            save_tbl_NhanVien_PhienLamViec = true;
                            foreach (var item in arr_LanhDaoTrucBan_Id)
                            {
                                var getNhanVien = _nhanvien_ser.GetById(item);
                                if (getNhanVien != null)
                                {
                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = item, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.LanhDaoTrucBan, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                }
                            }
                        }
                    }

                    _plviec_ser.Context.SaveChanges();

                    if (CatDien > 0)
                    {
                        tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                        phienLV_ThuocTinh.ThuocTinhId = CatDien;
                        phienLV_ThuocTinh.PhienLamViecId = kt;
                        phienLV_ThuocTinh.NgayTao = DateTime.Now;
                        phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                        _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                    }
                    if (TiepDia > 0)
                    {
                        tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                        phienLV_ThuocTinh.ThuocTinhId = TiepDia;
                        phienLV_ThuocTinh.PhienLamViecId = kt;
                        phienLV_ThuocTinh.NgayTao = DateTime.Now;
                        phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                        _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                    }
                    if (TinhChat > 0)
                    {
                        tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                        phienLV_ThuocTinh.ThuocTinhId = TinhChat;
                        phienLV_ThuocTinh.PhienLamViecId = kt;
                        phienLV_ThuocTinh.NgayTao = DateTime.Now;
                        phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                        _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                    }

                    int maLenhPhieu = 1;
                    if (PhieuLenh > 0)
                    {
                        maLenhPhieu = PhieuLenh;
                    }
                    int maPhieuCongTac = 0;
                    if (maLenhPhieu > 0)
                    {
                        plv_PhieuCongTac phieuCongTac = new plv_PhieuCongTac();
                        phieuCongTac.NoiDung = plv.NoiDung;
                        phieuCongTac.MaLP = maLenhPhieu;
                        phieuCongTac.MaTT = 1;
                        phieuCongTac.NgayTao = DateTime.Now;
                        phieuCongTac.NguoiTao = User.Identity.Name;
                        phieuCongTac.DonViId = plv.DonViId;
                        phieuCongTac.NguoiCapPhieu = NguoiCapPhieu;
                        phieuCongTac.NguoiCapPhieu_Id = NguoiCapPhieu_Id;

                        _plviec_ser.Context.plv_PhieuCongTac.Add(phieuCongTac);
                        _plviec_ser.Context.SaveChanges();
                        maPhieuCongTac = phieuCongTac.ID;
                    }

                    _plviec_ser.Context.SaveChanges();

                    tblPhienLamViec phienLamViecNew = _plviec_ser.Context.tblPhienLamViecs.FirstOrDefault(x => x.Id == kt);
                    if (maPhieuCongTac > 0)
                    {
                        phienLamViecNew.MaPCT = maPhieuCongTac;
                    }
                    _plviec_ser.Context.SaveChanges();
                    //Dispose
                    #region Send Email AND Notify
                    MailService ms = new MailService();

                    string userName = WebConfigurationManager.AppSettings["userEmail"];
                    string password = WebConfigurationManager.AppSettings["passEmail"];

                    IBaseConverter<tblPhienLamViec, PhienLVModel> convert = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                    var model = convert.ConvertObject(plv);
                    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietCongViecNhanVienEmail.cshtml", model);

                    string donviId = null;
                    try
                    {
                        donviId = Session["DonViID"].ToString();
                    }
                    catch { }
                    DonViRepository dvr = new DonViRepository();

                    //1. Người tạo phiên
                    try
                    {
                        tblNhanVien nv = _nhanvien_ser.GetByUserName(User.Identity.Name);
                        if (nv != null)
                        {
                            try
                            {
                                // Create messages to user

                                Message message = new Message();
                                message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                message.NgayTao = DateTime.Now;
                                message.NguoiTao = User.Identity.Name;
                                message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                message.MaTaiKhoan = nv.Id;
                                message.TrangThai = (int)TrangThaiMessage.UnRead;
                                message.MA_DVIQLY = donviId;
                                message.MA_PBAN = plv.PhongBanID.ToString();
                                message.PhienLamViecId = plv.Id;

                                string errorMessage = "";

                                var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));

                                messageList.Add(nv.Username, int.Parse(messageId.ToString()));

                            }
                            catch
                            {

                            }

                            try
                            {
                                //await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo công việc", html));
                            }
                            catch
                            {

                            }

                            //try
                            //{
                            //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                            //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                            //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                            //    TwilioClient.Init(accountSid, authToken);

                            //    var from = new PhoneNumber(fromPhoneNumber);
                            //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                            //    var sms = await Task.Run(() => MessageResource.Create(
                            //        to: to,
                            //        from: from,
                            //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                            //}
                            //catch (Exception e)
                            //{

                            //}

                            userPushNotificationWeb.Add(nv.Username);

                        }
                        //ms.SendMail(nv.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));

                    }
                    catch (Exception ex) { }

                    //2. Lãnh đạo đơn vị cấp quản lý trực tiếp (master)
                    try
                    {
                        //IEnumerable<EmailSend> rms = _plviec_ser.GetEmailByDonViID(donviId, "master");
                        //if (rms != null)
                        //{
                        //foreach (var item in rms)
                        //{
                        //    try
                        //    {
                        //        await Task.Run(() => MailHelper.SendMail(userName, password, item.Email, "v/v Thông báo công việc", html));
                        //    }
                        //    catch
                        //    {

                        //    }

                        //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                        //}
                        //}
                    }
                    catch { }

                    try
                    {
                        var role = _roleManager.FindByName("Master");

                        IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == donviId).ToList();

                        if (users != null && users.Count() > 0)
                        {
                            foreach (var item in users)
                            {
                                // Create messages to user
                                try
                                {
                                    Message message = new Message();
                                    message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                    message.NgayTao = DateTime.Now;
                                    message.NguoiTao = User.Identity.Name;
                                    message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                    message.MaTaiKhoan = item.Id;
                                    message.TrangThai = (int)TrangThaiMessage.UnRead;
                                    message.MA_DVIQLY = donviId;
                                    message.MA_PBAN = plv.PhongBanID.ToString();
                                    message.PhienLamViecId = plv.Id;

                                    string errorMessage = "";

                                    var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));

                                    messageList.Add(item.Username, int.Parse(messageId.ToString()));
                                }
                                catch
                                {

                                }

                                //try
                                //{
                                //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                //    TwilioClient.Init(accountSid, authToken);

                                //    var from = new PhoneNumber(fromPhoneNumber);
                                //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                //    var sms = await Task.Run(() => MessageResource.Create(
                                //        to: to,
                                //        from: from,
                                //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                //}
                                //catch (Exception e)
                                //{

                                //}

                                userPushNotificationWeb.Add(item.Username);

                            }


                        }
                    }
                    catch
                    {

                    }

                    //3. Cán bộ phòng vận hành an toàn + quản lý cấp công ty (manager + admin ) đơn vị Điện Lực Hải Phòng (cấp tổng)

                    //lấy DonviID cap trên
                    tblDonVi dvch = dvr.GetById(donviId);
                    //nếu có đơn vị cấp trên thì gửi email cho đơn vị cấp trên
                    if (dvch != null)
                    {
                        try
                        {

                            if (string.IsNullOrEmpty(dvch.DviCha.ToString()))
                            {
                                //IEnumerable<EmailSend> rms2 = _plviec_ser.GetEmailByDonViID(dvch.DviCha, "manager");
                                //if (rms2 != null)
                                //{
                                //foreach (var item in rms2)
                                //{
                                //    try
                                //    {
                                //        await Task.Run(() => MailHelper.SendMail(userName, password, item.Email, "v/v Thông báo công việc", html));
                                //    }
                                //    catch
                                //    {
                                //    }

                                //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                //}
                                //}

                                var role = _roleManager.FindByName("Manager");

                                IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == dvch.DviCha).ToList();

                                if (users != null && users.Count() > 0)
                                {
                                    foreach (var item in users)
                                    {
                                        try
                                        {
                                            // Create messages to user

                                            Message message = new Message();
                                            message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                            message.NgayTao = DateTime.Now;
                                            message.NguoiTao = User.Identity.Name;
                                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                            message.MaTaiKhoan = item.Id;
                                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                                            message.MA_DVIQLY = donviId;
                                            message.MA_PBAN = plv.PhongBanID.ToString();
                                            message.PhienLamViecId = plv.Id;

                                            string errorMessage = "";

                                            var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));

                                            messageList.Add(item.Username, int.Parse(messageId.ToString()));
                                        }
                                        catch
                                        {

                                        }

                                        //try
                                        //{
                                        //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                        //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                        //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                        //    TwilioClient.Init(accountSid, authToken);

                                        //    var from = new PhoneNumber(fromPhoneNumber);
                                        //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                        //    var sms = await Task.Run(() => MessageResource.Create(
                                        //        to: to,
                                        //        from: from,
                                        //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                        //}
                                        //catch (Exception e)
                                        //{

                                        //}
                                        userPushNotificationWeb.Add(item.Username);
                                    }


                                }

                            }
                        }
                        catch { }

                        try
                        {
                            if (string.IsNullOrEmpty(dvch.DviCha.ToString()))
                            {
                                //IEnumerable<EmailSend> rms3 = _plviec_ser.GetEmailByDonViID(dvch.DviCha, "admin");
                                //if (rms3 != null)
                                //{
                                //foreach (var item in rms3)
                                //{
                                //    try
                                //    {
                                //        await Task.Run(() => MailHelper.SendMail(userName, password, item.Email, "v/v Thông báo công việc", html));
                                //    }
                                //    catch
                                //    {

                                //    }

                                //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                //}
                                //}

                                var role = _roleManager.FindByName("Admin");

                                IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == dvch.DviCha).ToList();

                                if (users != null && users.Count() > 0)
                                {
                                    foreach (var item in users)
                                    {
                                        try
                                        {
                                            // Create messages to user

                                            Message message = new Message();
                                            message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                            message.NgayTao = DateTime.Now;
                                            message.NguoiTao = User.Identity.Name;
                                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                            message.MaTaiKhoan = item.Id;
                                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                                            message.MA_DVIQLY = donviId;
                                            message.MA_PBAN = plv.PhongBanID.ToString();
                                            message.PhienLamViecId = plv.Id;

                                            string errorMessage = "";

                                            var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));

                                            messageList.Add(item.Username, int.Parse(messageId.ToString()));
                                        }
                                        catch
                                        {

                                        }

                                        //try
                                        //{
                                        //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                        //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                        //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                        //    TwilioClient.Init(accountSid, authToken);

                                        //    var from = new PhoneNumber(fromPhoneNumber);
                                        //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                        //    var sms = await Task.Run(() => MessageResource.Create(
                                        //        to: to,
                                        //        from: from,
                                        //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                        //}
                                        //catch (Exception e)
                                        //{

                                        //}

                                        userPushNotificationWeb.Add(item.Username);
                                    }
                                }
                            }
                        }
                        catch { }
                    }
                    // nếu không tìm thấy đơn vị cấp trên tức là cấp cao nhất thì sẽ gửi email cho cấp hiện tại
                    else
                    {
                        try
                        {
                            //IEnumerable<EmailSend> rms2 = _plviec_ser.GetEmailByDonViID(donviId, "manager");
                            //if (rms2 != null)
                            //{
                            //foreach (var item in rms2)
                            //{
                            //    try
                            //    {
                            //        await Task.Run(() => MailHelper.SendMail(userName, password, item.Email, "v/v Thông báo công việc", html));
                            //    }
                            //    catch
                            //    {

                            //    }

                            //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                            //}
                            //}

                            var role = _roleManager.FindByName("Manager");

                            IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == donviId).ToList();

                            if (users != null && users.Count() > 0)
                            {
                                foreach (var item in users)
                                {
                                    try
                                    {
                                        // Create messages to user

                                        Message message = new Message();
                                        message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                        message.NgayTao = DateTime.Now;
                                        message.NguoiTao = User.Identity.Name;
                                        message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                        message.MaTaiKhoan = item.Id;
                                        message.TrangThai = (int)TrangThaiMessage.UnRead;
                                        message.MA_DVIQLY = donviId;
                                        message.MA_PBAN = plv.PhongBanID.ToString();
                                        message.PhienLamViecId = plv.Id;

                                        string errorMessage = "";

                                        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                        messageList.Add(item.Username, int.Parse(messageId.ToString()));
                                    }
                                    catch
                                    {

                                    }



                                    //try
                                    //{
                                    //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                    //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                    //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                    //    TwilioClient.Init(accountSid, authToken);

                                    //    var from = new PhoneNumber(fromPhoneNumber);
                                    //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                    //    var sms = await Task.Run(() => MessageResource.Create(
                                    //        to: to,
                                    //        from: from,
                                    //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                    //}
                                    //catch (Exception e)
                                    //{

                                    //}
                                    userPushNotificationWeb.Add(item.Username);
                                }

                            }
                        }
                        catch { }

                        try
                        {
                            //IEnumerable<EmailSend> rms2 = _plviec_ser.GetEmailByDonViID(donviId, "admin");
                            //if (rms2 != null)
                            //{
                            //foreach (var item in rms2)
                            //{
                            //    try
                            //    {
                            //        await Task.Run(() => MailHelper.SendMail(userName, password, item.Email, "v/v Thông báo công việc", html));
                            //    }
                            //    catch
                            //    {
                            //    }
                            //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                            //}
                            //}

                            var role = _roleManager.FindByName("Admin");

                            IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == donviId).ToList();

                            if (users != null && users.Count() > 0)
                            {
                                foreach (var item in users)
                                {
                                    try
                                    {
                                        // Create messages to user

                                        Message message = new Message();
                                        message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                        message.NgayTao = DateTime.Now;
                                        message.NguoiTao = User.Identity.Name;
                                        message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                        message.MaTaiKhoan = item.Id;
                                        message.TrangThai = (int)TrangThaiMessage.UnRead;
                                        message.MA_DVIQLY = donviId;
                                        message.MA_PBAN = plv.PhongBanID.ToString();
                                        message.PhienLamViecId = plv.Id;

                                        string errorMessage = "";

                                        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                        messageList.Add(item.Username, int.Parse(messageId.ToString()));
                                    }
                                    catch
                                    {
                                    }

                                    //try
                                    //{
                                    //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                    //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                    //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                    //    TwilioClient.Init(accountSid, authToken);

                                    //    var from = new PhoneNumber(fromPhoneNumber);
                                    //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                    //    var sms = await Task.Run(() => MessageResource.Create(
                                    //        to: to,
                                    //        from: from,
                                    //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                    //}
                                    //catch (Exception e)
                                    //{

                                    //}

                                    userPushNotificationWeb.Add(item.Username);
                                }
                            }
                        }
                        catch { }
                    }

                    #endregion

                    try
                    {
                        tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                        nhatKy.PhienLamViecId = plv.Id;
                        nhatKy.NgayTao = DateTime.Now;
                        nhatKy.NguoiTao = User.Identity.Name;
                        nhatKy.DonViId = plv.DonViId;
                        nhatKy.TrangThaiCu = plv.TrangThai;
                        nhatKy.TrangThaiMoi = plv.TrangThai;
                        nhatKy.GhiChu = "Tạo công việc";
                        nhatKy.PhongBanId = plv.PhongBanID;

                        string strError = "";
                        nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                    }
                    catch
                    {

                    }
                    #region Gửi notify mobile
                    var userIds = new List<string>
                    {
                     plv.NguoiDuyet_SoPa_Id,
                     plv.NguoiChiHuy_Id,
                     plv.GiamSatVien_Id,
                     plv.NguoiKiemSoat_Id,
                     plv.NguoiKiemTraPhieu_Id,
                     plv.LanhDaoTrucBan_Id,
                     plv.LanhDaoCongViec_Id,
                     plv.NguoiCapPhieu_Id,
                     NguoiDaiDienKT_Id // Phiên làm việc
                    }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList(); // Loại bỏ Id null hoặc rỗng
                    if (userIds.Any())
                    {
                        var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);

                        foreach (var userId in userIds)
                        {
                            var requestData = new
                            {
                                IDConect = "PN",
                                userId = userId,
                                title = "Thêm mới phiên làm việc",
                                name = "NPCIT",
                                header = " ",
                                subtitle = " ",
                                contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Thêm mới phiên làm việc",
                            };

                            var jsonContent = JsonConvert.SerializeObject(requestData);
                            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                            using (HttpClient httpClient = new HttpClient())
                            {
                                var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                var response = await httpClient.PostAsync(Api_Notify, content);

                                if (response.IsSuccessStatusCode)
                                {
                                    var result = await response.Content.ReadAsStringAsync();
                                    var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                    if (!apiResponse.Success)
                                    {
                                        //return Json(new { success = true, message = "Gửi thông báo thành công với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                //else
                                //{
                                //    var data = response;
                                //    return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);

                                //}
                            }
                        }

                        //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        //return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                    }

                    #endregion

                    //try
                    //{
                    //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                    //    noti.title = "Phiên làm việc vừa được tạo mới";
                    //    noti.body = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                    //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + kt;
                    //    noti.tag = kt.ToString();

                    //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                    //    //var connection = new HubConnection(url, useDefaultUrl: false);                        
                    //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                    //    {
                    //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                    //        connection.Start().Wait();
                    //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, donviId }).Wait();
                    //    }
                    //}
                    //catch { }

                    ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                }

                DisposeAll();

                return Json(new { success = kt }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = -1;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi tạo công việc. Chi tiết: {0}", ex.Message));
                return Json(new { success = -1 }, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region DeletePhienLv
        [HttpGet]
        public async Task<ActionResult> DeletePhienLv(string Id, string NoiDung)
        {
            string kt = "";
            try
            {
                tblPhienLamViec plv = _plviec_ser.GetById(int.Parse(Id));

                if (plv == null)
                {
                    DisposeAll();

                    return Json("Phiên làm việc không tồn tại!", JsonRequestBehavior.AllowGet);
                }

                //plv.TrangThai = 6;
                //_plviec_ser.Update(plv, ref kt);

                kt = _plviec_ser.PhienLamViec_Delete(int.Parse(Id));

                if (kt == "")
                {
                    try
                    {
                        var listDelete = _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Where(x => x.PhienLamViecId == plv.Id);
                        if (listDelete != null)
                        {
                            _plviec_ser.Context.tbl_NhanVien_PhienLamViec.RemoveRange(listDelete);
                            _plviec_ser.Context.SaveChanges();
                        }
                    }
                    catch
                    {

                    }

                    string userName = WebConfigurationManager.AppSettings["userEmail"];
                    string password = WebConfigurationManager.AppSettings["passEmail"];

                    IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                    var model = baseConverter.ConvertObject(plv);

                    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietXoaCongViecNhanVienEmail.cshtml", model);

                    List<string> userPushNotificationWeb = new List<string>();
                    Dictionary<string, int> messageList = new Dictionary<string, int>();
                    NhanVienRepository nvr = new NhanVienRepository();
                    tblNhanVien nv = nvr.GetByUserName(plv.NguoiTao);

                    if (nv != null)
                    {
                        userPushNotificationWeb.Add(nv.Username);

                        //try
                        //{
                        //    await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo xóa công việc", html));
                        //}
                        //catch
                        //{

                        //}

                        try
                        {
                            Message message = new Message();
                            message.NoiDung = plv.NoiDung + " vừa được xóa bởi " + User.Identity.Name;
                            message.NgayTao = DateTime.Now;
                            message.NguoiTao = User.Identity.Name;
                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                            message.MaTaiKhoan = nv.Id;
                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                            message.MA_DVIQLY = nv.DonViId;
                            message.MA_PBAN = plv.PhongBanID.ToString();
                            message.PhienLamViecId = plv.Id;

                            string errorMessage = "";

                            var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                            messageList.Add(nv.Username, int.Parse(messageId.ToString()));

                            //try
                            //{
                            //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                            //    noti.title = "Phiên làm việc vừa bị xóa";
                            //    noti.body = plv.NoiDung + " vừa bị xóa bởi " + User.Identity.Name;
                            //    noti.link = "";
                            //    noti.tag = "";

                            //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                            //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                            //    {
                            //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //        connection.Start().Wait();
                            //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //    }
                            //    //var connection = new HubConnection(url, useDefaultUrl: false);
                            //    //IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //    //connection.Start().Wait();
                            //    //hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //}
                            //catch (Exception ex)
                            //{

                            //}
                        }
                        catch
                        {
                        }

                        try
                        {
                            tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                            nhatKy.PhienLamViecId = plv.Id;
                            nhatKy.NgayTao = DateTime.Now;
                            nhatKy.NguoiTao = User.Identity.Name;
                            nhatKy.DonViId = plv.DonViId;
                            nhatKy.TrangThaiCu = plv.TrangThai;
                            nhatKy.TrangThaiMoi = 6;
                            nhatKy.GhiChu = "Xóa công việc";
                            nhatKy.PhongBanId = plv.PhongBanID;

                            string strError = "";
                            nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                        }
                        catch
                        {

                        }


                        //try
                        //{
                        //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                        //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                        //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                        //    TwilioClient.Init(accountSid, authToken);

                        //    var from = new PhoneNumber(fromPhoneNumber);
                        //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                        //    var sms = await Task.Run(() => MessageResource.Create(
                        //        to: to,
                        //        from: from,
                        //        body: plv.NoiDung + " vừa được xóa bởi " + User.Identity.Name));
                        //}
                        //catch (Exception e)
                        //{

                        //}
                    }

                    ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} xóa phiên làm việc {1} thành công", User.Identity.Name, NoiDung));
                }
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi xóa phiên làm việc. Chi tiết: {0}", ex.Message));
            }

            DisposeAll();

            return Json(kt, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region 'Ký số BBKS'
        [HttpPost]
        public async Task<ActionResult> onSignBBKSAsync()
        {
            tblPhienLamViec plv = null;
            try
            {

                string IdPhien = Request.Form["Id"];
                int loaibb = int.Parse(Request.Form["Loaibb"].ToString());

                if (checkPlvSignExists(IdPhien, loaibb))
                {
                    DisposeAll();

                    return Json("Phiếu đã được ký", JsonRequestBehavior.AllowGet);
                }

                HttpFileCollectionBase files = Request.Files;
                if (files.Count == 0)
                {
                    DisposeAll();

                    return Json("Chưa có file", JsonRequestBehavior.AllowGet);
                }
                HttpPostedFileBase file = files[0];
                plv = _plviec_ser.GetById(int.Parse(IdPhien));



                plv_PhieuCongTac pct = _pcongtac_ser.GetById(plv.MaPCT);
                if (pct.SoPhieu == null)
                {
                    DisposeAll();

                    return Json("Chưa cấp số phiếu không được Ký", JsonRequestBehavior.AllowGet);
                }

                tblNhanVien nvien = _nhanvien_ser.GetByUserName(Session["UserName"].ToString());

                if (string.IsNullOrWhiteSpace(nvien.Hsm_serial))
                {
                    DisposeAll();

                    return Json("Người dùng chưa được cấp số EVNCA.", JsonRequestBehavior.AllowGet);
                }

                //Kiểm tra user có EVNCA ko?
                string kCheck = await CheckAuthenSign(nvien.Hsm_serial);

                if (kCheck.Equals("ERROR"))
                {
                    return Json("NOT EVNCA", JsonRequestBehavior.AllowGet);
                }

                byte[] image = new byte[file.ContentLength];
                string mimeType = file.ContentType.ToLower();
                if (mimeType != "application/pdf")
                {
                    return Json("Chỉ cho phép ký file PDF!", JsonRequestBehavior.AllowGet);

                }
                if (file != null && file.ContentLength > 0)
                {
                    using (BinaryReader reader = new BinaryReader(file.InputStream))
                    {
                        image = reader.ReadBytes(file.ContentLength);
                    }
                }

                string base64File = SignBBKS_PATCAsync(image, nvien.Id, 0);

                //Ghi file xuống thư mục
                saveFileToFolder(file.FileName.Replace(".pdf", ""), base64File);
                //Ký xong lưu vào csdl và upload file lên server
                //Tạm thời sẽ upload file lên folder
                String path = HttpContext.Server.MapPath("~/Upload/");
                onSaveInfoFileSignBBKS(file.FileName, plv, Session["UserId"].ToString(), DateTime.Now, path + file.FileName + ".pdf", loaibb);

                //Return base64 file đã ký.
                return Json(base64File, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json("Phiên làm việc không tồn tại!", JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region 'Kiểm tra xem phiếu đã đc ký số chưa'
        private bool checkPlvSignExists(string id, int loaibb)
        {
            try
            {
                string kq = appPlanRepo.GetUrlFileSignBB(id, loaibb);
                if (kq != null && kq.Length > 0)
                {
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;
        }
        #endregion
        private bool saveFileToFolder(string filename, string base64File)
        {
            String path = HttpContext.Server.MapPath("~/Upload"); //Path

            //Check if directory exist
            if (!System.IO.Directory.Exists(path))
            {
                System.IO.Directory.CreateDirectory(path); //Create directory if it doesn't exist
            }

            //set the image path
            string imgPath = System.IO.Path.Combine(path, filename + ".pdf");

            byte[] imageBytes = Convert.FromBase64String(base64File);

            // Kiểm tra PDF
            if (!IsPdfFile(imageBytes))
            {
                return false;
            }
            System.IO.File.WriteAllBytes(imgPath, imageBytes);

            return true;
        }
        public static bool IsPdfFile(byte[] fileBytes)
        {
            // PDF phải có ít nhất 4 byte
            if (fileBytes.Length < 4)
                return false;

            // Magic number của PDF: 25 50 44 46 (ASCII: %PDF)
            return fileBytes[0] == 0x25 &&
                   fileBytes[1] == 0x50 &&
                   fileBytes[2] == 0x44 &&
                   fileBytes[3] == 0x46;
        }

        //Hàm lưu thông tin file ký số BBKS
        private string onSaveInfoFileSignBBKS(string fileSign, tblPhienLamViec plv, string usersign, DateTime datesign, string urlfilesign, int loaibb)
        {
            string kqua = "";
            try
            {
                appPlanRepo.InsFileSignBBKSPATC(plv.Id, usersign, fileSign, datesign, loaibb);

            }
            catch (Exception ex)
            {
                return null;
            }
            return kqua;
        }

        #region 'Upload file BBKS'
        [HttpPost]
        public async Task<ActionResult> onUploadBBKS()
        {
            tblPhienLamViec plv = null;
            try
            {

                string IdPhien = Request.Form["Id"];
                string loaibb = Request.Form["Loaibb"];

                //if (checkPlvSignExists(IdPhien, int.Parse(loaibb)))
                //{
                //    DisposeAll();

                //    return Json("Phiếu đã được ký", JsonRequestBehavior.AllowGet);
                //}

                HttpFileCollectionBase files = Request.Files;
                if (files.Count == 0)
                {
                    DisposeAll();

                    return Json("Chưa có file", JsonRequestBehavior.AllowGet);
                }
                HttpPostedFileBase file = files[0];
                plv = _plviec_ser.GetById(int.Parse(IdPhien));


                byte[] image = new byte[file.ContentLength];

                if (file != null && file.ContentLength > 0)
                {
                    using (BinaryReader reader = new BinaryReader(file.InputStream))
                    {
                        image = reader.ReadBytes(file.ContentLength);
                    }
                }

                string base64File = Convert.ToBase64String(image, 0, image.Length);
                //Call api để upload file
                string kq = await UploadFileBBKSPATCNotSign(IdPhien, loaibb, base64File);

                //Return base64 file đã ký.
                return Json(kq, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json("Phiên làm việc không tồn tại!", JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        //Bổ sung upload file BBKS và PATC
        public async Task<string> UploadFileBBKSPATCNotSign(string phienid, string loaiphieu, string strfile)
        {
            //Lấy đơn vị
            string dv = _dvi_ser.GetDvConnect();
            string token = await LogInApi(dv);
            string url = System.Configuration.ConfigurationManager.AppSettings["UrlKTGS"].ToString();
            string path = url + "api/v1/PLV/UploadFileBBKSPATCNotSign";
            string kq = "";

            string s = "{\r\n  \"phienid\": \"" + phienid + "\",\r\n  \"loaiphieu\": \"" + loaiphieu + "\",\r\n  \"strfile\":\"" + strfile + "\",\r\n  \"idconnect\":\"" + dv + "\"\r\n}";
            ServicePointManager.ServerCertificateValidationCallback = new
                RemoteCertificateValidationCallback
                (
                   delegate { return true; }
                );
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            using (HttpClient httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                var content = new StringContent(s, System.Text.Encoding.UTF8, "application/json");

                var response = httpClient.PostAsync(path, content).Result;

                kq = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            }


            return kq;
        }

        #region
        [HttpGet]
        public async Task<ActionResult> CallSignPhieu(string Id)
        {
            string kt = "";
            tblPhienLamViec plv = null;
            try
            {
                plv = _plviec_ser.GetById(int.Parse(Id));

                if (plv == null)
                {
                    DisposeAll();

                    return Json("Phiên làm việc không tồn tại!", JsonRequestBehavior.AllowGet);
                }
                plv_PhieuCongTac pct = _pcongtac_ser.GetById(plv.MaPCT);
                if (pct.SoPhieu == null)
                {
                    DisposeAll();

                    return Json("Chưa cấp số phiếu không được Ký", JsonRequestBehavior.AllowGet);
                }


                //   *** Gọi ký theo bước ***
                // 1. Kiểm tra xem đây là bước ký nào?
                // - Bước 0: Người chỉ huy:
                List<plv_PhieuCongTac_Sign> plvSigns = _pcongtac_ser.LstPhieucongtacSignByPlvId(plv.Id);
                tblNhanVien nvien = _nhanvien_ser.GetByUserName(Session["UserName"].ToString());

                //Kiểm tra user có EVNCA ko?

                if (string.IsNullOrWhiteSpace(nvien.Hsm_serial))
                {
                    DisposeAll();

                    return Json("NOT EVNCA", JsonRequestBehavior.AllowGet);
                }

                if (!string.IsNullOrWhiteSpace(nvien.Hsm_serial))
                {
                    string kCheck = await CheckAuthenSign(nvien.Hsm_serial);

                    if (kCheck.Equals("ERROR"))
                    {
                        return Json("NOT EVNCA", JsonRequestBehavior.AllowGet);
                    }
                }

                string kq = "";
                //kq = await CallSignPhieuStep(plv, pct.MaLP.Value, 1, nvien.TenNhanVien);
                if (plvSigns.Count == 0)
                {
                    //Check người cấp phiếu Id mới đc ký
                    if (pct.NguoiCapPhieu_Id.Equals(Session["UserId"].ToString()))
                    {
                        if (pct.MaLP.Value.ToString().Equals("2"))
                        {
                            kq = await CallSignPhieuStep(plv, pct.MaLP.Value, 0, nvien.TenNhanVien);
                            kq = await CallSignPhieuStep(plv, pct.MaLP.Value, 1, nvien.TenNhanVien);
                        }
                        else
                        {
                            kq = await CallSignPhieuStep(plv, pct.MaLP.Value, 0, nvien.TenNhanVien);
                        }
                    }
                    else
                    {
                        DisposeAll();

                        return Json("Not permission", JsonRequestBehavior.AllowGet);
                    }

                }
                else
                {

                    if (pct.MaLP.Value.ToString().Equals("2") && (plvSigns.Count == 2))
                    {
                        DisposeAll();
                        return Json("Chưa ký tại hiện trường", JsonRequestBehavior.AllowGet);
                    }

                    if (pct.MaLP.Value.ToString().Equals("2") && (plvSigns.Count == 1))
                    {
                        DisposeAll();
                        return Json("Chưa ký tại hiện trường", JsonRequestBehavior.AllowGet);
                    }

                    plv_PhieuCongTac_Sign plvPct = plvSigns.Where(r => r.Step == 4).FirstOrDefault();

                    if (plvPct != null)
                    {
                        DisposeAll();
                        return Json("Hoàn thiện bước ký", JsonRequestBehavior.AllowGet);
                    }

                    kq = await CallSignPhieuStep(plv, pct.MaLP.Value, 4, nvien.TenNhanVien);

                }


                ////Gọi ký bước 1
                //await CallSignPhieuStep1(plv.Id.ToString(), pct.MaLP.Value);

                return Json(kq, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();
                return Json("ERROR", JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region Hàm check định danh ký có đúng ko?
        private async Task<string> CheckAuthenSign(string hsmalias)
        {
            string urlSignServer = ConfigurationManager.AppSettings["SignServer"].ToString();
            var httpClient = new HttpClient();
            var uploadServiceBaseAddress = urlSignServer + "api/Sign?DinhDanhKy=" + hsmalias + "&provider=EVN_CA";
            var client = new HttpClient();
            string kq = "ERROR";
            HttpResponseMessage response = await client.GetAsync(uploadServiceBaseAddress);
            if (response.IsSuccessStatusCode)
            {
                kq = await response.Content.ReadAsAsync<string>();
            }

            return kq;

        }
        #endregion

        #region "Hàm lấy bước ký"
        [HttpGet]
        public async Task<ActionResult> GetStepSign(string Id)
        {
            string kt = "";
            tblPhienLamViec plv = null;
            try
            {
                plv = _plviec_ser.GetById(int.Parse(Id));
                List<plv_PhieuCongTac_Sign> plvSigns = _pcongtac_ser.LstPhieucongtacSignByPlvId(plv.Id);

                return Json(plvSigns.Count, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();
                return Json("OK", JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region "Lấy file bước 0 chưa ký để view"
        [HttpGet]
        public async Task<ActionResult> ViewFileNoSign(string idphien)
        {
            string kt = "";
            tblPhienLamViec plv = null;
            plv_PhieuCongTac pct = null;
            try
            {
                plv = _plviec_ser.GetById(int.Parse(idphien));
                pct = _pcongtac_ser.GetById(plv.MaPCT);

                byte[] file = safeTrainRepository.GetFileTmpSign(0, pct.MaLP.Value);//System.IO.File.ReadAllBytes("C:\\Users\\Admin\\Downloads\\6. Phieu KT DZ NGAY TT.xls");
                                                                                    //Lấy tham số
                string param = GetParamSign(plv.Id, pct.MaLP.Value, 0);

                string s = "{\r\n  \"outputType\": \"html\",\r\n  \"parameters\": [\r\n    " + param + "\r\n  ],\r\n  \"template\": \"" + System.Convert.ToBase64String(file) + "\"\r\n}";



                using (HttpClient httpClient = new HttpClient())
                {
                    var content = new StringContent(s, System.Text.Encoding.UTF8, "application/json");

                    var response = httpClient.PostAsync(path, content).Result;

                    kt = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                }

                JObject jObject = JObject.Parse(kt);
                //Chuyển đổi file về pdf
                JObject objBase64Pdf = JObject.Parse(ConvertHtmlToPdfAsync((string)jObject.SelectToken("data")).Result);

                return Json((string)objBase64Pdf.SelectToken("data"), JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();
                return null;
            }
        }
        #endregion

        #region "Gọi ký theo bước"
        public async Task<string> CallSignPhieuStep(tblPhienLamViec plv, int loaiphieu, int step, string userSign)
        {
            string kt = "";
            try
            {
                //Lấy file template từ database

                //Read file thử 0 phát.
                byte[] file = safeTrainRepository.GetFileTmpSign(step, loaiphieu);//System.IO.File.ReadAllBytes("C:\\Users\\Admin\\Downloads\\6. Phieu KT DZ NGAY TT.xls");
                                                                                  //Lấy tham số
                string param = GetParamSign(plv.Id, loaiphieu, step);
                var datafile = System.Convert.ToBase64String(file);

                string s = "{\r\n  \"outputType\": \"html\",\r\n  \"parameters\": [\r\n    " + param + "\r\n  ],\r\n  \"template\": \"" + datafile + "\"\r\n}";

                using (HttpClient httpClient = new HttpClient())
                {
                    var content = new StringContent(s, System.Text.Encoding.UTF8, "application/json");

                    var response = httpClient.PostAsync(path, content).Result;

                    kt = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                }

                JObject jObject = JObject.Parse(kt);
                //Chuyển đổi file về pdf
                JObject objBase64Pdf = JObject.Parse(ConvertHtmlToPdfAsync((string)jObject.SelectToken("data")).Result);

                int stepSignCheck = step;

                //Kiểm tra xem là bước 21 hay 22.
                if (plv.NguoiChiHuy_Id.Equals(Session["UserId"].ToString()) && step == 2 && loaiphieu == 2)
                {
                    stepSignCheck = 21;
                }
                else if (plv.GiamSatVien_Id != null && plv.GiamSatVien_Id.Equals(Session["UserId"].ToString()) && step == 2 && loaiphieu == 2)
                {
                    stepSignCheck = 22;
                }
                var data = System.Convert.FromBase64String((string)objBase64Pdf.SelectToken("data"));
                //Gọi ký
                string kq = (string)SignMobileExampleAsync(data, stepSignCheck, userSign, loaiphieu, " ");

                //Ký xong lưu vào database:
                //byte[] fileSign = System.Convert.FromBase64String((kq));
                //Call api upload file
                //appPlanRepo.insFileSignToDb(plv.Id,0, Session["UserId"].ToString(), fileSign);
                if (!kq.Equals(""))
                {
                    await UploadFileSign(plv.Id.ToString(), step.ToString(), loaiphieu.ToString(), Session["UserId"].ToString(), kq);
                    return "OK";
                }
                else
                {
                    return "Có lỗi ký số";
                }

                return "OK";
            }
            catch (Exception ex)
            {
                DisposeAll();
                return null;
            }
        }
        #endregion

        #region View file Sign
        [HttpGet]
        public async Task<ActionResult> ViewFileSign(string id)
        {
            //byte[] bFile = appPlanRepo.getFileSign(id, 0);
            string dv = _dvi_ser.GetDvConnect();
            string token = await LogInApi(dv);
            string kq = "";



            string step = "4";
            //foreach (byte[] b in bFile)
            //{
            //kq = Convert.ToBase64String(bFile, 0, bFile.Length);
            //}

            string url = System.Configuration.ConfigurationManager.AppSettings["UrlKTGS"].ToString();
            string path = url + "api/v1/PLV/DownloadFileSign";

            string s = "{\r\n  \"phienid\": \"" + id + "\",\r\n  \"step\": \"" + step + "\",\r\n  \"idconnect\":\"" + dv + "\"\r\n}";
            //ServicePointManager.ServerCertificateValidationCallback = new
            //    RemoteCertificateValidationCallback
            //    (
            //       delegate { return true; }
            //    );

            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            using (HttpClient httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                var content = new StringContent(s, System.Text.Encoding.UTF8, "application/json");

                var response = httpClient.PostAsync(path, content).Result;

                kq = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            }

            var pdfKq = JsonConvert.DeserializeObject<ResponseDataX>(kq);

            return Json(pdfKq.Data.ToString(), JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region View file Sign
        [HttpGet]
        public async Task<ActionResult> ViewFileSignBBKSPATC(string id, string loaibb)
        {

            //Lấy file từ ổ cứng load lên
            String path = HttpContext.Server.MapPath("~/Upload/");
            string urlfileSign = appPlanRepo.GetUrlFileSignBB(id, int.Parse(loaibb));

            if (urlfileSign != null && urlfileSign != "")
            {
                Byte[] files = System.IO.File.ReadAllBytes(path + urlfileSign);
                return Json(Convert.ToBase64String(files), JsonRequestBehavior.AllowGet);
            }

            return Json("NOFILE", JsonRequestBehavior.AllowGet);
        }
        #endregion

        public async Task<string> UploadFileSign(string phienid, string stepsign, string loaiphieu, string username, string strfile)
        {
            //Lấy đơn vị
            string dv = _dvi_ser.GetDvConnect();
            string token = await LogInApi(dv);
            string url = System.Configuration.ConfigurationManager.AppSettings["UrlKTGS"].ToString();
            string path = url + "api/v1/PLV/UploadFileSign";
            string kq = "";

            string s = "{\r\n  \"phienid\": \"" + phienid + "\",\r\n  \"stepsign\": \"" + stepsign + "\",\r\n  \"loaiphieu\": \"" + loaiphieu + "\",\r\n  \"username\": \"" + username + "\",\r\n  \"strfile\":\"" + strfile + "\",\r\n  \"idconnect\":\"" + dv + "\"\r\n}";
            ServicePointManager.ServerCertificateValidationCallback = new
                RemoteCertificateValidationCallback
                (
                   delegate { return true; }
                );
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            using (HttpClient httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                var content = new StringContent(s, System.Text.Encoding.UTF8, "application/json");

                var response = httpClient.PostAsync(path, content).Result;

                kq = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            }


            return kq;
        }

        private async Task<string> LogInApi(string dv)
        {
            string url = System.Configuration.ConfigurationManager.AppSettings["UrlKTGS"].ToString();
            string path = url + "api/v1/Auth/ECPAuth";
            string kq = "";
            string pwd = "Dungpv123";
            string s = "{\r\n  \"UserName\": \"" + Session["UserName"].ToString() + "\",\r\n  \"Password\": \"" + pwd + "\",\r\n  \"ID_DV\": \"" + dv + "\"\r\n}";
            //ServicePointManager.ServerCertificateValidationCallback = new
            //     RemoteCertificateValidationCallback
            //     (
            //        delegate { return true; }
            //     );
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            using (HttpClient httpClient = new HttpClient())
            {
                var content = new StringContent(s, System.Text.Encoding.UTF8, "application/json");

                var response = httpClient.PostAsync(path, content).Result;

                kq = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            }
            JObject jObject = JObject.Parse(kq);
            string x = (string)jObject.SelectToken("Data").SelectToken("Token");
            return x.Replace("{", "").Replace("}", "");
        }

        #region
        //Hàm gọi ký
        public string SignMobileExampleAsync(byte[] byfile, int stepSign, string userSign, int loaiphieu, string usernameSession)
        {

            string urlSignServer = ConfigurationManager.AppSettings["SignServer"].ToString();
            var httpClient = new HttpClient();
            var uploadServiceBaseAddress = urlSignServer + "api/sign";
            //tblNhanVien nvien = _nhanvien_ser.GetByUserName(Session["UserName"].ToString());
            var username = "";
            if (Session != null && !string.IsNullOrEmpty(Session["UserName"].ToString()))
            {
                username = Session["UserName"].ToString();
            }
            else
            {
                username = usernameSession;
            }

            var objUserSign = _nhanvien_ser.GetByUserName(username);
            //string path = HttpContext.Current.Server.MapPath("/upload/");
            DataSign dt = new DataSign();
            var k = new KetQuaTimKiem();
            k.Height = 40;
            k.Width = 150;
            k.X = 100;
            k.Y = 100;
            k.PageNumber = 1;
            dt.k = k;
            //dt.DinhDanhKy = "84969189999";
            //dt.DinhDanhKy = "84866608977";
            //dt.Provider = "vt";            
            dt.Provider = "EVN_CA";
            dt.DinhDanhKy = objUserSign.Hsm_serial;
            //Bổ sung giờ, phút, ss
            dt.MESSAGE = userSign + " - " + DateTime.Now.ToString("HH:mm:ss dd/MM/yyyy");
            dt.LoaiHThi = "TEXT";
            dt.FileDataSign = byfile;
            //dt.TypeSign = "Text";

            dt.ImageSign = appPlanRepo.imgSignByUserid(username);
            //dt.FileType = "pdf";
            dt.CommentSign = @"test";
            if (loaiphieu == 2)
            {
                if (stepSign == 0)
                {
                    dt.KeyWord = "((LENH_STEP_0))";
                }

                if (stepSign == 1)
                {
                    dt.KeyWord = "((NGUOI_KY_LENH_B1))";
                }

                if (stepSign == 21)
                {
                    dt.KeyWord = "((LENH_STEP_21))";
                }

                if (stepSign == 22)
                {
                    dt.KeyWord = "((LENH_STEP_22))";
                }

                if (stepSign == 3)
                {
                    dt.KeyWord = "((LENH_STEP_3))";
                }

                if (stepSign == 4)
                {
                    dt.KeyWord = "((LENH_STEP_4))";
                }
            }
            else if (loaiphieu == 1)
            {
                if (stepSign == 0)
                {
                    dt.KeyWord = "((PHIEU_STEP_0))";
                }
                if (stepSign == 11)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B11))";
                }
                if (stepSign == 12)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B12))";
                }
                if (stepSign == 13)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B13))";
                }

                if (stepSign == 21)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B21))";
                }

                if (stepSign == 22)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B22))";
                }

                if (stepSign == 23)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B23))";
                }

                if (stepSign == 31)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B31))";
                }

                if (stepSign == 32)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B32))";
                }

                if (stepSign == 33)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B33))";
                }

                if (stepSign == 4)
                {
                    dt.KeyWord = "((PHIEU_SIGN_B4))";
                }
            }


            //dt.NDung_Ky = @"<i> <b>This text is italic </b></i>";
            //dt.DINH_DANG_FILE = "doc";
            var content = new StringContent(JsonConvert.SerializeObject(dt), System.Text.Encoding.UTF8, "application/json");
            var request = new HttpRequestMessage(HttpMethod.Post, uploadServiceBaseAddress)
            {
                Content = content
            };
            var client = new HttpClient();
            HttpResponseMessage response = new HttpResponseMessage(HttpStatusCode.OK);
            string kqSign = "";
            try
            {
                var httpResponseMessage = client.SendAsync(request).Result;

                if (httpResponseMessage.IsSuccessStatusCode)
                {
                    var data_pdf = JsonConvert.DeserializeObject<ResponseDataX>(httpResponseMessage.Content.ReadAsStringAsync().Result);
                    kqSign = data_pdf.Data.ToString();
                }

            }
            catch (Exception ex)
            {

            }

            return kqSign;

        }

        #endregion
        #region 'Gọi hàm ký số BBKS và PATC'
        public string SignBBKS_PATCAsync(byte[] byfile, string userSign, int loaibienban)
        {

            string urlSignServer = ConfigurationManager.AppSettings["SignServer"].ToString();
            var httpClient = new HttpClient();
            var uploadServiceBaseAddress = urlSignServer + "api/sign";
            var username = "";
            if (Session != null && !string.IsNullOrEmpty(Session["UserName"].ToString()))
            {
                username = Session["UserName"].ToString();
            }
            else
            {
                username = userSign;
            }

            var objUserSign = _nhanvien_ser.GetByUserName(username);
            //string path = HttpContext.Current.Server.MapPath("/upload/");
            DataSign dt = new DataSign();
            var k = new KetQuaTimKiem();
            k.Height = 40;
            k.Width = 150;
            k.X = 100;
            k.Y = 100;
            k.PageNumber = 1;
            dt.k = k;
            //dt.DinhDanhKy = "84969189999";
            //dt.DinhDanhKy = "84866608977";
            //dt.Provider = "vt";

            dt.Provider = "EVN_CA";
            dt.DinhDanhKy = objUserSign.Hsm_serial;
            dt.MESSAGE = objUserSign.TenNhanVien + " Đã ký lúc " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            dt.LoaiHThi = "TEXT";
            dt.FileDataSign = byfile;
            //dt.TypeSign = "Text";

            dt.ImageSign = appPlanRepo.imgSignByUserid(username);
            //dt.FileType = "pdf";
            dt.CommentSign = @"test";
            if (loaibienban == 0) // 0  là Biên bản khảo sát
            {
                dt.KeyWord = "((PHIEU_STEP_0))";
            }
            else if (loaibienban == 1)
            {
                dt.KeyWord = "((PHIEU_STEP_0))";
            }


            //dt.NDung_Ky = @"<i> <b>This text is italic </b></i>";
            //dt.DINH_DANG_FILE = "doc";
            var content = new StringContent(JsonConvert.SerializeObject(dt), System.Text.Encoding.UTF8, "application/json");
            var request = new HttpRequestMessage(HttpMethod.Post, uploadServiceBaseAddress)
            {
                Content = content
            };
            var client = new HttpClient();
            HttpResponseMessage response = new HttpResponseMessage(HttpStatusCode.OK);
            string kqSign = "";
            try
            {
                var httpResponseMessage = client.SendAsync(request).Result;

                if (httpResponseMessage.IsSuccessStatusCode)
                {
                    var data_pdf = JsonConvert.DeserializeObject<ResponseDataX>(httpResponseMessage.Content.ReadAsStringAsync().Result);
                    if (data_pdf.Data != null)
                    {
                        kqSign = data_pdf.Data.ToString();
                    }

                }

            }
            catch (Exception ex)
            {

            }

            return kqSign;

        }
        #endregion



        #region Hàm lấy tham số đầu ra của phiếu ký
        private string GetParamSign(int id, int malp, int step)
        {
            DataTable dt = appPlanRepo.GetParamSignPlv(id, malp, step);
            String strParam = "";

            //foreach (DataRow row in dt.Rows)
            //{
            //    strParam = "{\"name\":\"TenDonVi_LCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["TenDonVi_LCT"].ToString())) + "\"},{\"name\":\"PhongBan_PCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBan_PCT"].ToString())) + "\"}" +
            //        ",{\"name\":\"SoPhieu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoPhieu"].ToString())) + "\"}" +
            //        ",{\"name\":\"ThoiGianDuyet\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianDuyet"].ToString())) + "\"}" +
            //        ",{\"name\":\"MaYeuCauCRM\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaYeuCauCRM"].ToString())) + "\"}" +
            //        ",{\"name\":\"NguoiChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChiHuy"].ToString())) + "\"}" +
            //        ",{\"name\":\"BacAT_ChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_ChiHuy"].ToString())) + "\"}" +
            //        ",{\"name\":\"SoNguoiThamGia\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoNguoiThamGia"].ToString())) + "\"}" +
            //        ",{\"name\":\"PhongBanCreatPhien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBanCreatPhien"].ToString())) + "\"}" +
            //        ",{\"name\":\"DiaDiem\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DiaDiem"].ToString())) + "\"}" +
            //        ",{\"name\":\"NoiDung\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NoiDung"].ToString())) + "\"}" +
            //        ",{\"name\":\"DieuKien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DieuKien"].ToString())) + "\"}" +
            //        ",{\"name\":\"ThoiGianBatDau\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianBatDau"].ToString())) + "\"}" +
            //        ",{\"name\":\"MaPCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaPCT"].ToString())) + "\"}" +
            //        ",{\"name\":\"Gio\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Gio"].ToString())) + "\"}" +
            //        ",{\"name\":\"Phut\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Phut"].ToString())) + "\"}" +
            //        ",{\"name\":\"HTML_DanhSachNhanVien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachNhanVien"].ToString())) + "\"}";
            //}
            if (malp == 2)
            {
                foreach (DataRow row in dt.Rows)
                {
                    //if (step == 0 || step == 1)
                    //{
                    strParam = "{\"name\":\"TenDonVi_LCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["TenDonVi_LCT"].ToString())) + "\"}" +
                        ",{\"name\":\"PhongBan_PCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBan_PCT"].ToString())) + "\"}" +
                    ",{\"name\":\"SoPhieu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoPhieu"].ToString())) + "\"}" +
                    ",{\"name\":\"ThoiGianDuyet\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianDuyet"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChiHuy"].ToString())) + "\"}" +
                    ",{\"name\":\"MaYeuCauCRM\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaYeuCauCRM"].ToString())) + "\"}" +

                    ",{\"name\":\"BacAT_ChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_ChiHuy"].ToString())) + "\"}" +
                    ",{\"name\":\"SoNguoiThamGia\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoNguoiThamGia"].ToString())) + "\"}" +
                    ",{\"name\":\"PhongBanCreatPhien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBanCreatPhien"].ToString())) + "\"}" +
                    ",{\"name\":\"DiaDiem\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DiaDiem"].ToString())) + "\"}" +
                    ",{\"name\":\"NoiDung\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NoiDung"].ToString())) + "\"}" +
                    ",{\"name\":\"DieuKien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DieuKien"].ToString())) + "\"}" +
                    ",{\"name\":\"ThoiGianBatDau\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianBatDau"].ToString())) + "\"}" +
                    ",{\"name\":\"MaPCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaPCT"].ToString())) + "\"}" +
                    ",{\"name\":\"Gio\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Gio"].ToString())) + "\"}" +
                    ",{\"name\":\"Phut\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Phut"].ToString())) + "\"}" +
                    ",{\"name\":\"Nguoiralenh\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Nguoiralenh"].ToString())) + "\"}" +

                    ",{\"name\":\"NguoiKy1_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiKy1_Buoc2"].ToString())) + "\"}" +
                    ",{\"name\":\"BacAT_NguoiKy1_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_NguoiKy1_Buoc2"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiKy2_Buoc2"].ToString())) + "\"}" +
                    ",{\"name\":\"BacAT_NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_NguoiKy2_Buoc2"].ToString())) + "\"}" +
                    ",{\"name\":\"DonVi_NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DonVi_NguoiKy2_Buoc2"].ToString())) + "\"}" +
                    ",{\"name\":\"HTML_DanhSachCongViec\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachCongViec"].ToString())) + "\"}" +
                    ",{\"name\":\"ThoiGianKetThuc\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianKetThuc"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiChoPhep\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChoPhep"].ToString())) + "\"}" +
                    ",{\"name\":\"ChucDanh_NguoiChoPhep\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ChucDanh_NguoiChoPhep"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiKy_Buoc3\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiKy_Buoc3"].ToString())) + "\"}" +
                    ",{\"name\":\"TenDonVi_LCT_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["TenDonVi_LCT_A"].ToString())) + "\"}" +
                    ",{\"name\":\"PhongBan_PCT_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBan_PCT_A"].ToString())) + "\"}" +
                    ",{\"name\":\"SoPhieu_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoPhieu_A"].ToString())) + "\"}" +
                    ",{\"name\":\"ThoiGianDuyet_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianDuyet_A"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiChiHuy_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChiHuy_A"].ToString())) + "\"}" +
                    ",{\"name\":\"BacAT_ChiHuy_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_ChiHuy_A"].ToString())) + "\"}" +
                    ",{\"name\":\"SoNguoiThamGia_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoNguoiThamGia_A"].ToString())) + "\"}" +
                    ",{\"name\":\"PhongBanCreatPhien_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBanCreatPhien_A"].ToString())) + "\"}" +
                    ",{\"name\":\"DiaDiem_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DiaDiem_A"].ToString())) + "\"}" +
                    ",{\"name\":\"NoiDung_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NoiDung_A"].ToString())) + "\"}" +
                    ",{\"name\":\"DieuKien_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DieuKien_A"].ToString())) + "\"}" +
                    ",{\"name\":\"ThoiGianBatDau_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianBatDau_A"].ToString())) + "\"}" +
                    ",{\"name\":\"MaPCT_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaPCT_A"].ToString())) + "\"}" +
                    ",{\"name\":\"HTML_DanhSachNhanVien_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachNhanVien_A"].ToString())) + "\"}" +
                    ",{\"name\":\"Gio_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Gio_A"].ToString())) + "\"}" +
                    ",{\"name\":\"Phut_A\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Phut_A"].ToString())) + "\"}" +
                    ",{\"name\":\"HTML_DanhSachNhanVien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachNhanVien"].ToString())) + "\"}";
                    //}
                    //else if (step == 2)
                    //{
                    //    strParam = "{\"name\":\"TenDonVi_LCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["TenDonVi_LCT"].ToString())) + "\"},{\"name\":\"PhongBan_PCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBan_PCT"].ToString())) + "\"}" +
                    //    ",{\"name\":\"SoPhieu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoPhieu"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ThoiGianDuyet\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianDuyet"].ToString())) + "\"}" +
                    //    //",{\"name\":\"MaYeuCauCRM\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaYeuCauCRM"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NguoiChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChiHuy"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_ChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_ChiHuy"].ToString())) + "\"}" +
                    //    ",{\"name\":\"SoNguoiThamGia\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoNguoiThamGia"].ToString())) + "\"}" +
                    //    ",{\"name\":\"PhongBanCreatPhien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBanCreatPhien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DiaDiem\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DiaDiem"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NoiDung\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NoiDung"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DieuKien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DieuKien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ThoiGianBatDau\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianBatDau"].ToString())) + "\"}" +
                    //    ",{\"name\":\"MaPCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaPCT"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Gio\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Gio"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Phut\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Phut"].ToString())) + "\"}" +
                    //    ",{\"name\":\"HTML_DanhSachNhanVien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachNhanVien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Nguoiralenh\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Nguoiralenh"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_NguoiKy1_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_NguoiKy1_Buoc2"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_NguoiKy2_Buoc2"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DonVi_NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DonVi_NguoiKy2_Buoc2"].ToString())) + "\"}"
                    //    ;
                    //}
                    //else if (step == 3)
                    //{
                    //    strParam = "{\"name\":\"TenDonVi_LCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["TenDonVi_LCT"].ToString())) + "\"},{\"name\":\"PhongBan_PCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBan_PCT"].ToString())) + "\"}" +
                    //    ",{\"name\":\"SoPhieu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoPhieu"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ThoiGianDuyet\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianDuyet"].ToString())) + "\"}" +
                    //    //",{\"name\":\"MaYeuCauCRM\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaYeuCauCRM"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NguoiChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChiHuy"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_ChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_ChiHuy"].ToString())) + "\"}" +
                    //    ",{\"name\":\"SoNguoiThamGia\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoNguoiThamGia"].ToString())) + "\"}" +
                    //    ",{\"name\":\"PhongBanCreatPhien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBanCreatPhien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DiaDiem\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DiaDiem"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NoiDung\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NoiDung"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DieuKien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DieuKien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ThoiGianBatDau\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianBatDau"].ToString())) + "\"}" +
                    //    ",{\"name\":\"MaPCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaPCT"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Gio\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Gio"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Phut\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Phut"].ToString())) + "\"}" +
                    //    ",{\"name\":\"HTML_DanhSachNhanVien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachNhanVien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"HTML_DanhSachCongViec\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachCongViec"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Nguoiralenh\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Nguoiralenh"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ThoiGianKetThuc\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianKetThuc"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NguoiChoPhep\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChoPhep"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ChucDanh_NguoiChoPhep\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ChucDanh_NguoiChoPhep"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NguoiKy1_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiKy1_Buoc2"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_NguoiKy1_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_NguoiKy1_Buoc2"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_NguoiKy2_Buoc2"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DonVi_NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DonVi_NguoiKy2_Buoc2"].ToString())) + "\"}"
                    //    ;
                    //}
                    //else if (step == 4)
                    //{
                    //    strParam = "{\"name\":\"TenDonVi_LCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["TenDonVi_LCT"].ToString())) + "\"},{\"name\":\"PhongBan_PCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBan_PCT"].ToString())) + "\"}" +
                    //    ",{\"name\":\"SoPhieu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoPhieu"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ThoiGianDuyet\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianDuyet"].ToString())) + "\"}" +
                    //    //",{\"name\":\"MaYeuCauCRM\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaYeuCauCRM"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NguoiChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChiHuy"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_ChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_ChiHuy"].ToString())) + "\"}" +
                    //    ",{\"name\":\"SoNguoiThamGia\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoNguoiThamGia"].ToString())) + "\"}" +
                    //    ",{\"name\":\"PhongBanCreatPhien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBanCreatPhien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DiaDiem\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DiaDiem"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NoiDung\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NoiDung"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DieuKien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DieuKien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ThoiGianBatDau\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianBatDau"].ToString())) + "\"}" +
                    //    ",{\"name\":\"MaPCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaPCT"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Gio\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Gio"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Phut\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Phut"].ToString())) + "\"}" +
                    //    ",{\"name\":\"HTML_DanhSachNhanVien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachNhanVien"].ToString())) + "\"}" +
                    //    ",{\"name\":\"HTML_DanhSachCongViec\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DanhSachCongViec"].ToString())) + "\"}" +
                    //    ",{\"name\":\"Nguoiralenh\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Nguoiralenh"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ThoiGianKetThuc\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianKetThuc"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NguoiChoPhep\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChoPhep"].ToString())) + "\"}" +
                    //    ",{\"name\":\"ChucDanh_NguoiChoPhep\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ChucDanh_NguoiChoPhep"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_NguoiKy1_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_NguoiKy1_Buoc2"].ToString())) + "\"}" +
                    //    ",{\"name\":\"BacAT_NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_NguoiKy2_Buoc2"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NguoiKy_Buoc3\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiKy_Buoc3"].ToString())) + "\"}" +
                    //    ",{\"name\":\"NguoiKy1_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiKy1_Buoc2"].ToString())) + "\"}" +
                    //    ",{\"name\":\"DonVi_NguoiKy2_Buoc2\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DonVi_NguoiKy2_Buoc2"].ToString())) + "\"}"
                    //    ;
                    //}

                }
            }
            else if (malp == 1)
            {
                foreach (DataRow row in dt.Rows)
                {
                    strParam = "{\"name\":\"TenDonVi_LCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["TenDonVi_LCT"].ToString())) + "\"},{\"name\":\"PhongBan_PCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBan_PCT"].ToString())) + "\"}" +
                    ",{\"name\":\"SoPhieu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoPhieu"].ToString())) + "\"}" +
                    ",{\"name\":\"ThoiGianDuyet\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianDuyet"].ToString())) + "\"}" +
                    ",{\"name\":\"MaYeuCauCRM\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaYeuCauCRM"].ToString())) + "\"}" +
                    ",{\"name\":\"LanhDaoCongViec\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["LanhDaoCongViec"].ToString())) + "\"}" +
                    ",{\"name\":\"BAT_LanhDao\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BAT_LanhDao"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiChiHuy"].ToString())) + "\"}" +
                    ",{\"name\":\"BacAT_ChiHuy\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BacAT_ChiHuy"].ToString())) + "\"}" +
                    ",{\"name\":\"SoNguoiThamGia\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["SoNguoiThamGia"].ToString())) + "\"}" +
                    ",{\"name\":\"PhongBanCreatPhien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhongBanCreatPhien"].ToString())) + "\"}" +
                    ",{\"name\":\"DiaDiem\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DiaDiem"].ToString())) + "\"}" +
                    ",{\"name\":\"NoiDung\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NoiDung"].ToString())) + "\"}" +
                    ",{\"name\":\"BD_Gio\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BD_Gio"].ToString())) + "\"}" +
                    ",{\"name\":\"BD_Phut\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BD_Phut"].ToString())) + "\"}" +
                    ",{\"name\":\"BD_Ngay\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BD_Ngay"].ToString())) + "\"}" +
                    ",{\"name\":\"KT_Gio\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["KT_Gio"].ToString())) + "\"}" +
                    ",{\"name\":\"KT_Phut\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["KT_Phut"].ToString())) + "\"}" +
                    ",{\"name\":\"KT_Ngay\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["KT_Ngay"].ToString())) + "\"}" +
                    ",{\"name\":\"DieuKien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DieuKien"].ToString())) + "\"}" +
                    ",{\"name\":\"DonViLienQuanQLVH\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["DonViLienQuanQLVH"].ToString())) + "\"}" +
                    ",{\"name\":\"GiamSatVien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["GiamSatVien"].ToString())) + "\"}" +
                    ",{\"name\":\"BAT_GiamSat\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BAT_GiamSat"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiCanhGioi\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiCanhGioi"].ToString())) + "\"}" +
                    ",{\"name\":\"BAT_CanhGioi\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BAT_CanhGioi"].ToString())) + "\"}" +
                    ",{\"name\":\"ThoiGianBatDau\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ThoiGianBatDau"].ToString())) + "\"}" +

                    ",{\"name\":\"Nguoi_Ky_B0\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Nguoi_Ky_B0"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiKiemSoat\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiKiemSoat"].ToString())) + "\"}" +
                    ",{\"name\":\"NKS_Chucvu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NKS_Chucvu"].ToString())) + "\"}" +
                    ",{\"name\":\"NKS_BacATD\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NKS_BacATD"].ToString())) + "\"}" +
                    ",{\"name\":\"NKS_DVQLVH\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NKS_DVQLVH"].ToString())) + "\"}" +
                    ",{\"name\":\"NKS_GiayBanGiao\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NKS_GiayBanGiao"].ToString())) + "\"}" +
                    ",{\"name\":\"ChiTietCatDien\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ChiTietCatDien"].ToString())) + "\"}" +
                    ",{\"name\":\"ChiTietNoiDat\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ChiTietNoiDat"].ToString())) + "\"}" +
                    ",{\"name\":\"ChiTietRaoChan\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ChiTietRaoChan"].ToString())) + "\"}" +
                    ",{\"name\":\"ChiTietBienBao\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["ChiTietBienBao"].ToString())) + "\"}" +
                    ",{\"name\":\"PhamViLamViec\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["PhamViLamViec"].ToString())) + "\"}" +
                    ",{\"name\":\"CanhBaoNguyHiem\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["CanhBaoNguyHiem"].ToString())) + "\"}" +
                    ",{\"name\":\"Gio_Ky_Step1\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Gio_Ky_Step1"].ToString())) + "\"}" +
                    ",{\"name\":\"Phut_Ky_Step1\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Phut_Ky_Step1"].ToString())) + "\"}" +
                    ",{\"name\":\"Ngay_Ky_Step1\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Ngay_Ky_Step1"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step11\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step11"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step11_ChucVu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step11_ChucVu"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step12\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step12"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step12_ChucVu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step12_ChucVu"].ToString())) + "\"}" +
                    ",{\"name\":\"Ngay_Ky_Step12\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Ngay_Ky_Step12"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step13\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step13"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step13_ChucVu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step13_ChucVu"].ToString())) + "\"}" +
                    ",{\"name\":\"BienPhapAT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BienPhapAT"].ToString())) + "\"}" +


                    ",{\"name\":\"BienPhapAnToan\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["BienPhapAnToan"].ToString())) + "\"}" +
                    ",{\"name\":\"NoiDatTai\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NoiDatTai"].ToString())) + "\"}" +
                    ",{\"name\":\"AnToanKhac\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["AnToanKhac"].ToString())) + "\"}" +
                    ",{\"name\":\"Hour_Sign_B21\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Hour_Sign_B21"].ToString())) + "\"}" +
                    ",{\"name\":\"Minute_Sign_B21\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Minute_Sign_B21"].ToString())) + "\"}" +
                    ",{\"name\":\"Date_Sign_B21\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Date_Sign_B21"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step22\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step22"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step21\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step21"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step23\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step23"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_Step23_ChucVu\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_Step23_ChucVu"].ToString())) + "\"}" +

                    ",{\"name\":\"HTML_DsNhanVienHTruong\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DsNhanVienHTruong"].ToString())) + "\"}" +
                    ",{\"name\":\"HTML_DsChophepLviec\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["HTML_DsChophepLviec"].ToString())) + "\"}" +
                    ",{\"name\":\"Hour_Sign_B31\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Hour_Sign_B31"].ToString())) + "\"}" +
                    ",{\"name\":\"Minute_Sign_B31\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Minute_Sign_B31"].ToString())) + "\"}" +
                    ",{\"name\":\"Date_Sign_B31\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Date_Sign_B31"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_B31\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_B31"].ToString())) + "\"}" +
                    ",{\"name\":\"User_Sign_B32\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_B32"].ToString())) + "\"}" +
                    ",{\"name\":\"Hour_Sign_B33\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Hour_Sign_B33"].ToString())) + "\"}" +
                    ",{\"name\":\"Minute_Sign_B33\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Minute_Sign_B33"].ToString())) + "\"}" +
                    ",{\"name\":\"Date_Sign_B33\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Date_Sign_B33"].ToString())) + "\"}" +

                    ",{\"name\":\"User_Sign_B33\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_B33"].ToString())) + "\"}" +
                    ",{\"name\":\"Date_Complete\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["Date_Complete"].ToString())) + "\"}" +

                    ",{\"name\":\"User_Sign_B4\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["User_Sign_B4"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiKiemSoat_id\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiKiemSoat_id"].ToString())) + "\"}" +
                    ",{\"name\":\"LanhDaoCongViec_id\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["LanhDaoCongViec_id"].ToString())) + "\"}" +
                    ",{\"name\":\"NguoiGiamSat_id\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["NguoiGiamSat_id"].ToString())) + "\"}" +

                    ",{\"name\":\"MaPCT\"" + ",\"value\":\"" + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(row["MaPCT"].ToString())) + "\"}";

                }
            }


            return strParam;
        }
        #endregion

        #region
        public async Task<string> ConvertHtmlToPdfAsync(string htmlStrBase64)
        {
            string url = System.Configuration.ConfigurationManager.AppSettings["API_CONVERT"].ToString();
            string path = url + "ConvertHtmlToPdf";
            string kt = "";
            string s = "{\r\n  \"bottomMargin\": 0.7,\r\n  \"footerDistance\": 0,\r\n  \"headerDistance\": 0,\r\n  \"html\": \"" + htmlStrBase64 + "\",\r\n  \"leftMargin\": 0.5,\r\n  \"orientation\": 1,\r\n  \"paperSize\": 4,\r\n  \"rightMargin\": 0.2,\r\n  \"topMargin\": 0.7\r\n}";
            using (HttpClient httpClient = new HttpClient())
            {

                var content = new StringContent(s, System.Text.Encoding.UTF8, "application/json");

                var response = httpClient.PostAsync(path, content).Result;

                kt = await response.Content.ReadAsStringAsync().ConfigureAwait(false);

            }
            return kt;
        }

        #endregion

        #region LapLichLamViec
        [HasCredential(MenuCode = "LDSPLV;LLLV")]
        public ActionResult LapLichLamViec(string typeshow = "")
        {
            try
            {
                //ViewBag.TatCaNhanVien = _nhanvien_ser.List();
                ViewBag.WeekId = typeshow;
                ViewBag.ThuocTinhPhienLV = thuocTinhPhienRepository.List().ToList();

                DisposeAll();

                return View();
            }
            catch (Exception)
            {
                throw;
            }

        }

        public ActionResult DanhSachNhanVien(string roles, string option = "")
        {
            List<tblNhanVien> listNhanVien = null;
            try
            {
                if (roles == "")
                {
                    string donviId = null;
                    if (Session["DonViID"] != null)
                    {
                        donviId = Session["DonViID"].ToString();
                    }
                    if (donviId != null)
                    {
                        listNhanVien = _nhanvien_ser.ListByDonViId(donviId).OrderBy(x => x.TenNhanVien).ToList();
                    }

                }
                var role = _roleManager.Roles.Where(x => x.Name == roles).FirstOrDefault();

                List<tblNhanVien> listNhanVienTemp = _kh_ser.ListNhanVienByRoleId(role.Id);
                if (listNhanVienTemp != null && listNhanVienTemp.Count > 0)
                {
                    if (option == "tatca")
                    {
                        listNhanVien = listNhanVienTemp.OrderBy(x => x.TenNhanVien).ToList();
                    }
                    else if (option == "captren")
                    {
                        listNhanVien = listNhanVienTemp.Where(x => !string.IsNullOrEmpty(x.DonViId) && x.DonViId.Length <= 4).OrderBy(x => x.TenNhanVien).ToList();
                    }
                    else
                    {
                        string donviId = null;
                        if (Session["DonViID"] != null)
                        {
                            donviId = Session["DonViID"].ToString();
                        }
                        if (donviId != null)
                        {
                            listNhanVien = listNhanVienTemp.Where(x => x.DonViId == donviId).OrderBy(x => x.TenNhanVien).ToList();
                        }
                        else
                        {
                            listNhanVien = listNhanVienTemp.OrderBy(x => x.TenNhanVien).ToList();
                        }
                        //
                    }
                }
            }
            catch
            {
            }

            DisposeAll();

            return PartialView(listNhanVien);
        }

        public ActionResult DanhSachChuTriGiaoBan(string roles, string option = "")
        {
            List<tblNhanVien> listNhanVien = null;
            try
            {
                if (roles == "")
                {
                    string donviId = null;
                    if (Session["DonViID"] != null)
                    {
                        donviId = Session["DonViID"].ToString();
                    }
                    if (donviId != null)
                    {
                        listNhanVien = _nhanvien_ser.ListByDonViId(donviId).OrderBy(x => x.TenNhanVien).ToList();
                    }

                }
                var role = _roleManager.Roles.Where(x => x.Name == roles).FirstOrDefault();

                List<tblNhanVien> listNhanVienTemp = _kh_ser.ListNhanVienByRoleId(role.Id);
                if (listNhanVienTemp != null && listNhanVienTemp.Count > 0)
                {
                    if (option == "tatca")
                    {
                        listNhanVien = listNhanVienTemp.OrderBy(x => x.TenNhanVien).ToList();
                    }
                    else if (option == "captren")
                    {
                        listNhanVien = listNhanVienTemp.Where(x => !string.IsNullOrEmpty(x.DonViId) && x.DonViId.Length <= 4).OrderBy(x => x.TenNhanVien).ToList();
                    }
                    else
                    {
                        string donviId = null;
                        if (Session["DonViID"] != null)
                        {
                            donviId = Session["DonViID"].ToString();
                        }
                        if (donviId != null)
                        {
                            listNhanVien = listNhanVienTemp.Where(x => x.DonViId == donviId).OrderBy(x => x.TenNhanVien).ToList();
                        }
                        else
                        {
                            listNhanVien = listNhanVienTemp.OrderBy(x => x.TenNhanVien).ToList();
                        }
                    }
                }
            }
            catch
            {
            }

            DisposeAll();

            return PartialView(listNhanVien);
        }
        #endregion

        #region PhienLvPaging
        [HttpGet]
        public ActionResult PhienLvPaging(string type = "")
        {
            List<int> listPhienLVID = null;
            List<PhienLVModel> model = new List<PhienLVModel>();

            string donviId = null;
            try
            {
                donviId = Session["DonViID"].ToString();
            }
            catch { }

            int phongBanID = 0;
            int.TryParse(Session["PhongBanId"].ToString(), out phongBanID);

            if (donviId == null)
            {
                if (User.IsInRole("Leader"))
                {
                    var tempModel = _plviec_ser.GetListPhienLVOneWeek(null, type, "leader", phongBanID.ToString());
                    if (tempModel != null)
                    {
                        //model = tempModel.Where(x => x.PhongBanID == phongBanID).ToList();
                        model = tempModel.ToList();
                        listPhienLVID = tempModel.Select(x => x.Id).ToList();
                    }
                }
                else
                {
                    var tempModel = _plviec_ser.GetListPhienLVOneWeek(null, type, "", phongBanID.ToString());
                    if (tempModel != null)
                    {
                        model = tempModel.ToList();
                        listPhienLVID = tempModel.Select(x => x.Id).ToList();
                    }
                }
            }
            else
            {
                if (User.IsInRole("Leader"))
                {
                    var tempModel = _plviec_ser.GetListPhienLVOneWeek(donviId, type, "leader", phongBanID.ToString());
                    if (tempModel != null)
                    {
                        //model = tempModel.Where(x => x.PhongBanID == phongBanID).ToList();
                        model = tempModel.ToList();
                        listPhienLVID = tempModel.Select(x => x.Id).ToList();
                    }
                }
                else
                {
                    var tempModel = _plviec_ser.GetListPhienLVOneWeek(donviId, type, "", phongBanID.ToString());
                    if (tempModel != null)
                    {
                        model = tempModel.ToList();
                        listPhienLVID = tempModel.Select(x => x.Id).ToList();
                    }
                }
            }

            if (model != null && model.Count > 0)
            {
                ViewBag.PhienLVTong = model.Count;
                ViewBag.PhienLVDaXong = model.Count(x => x.TrangThai == (int)TrangThaiPhienLV.DaXong);
                ViewBag.PhienLVDaDuyet = model.Count(x => x.TrangThai == (int)TrangThaiPhienLV.DaDuyet);
                ViewBag.PhienLVChuaDuyet = model.Count(x => x.TrangThai == (int)TrangThaiPhienLV.VuaTao);
                ViewBag.PhienLVHuyBo = model.Count(x => x.TrangThai == (int)TrangThaiPhienLV.HuyBo);
            }

            PhienLVRepository.AutoAddDataInOneWeek(ref model, type);

            var ListNewsPageSize = new PagedData<PhienLVModel>();
            ListNewsPageSize.RecordsName = "Phiên làm việc";
            if (model != null && model.Count > 0)
            {
                ListNewsPageSize.Data = model;
                ListNewsPageSize.RecordsPerPage = 0;
                ListNewsPageSize.NumberOfPages = 0;
                ListNewsPageSize.CurrentPage = 0;
                ListNewsPageSize.TotalRecords = 0;
                //

                List<int> listMaPhieuLenh = model.Where(x => x.MaPCT != null).Select(y => (int)y.MaPCT).ToList();
                ViewBag.PhieuLenh = _plviec_ser.Context.plv_PhieuCongTac.Where(x => listMaPhieuLenh.Contains(x.ID)).ToList();
            }
            else
            {
                ListNewsPageSize.Data = new List<PhienLVModel>();
                ListNewsPageSize.RecordsPerPage = 0;
                ListNewsPageSize.NumberOfPages = 0;
                ListNewsPageSize.CurrentPage = 0;
                ListNewsPageSize.TotalRecords = 0;

                ViewBag.PhienLVTong = 0;
            }
            ViewBag.TrangThaiPhienLV = _plviec_ser.Context.plv_TrangThaiPhien.AsNoTracking().ToList();
            ViewBag.TinhChatPhienLV = _plviec_ser.Context.plv_ThuocTinhPhien.AsNoTracking().Where(x => x.LoaiThuocTinh == 2).ToList();
            ViewBag.ThuocTinhPhienLV = null;

            if (listPhienLVID != null)
            {
                ViewBag.ThuocTinhPhienLV = _plviec_ser.Context.tblPhienLamViec_ThuocTinh.AsNoTracking().Where(x => listPhienLVID.Contains(x.PhienLamViecId)).ToList();
            }
            ViewBag.ListThuocTinhPhien = _plviec_ser.Context.plv_ThuocTinhPhien.AsNoTracking().ToList();

            DisposeAll();

            return View(ListNewsPageSize);
        }
        #endregion

        #region DetailPhienLv
        [HttpGet]
        public ActionResult DetailPhienLv(int Id)
        {
            try
            {
                // chi tiet phien lam viec
                //PhienLVModel model = new PhienLVModel();
                var model = _plviec_ser.GetById(Id);

                // chi tiet comment
                ViewBag.lstComment = CommentRepository.GetCommentByPienLVId(Id).ToList();

                DisposeAll();

                return View(model);
            }
            catch (Exception)
            {
                DisposeAll();
                throw;
            }

        }
        #endregion

        #region AddComment
        [HttpGet]
        public ActionResult AddComment(int Id)
        {

            tblComment c = new tblComment();
            c.PhienLamViecId = Id;

            DisposeAll();

            return View(c);
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult AddComment(int PhienLamViecId, string CommentContent)
        {
            string kt = "";

            if (string.IsNullOrEmpty(CommentContent))
            {
                DisposeAll();

                return Json("Bạn chưa nhập nhận xét !", JsonRequestBehavior.AllowGet);
            }

            try
            {
                tblPhienLamViec plv = _plviec_ser.GetById(PhienLamViecId);

                tblComment cm = new tblComment();
                cm.PhienLamViecId = PhienLamViecId;
                cm.Priority = 1;
                cm.CommentContent = CommentContent;
                cm.CreateTime = DateTime.Now;
                cm.Username = User.Identity.Name;
                cm.Description = "";

                CommentRepository cmr = new CommentRepository();
                kt = cmr.Comment_Add(cm);

                List<tblImage> lstImg = _plviec_ser.GetImageByPhienLVId(PhienLamViecId, "");
                if (!(plv.IsKiemTra.HasValue && plv.IsKiemTra == true))
                {
                    try
                    {
                        if (lstImg.Count > 0)
                        {
                            foreach (var item in lstImg)
                            {
                                if (item.GroupId > 2)
                                {
                                    string strError = "";
                                    _plviec_ser.UpdateKiemTraPLV(PhienLamViecId, ref strError);
                                    break;
                                }
                            }

                        }

                    }
                    catch (Exception ex)
                    {
                    }
                }
                //if (plv.LanhDaoTrucBan_Id == User.Identity.GetUserId())
                //{

                //}
                ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} đã thêm nhận xét {1} thành công", User.Identity.Name, CommentContent));


            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = "";
                //NLoger.Error("loggerDatabase", string.Format("Lỗi thêm nhận xét. Chi tiết: {0}", ex.Message));
            }
            DisposeAll();

            return Json(kt, JsonRequestBehavior.AllowGet);

        }
        #endregion


        #region Update Hoãn hủy kế hoạch làm việc
        [HttpGet]
        public ActionResult UpdateHoanHuy(int Id)
        {

            tblComment c = new tblComment();
            c.PhienLamViecId = Id;

            DisposeAll();

            return View(c);
        }

        [HttpPost]
        [ValidateInput(true)]
        public async Task<ActionResult> UpdateHoanHuy(plv_KeHoachLichLamViec input)
        {

            if (string.IsNullOrEmpty(input.LyDoHoanHuy))
            {
                DisposeAll();

                return Json(new { success = false, message = "Bạn chưa nhập lý do!" }, JsonRequestBehavior.AllowGet);
            }

            try
            {

                var input_dataKHLLV = new plv_KeHoachLichLamViec
                {
                    PhienLamViecId = input.PhienLamViecId,
                    HinhThucKiemTra = input.HinhThucKiemTra,
                    NguoiDaiDienKT_Id = input.NguoiDaiDienKT_Id,
                    NguoiDaiDienKT = input.NguoiDaiDienKT,
                    TrangThai = 2,
                    LyDoHoanHuy = "NULL"
                };

                int check2 = await _keHoachLichLamViecRepository.Update_TrangThai_Plv_KeHoachLichLamViec((int)input.Id, input.LyDoHoanHuy);
                int check = await _keHoachLichLamViecRepository.AddNew(input_dataKHLLV);

                if (check > 0)
                {
                    DisposeAll();
                    return Json(new { success = true, message = "Cập nhật thành công!" }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    DisposeAll();
                    return Json(new { success = false, message = "Lỗi!" }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                DisposeAll();
                return Json(new { success = false, message = ex }, JsonRequestBehavior.AllowGet);
            }
        }
        [HttpGet]
        public async Task<ActionResult> Delete_KeHoachLLV(int Id)
        {
            try
            {
                int check2 = await _keHoachLichLamViecRepository.Delete_Plv_KeHoachLichLamViec((int)Id);

                if (check2 > 0)
                {
                    DisposeAll();
                    return Json(new { success = true, message = "Xóa thành công!" }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    DisposeAll();
                    return Json(new { success = false, message = "Lỗi!" }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                DisposeAll();
                return Json(new { success = false, message = ex }, JsonRequestBehavior.AllowGet);
            }
        }

        #endregion

        #region DetailHinhAnhPhienLv
        public ActionResult DetailHinhAnhPhienLv(int PhienLvId)
        {

            tblPhienLamViec plv = _plviec_ser.GetById(PhienLvId);
            List<tblImage> lstImg = _plviec_ser.GetImageByPhienLVId(PhienLvId, "");
            //if(User.IsInRole("Master"))
            //{
            //    try
            //    {
            //        string strError = "";
            //        _plviec_ser.UpdateKiemTraPLV(PhienLvId, ref strError);
            //    }
            //    catch (Exception ex)
            //    {                                   
            //    }
            //}



            if (plv.LanhDaoTrucBan_Id == User.Identity.GetUserId())
            {
                if (!(plv.IsKiemTra.HasValue && plv.IsKiemTra == true))
                {
                    try
                    {
                        if (lstImg.Count > 0)
                        {
                            foreach (var item in lstImg)
                            {
                                if (item.GroupId > 2)
                                {
                                    string strError = "";
                                    _plviec_ser.UpdateKiemTraPLV(PhienLvId, ref strError);
                                    break;
                                }
                            }

                        }

                    }
                    catch (Exception ex)
                    {
                    }
                }
            }

            ViewBag.lstImages = lstImg;
            ViewBag.PhienLV = plv;
            ViewBag.PhienLvId = PhienLvId;
            DisposeAll();
            return View();
        }
        #endregion

        #region ImportExcelPLV_KH
        [HttpPost]
        public async Task<ActionResult> ImportExcelPLV_KH(HttpPostedFileBase file, string typeshow = "")
        {
            int tongsophien = 0;
            int sophienthanhcong = 0;
            int sophientrung = 0;
            int sophienloi = 0;
            int sonhanvienthamgia = 0;

            StringBuilder strErrorSum = new StringBuilder();
            StringBuilder strSuccessSum = new StringBuilder();
            StringBuilder strDuplicateSum = new StringBuilder();
            try
            {
                int kt = 0;
                DataSet dsFullTable = new DataSet();
                DataSet ds = new DataSet();

                string donviId = null;
                try
                {
                    donviId = Session["DonViID"].ToString();
                }
                catch { }

                if (Request.Files["file"].ContentLength > 0)
                {
                    string fileExtension = System.IO.Path.GetExtension(Request.Files["file"].FileName);


                    if (fileExtension == ".xlsx" || fileExtension == ".xlsxx")
                    {
                        string strErrExcel = "";
                        this.ReadFileExcel_2(ref ds, out strErrExcel);
                        strErrorSum.Append(strErrExcel);
                    }


                    string strNgayDkCurrent = "";

                    if (ds.Tables[0] != null)
                    {
                        var rowTest = ds.Tables[0].Rows[0];
                        int dem = 8;
                        for (int i = 9; i < ds.Tables[0].Rows.Count; i++)
                        {
                            sonhanvienthamgia = 0;
                            var row = ds.Tables[0].Rows[i];
                            if (!string.IsNullOrEmpty(ds.Tables[0].Rows[i][0].ToString()) && (ds.Tables[0].Rows[i][0].ToString().Trim().ToUpper().IndexOf("THỨ") > -1 || ds.Tables[0].Rows[i][0].ToString().Trim().ToUpper().IndexOf("CHỦ") > -1 || ds.Tables[0].Rows[i][0].ToString().Trim().ToUpper().IndexOf("NGÀY") > -1))
                            {
                                string ngayDky = ds.Tables[0].Rows[i][0].ToString().Trim();
                                strNgayDkCurrent = ngayDky.Substring(ngayDky.LastIndexOf(' ')).Trim();
                            }
                            else if (!string.IsNullOrEmpty(ds.Tables[0].Rows[i][1].ToString()) && !string.IsNullOrEmpty(ds.Tables[0].Rows[i][2].ToString()) && !string.IsNullOrEmpty(ds.Tables[0].Rows[i][3].ToString()) && ds.Tables[0].Rows[i][0].ToString().Trim() != "………….")
                            {
                                tongsophien++;
                                try
                                {
                                    string tenPhongBan = "";
                                    int PhongBanID = PhongBanRepository.GetIdPhongBanByName(ds.Tables[0].Rows[i][2].ToString().Trim(), donviId);
                                    if (PhongBanID != 0)
                                    {
                                        dem++;
                                        tblPhienLamViec plv = new tblPhienLamViec();
                                        try
                                        {
                                            plv.PhongBanID = PhongBanID;

                                            plv.PhongBanIDCreate = int.Parse(Session["PhongBanId"].ToString());


                                            tblPhongBan phongBan = _plviec_ser.Context.tblPhongBans.FirstOrDefault(x => x.Id == plv.PhongBanID);
                                            if (phongBan != null)
                                            {
                                                tenPhongBan = phongBan.TenPhongBan;
                                                plv.DonViId = phongBan.MaDVi;
                                            }
                                            else
                                            {
                                                plv.DonViId = Session["DonViID"].ToString();
                                            }
                                        }
                                        catch //(Exception ex)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Không tìm thấy phòng ban: <b>" + ds.Tables[0].Rows[i][2].ToString().Trim() + "</b>");
                                            continue;
                                        }
                                        try
                                        {
                                            plv.NoiDung = ds.Tables[0].Rows[i][1].ToString().Trim();
                                            if (string.IsNullOrEmpty(plv.NoiDung))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Nội dung không được bỏ trống");
                                                continue;
                                            }
                                            else if (plv.NoiDung.Length > 500)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Nội dung quá dài, yêu cầu < 500 ký tự");
                                                continue;
                                            }
                                        }
                                        catch (Exception)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Nội dung công việc gặp lỗi");
                                            continue;
                                        }

                                        try
                                        {
                                            plv.DiaDiem = ds.Tables[0].Rows[i][3].ToString().Trim();
                                            if (string.IsNullOrEmpty(plv.DiaDiem))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Địa điểm không được bỏ trống");
                                                continue;
                                            }
                                            else if (plv.DiaDiem.Length > 256)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Địa điểm quá dài, yêu cầu < 256 ký tự");
                                                continue;
                                            }
                                        }
                                        catch //(Exception)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Địa điểm gặp lỗi");
                                            continue;
                                        }

                                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[i][11].ToString().Replace("\n", " ").Replace("  ", " ").ToUpper().Trim()))
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Phiếu/Lệnh công tác không được bỏ trống");
                                            continue;
                                        }

                                        try
                                        {
                                            plv.NgayLamViec = new DateTime(int.Parse(strNgayDkCurrent.Split('/')[2]), int.Parse(strNgayDkCurrent.Split('/')[1]), int.Parse(strNgayDkCurrent.Split('/')[0]), 0, 0, 0);
                                        }
                                        catch (Exception)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 1).ToString() + ") Ngày làm việc gặp lỗi");
                                            continue;
                                        }
                                        // var formats = new[] { "%h", "h\\.m" };                                        

                                        try
                                        {
                                            if (string.IsNullOrEmpty(ds.Tables[0].Rows[i][4].ToString()))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thời gian công tác</b> không được bỏ trống");
                                                continue;
                                            }
                                            string[] arrGio = ds.Tables[0].Rows[i][4].ToString().Replace("\n", "").Replace("\t", "").Replace("  ", " ").Trim().Split('-', '–');
                                            string strBD = arrGio[0].Replace("h", ":").Replace("H", ":").Trim();
                                            string strKT = arrGio[1].Replace("h", ":").Replace("H", ":").Trim();
                                            DateTime gioBd = MyString2Timespan(strBD);
                                            DateTime gioKT = new DateTime(1970, 1, 1);
                                            if (strKT.Length > 10)
                                            {
                                                gioKT = MyStringDateTime(strKT);
                                            }
                                            else
                                            {
                                                gioKT = MyString2Timespan(strKT);
                                            }

                                            if (gioBd == null || gioKT == null)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thời gian công tác</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioBd != null)
                                            {
                                                plv.GioBd = new DateTime(plv.NgayLamViec.Year, plv.NgayLamViec.Month, plv.NgayLamViec.Day, gioBd.Hour, gioBd.Minute, 0);
                                            }
                                            else
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ bắt đầu</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioKT != null && gioKT.Year > 1970)
                                            {
                                                if (gioKT.Date < plv.NgayLamViec.Date)
                                                {
                                                    plv.GioKt = new DateTime(plv.NgayLamViec.Year, plv.NgayLamViec.Month, plv.NgayLamViec.Day, gioKT.Hour, gioKT.Minute, 0);
                                                }
                                                else
                                                {
                                                    plv.GioKt = gioKT;
                                                }
                                            }
                                            else
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ kết thúc</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioBd >= gioKT)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ bắt đầu phải < Giờ kết thúc</b>");
                                                continue;
                                            }
                                        }
                                        catch
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thời gian công tác</b> dữ liệu không chính xác");
                                            continue;
                                        }

                                        try
                                        {
                                            plv.NguoiDuyet_SoPa = ds.Tables[0].Rows[i][5].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiChiHuy = ds.Tables[0].Rows[i][6].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.GiamSatVien = ds.Tables[0].Rows[i][7].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiKiemSoat = ds.Tables[0].Rows[i][8].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiKiemTraPhieu = ds.Tables[0].Rows[i][9].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.LanhDaoTrucBan = ds.Tables[0].Rows[i][10].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.LanhDaoCongViec = ds.Tables[0].Rows[i][15].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiCapPhieu = ds.Tables[0].Rows[i][16].ToString().Replace("\n", " ").Replace("  ", " ").Trim();

                                        }
                                        catch
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Người tham gia công việc</b> gặp lỗi");
                                            continue;
                                        }

                                        try
                                        {
                                            plv.NgayTao = DateTime.Now;
                                            plv.NguoiTao = User.Identity.Name;
                                            plv.TT_Phien = (int)TinhChatPhienLV.CongViecKeHoach;
                                            plv.LyDoThayDoi = "";
                                            plv.TrangThai = (int)TrangThaiPhienLV.VuaTao;
                                        }
                                        catch
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") Thiết lập mặc định gặp lỗi");
                                            continue;
                                        }


                                        #region Nhóm người thực hiện
                                        //NguoiDuyet_SoPa
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiDuyet_SoPa))
                                            {
                                                string[] arr_NguoiDuyet_SoPa = plv.NguoiDuyet_SoPa.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiDuyet_SoPa)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiDuyet_SoPa = plv.NguoiDuyet_SoPa.Split('-');
                                                    if (arr_SDT_NguoiDuyet_SoPa != null && arr_SDT_NguoiDuyet_SoPa.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiDuyet_SoPa.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiDuyet_SoPa[0].Trim().ToUpper().Replace("\n", " ").Replace("  ", " ");
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiDuyet_SoPa.ToUpper());
                                                    }

                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiDuyet_SoPa_Id == null)
                                                        {
                                                            plv.NguoiDuyet_SoPa_Id = findNhanVien.Id;
                                                            plv.NguoiDuyet_SoPa = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiDuyet_SoPa_Id = "," + findNhanVien.Id;
                                                            plv.NguoiDuyet_SoPa = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiChiHuy
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiChiHuy))
                                            {
                                                string[] arr_NguoiChiHuy = plv.NguoiChiHuy.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiChiHuy)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiChiHuy = plv.NguoiChiHuy.Split('-');
                                                    if (arr_SDT_NguoiChiHuy != null && arr_SDT_NguoiChiHuy.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiChiHuy.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiChiHuy[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiChiHuy.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiChiHuy_Id == null)
                                                        {
                                                            plv.NguoiChiHuy_Id = findNhanVien.Id;
                                                            plv.NguoiChiHuy = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiChiHuy_Id = "," + findNhanVien.Id;
                                                            plv.NguoiChiHuy = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //GiamSatVien
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.GiamSatVien))
                                            {
                                                string[] arr_GiamSatVien = plv.GiamSatVien.Replace("  ", "").Split(',');
                                                foreach (var item in arr_GiamSatVien)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_GiamSatVien = plv.GiamSatVien.Split('-');
                                                    if (arr_SDT_GiamSatVien != null && arr_SDT_GiamSatVien.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_GiamSatVien.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_GiamSatVien[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.GiamSatVien.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.GiamSatVien_Id == null)
                                                        {
                                                            plv.GiamSatVien_Id = findNhanVien.Id;
                                                            plv.GiamSatVien = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.GiamSatVien_Id = "," + findNhanVien.Id;
                                                            plv.GiamSatVien = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiKiemSoat
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiKiemSoat))
                                            {
                                                string[] arr_NguoiKiemSoat = plv.NguoiKiemSoat.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiKiemSoat)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiKiemSoat = plv.NguoiKiemSoat.Split('-');
                                                    if (arr_SDT_NguoiKiemSoat != null && arr_SDT_NguoiKiemSoat.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiKiemSoat.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiKiemSoat[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiKiemSoat.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiKiemSoat_Id == null)
                                                        {
                                                            plv.NguoiKiemSoat_Id = findNhanVien.Id;
                                                            plv.NguoiKiemSoat = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiKiemSoat_Id = "," + findNhanVien.Id;
                                                            plv.NguoiKiemSoat = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch //(Exception ex)
                                        { }
                                        //NguoiKiemTraPhieu
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiKiemTraPhieu))
                                            {
                                                string[] arr_NguoiKiemTraPhieu = plv.NguoiKiemTraPhieu.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiKiemTraPhieu)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiKiemTraPhieu = plv.NguoiKiemTraPhieu.Split('-');
                                                    if (arr_SDT_NguoiKiemTraPhieu != null && arr_SDT_NguoiKiemTraPhieu.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiKiemTraPhieu.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiKiemTraPhieu[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiKiemTraPhieu.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiKiemTraPhieu_Id == null)
                                                        {
                                                            plv.NguoiKiemTraPhieu_Id = findNhanVien.Id;
                                                            plv.NguoiKiemTraPhieu = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiKiemTraPhieu_Id = "," + findNhanVien.Id;
                                                            plv.NguoiKiemTraPhieu = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //LanhDaoTrucBan
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.LanhDaoTrucBan))
                                            {
                                                string[] arr_LanhDaoTrucBan = plv.LanhDaoTrucBan.Replace("  ", "").Split(',');
                                                foreach (var item in arr_LanhDaoTrucBan)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_LanhDaoTrucBan = plv.LanhDaoTrucBan.Split('-');
                                                    if (arr_SDT_LanhDaoTrucBan != null && arr_SDT_LanhDaoTrucBan.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_LanhDaoTrucBan.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_LanhDaoTrucBan[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.LanhDaoTrucBan.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.LanhDaoTrucBan_Id == null)
                                                        {
                                                            plv.LanhDaoTrucBan_Id = findNhanVien.Id;
                                                            plv.LanhDaoTrucBan = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.LanhDaoTrucBan_Id = "," + findNhanVien.Id;
                                                            plv.LanhDaoTrucBan = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //LanhDaoCongViec
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.LanhDaoCongViec))
                                            {
                                                string[] arr_LanhDaoCongViec = plv.LanhDaoCongViec.Replace("  ", "").Split(',');
                                                foreach (var item in arr_LanhDaoCongViec)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_LanhDaoCongViec = plv.LanhDaoCongViec.Split('-');
                                                    if (arr_SDT_LanhDaoCongViec != null && arr_SDT_LanhDaoCongViec.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_LanhDaoCongViec.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_LanhDaoCongViec[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.LanhDaoCongViec.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.LanhDaoCongViec_Id == null)
                                                        {
                                                            plv.LanhDaoCongViec_Id = findNhanVien.Id;
                                                            plv.LanhDaoCongViec = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.LanhDaoCongViec_Id = "," + findNhanVien.Id;
                                                            plv.LanhDaoCongViec = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiCapPhieu
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiCapPhieu))
                                            {
                                                string[] arr_NguoiCapPhieu = plv.NguoiCapPhieu.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiCapPhieu)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiCapPhieu = plv.NguoiCapPhieu.Split('-');
                                                    if (arr_SDT_NguoiCapPhieu != null && arr_SDT_NguoiCapPhieu.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiCapPhieu.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiCapPhieu[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiCapPhieu.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiCapPhieu_Id == null)
                                                        {
                                                            plv.NguoiCapPhieu_Id = findNhanVien.Id;
                                                            plv.NguoiCapPhieu = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            plv.PhongBanIDCreate = findNhanVien.PhongBanId;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiCapPhieu_Id = "," + findNhanVien.Id;
                                                            plv.NguoiCapPhieu = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            plv.PhongBanIDCreate = findNhanVien.PhongBanId;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }

                                            }
                                        }
                                        catch
                                        { }
                                        #region Kiểm tra hiện trường
                                        // Kiểm tra hiện trường
                                        var HinhThucKiemTra = ds.Tables[0].Rows[i][17].ToString().Replace("\n", " ").Replace("  ", " ").Trim().ToUpper(); ;
                                        var soSanhChuoi = "Kiểm tra giữa giờ".ToUpper();
                                        var HinhThucKiemTra_number = 1;
                                        if (HinhThucKiemTra == soSanhChuoi)
                                        {
                                            HinhThucKiemTra_number = 2;
                                        }
                                        var NguoiDaiDienKT = ds.Tables[0].Rows[i][18].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                        var NguoiDaiDienKT_Id = " ";
                                        if (NguoiDaiDienKT != "" && NguoiDaiDienKT != null && HinhThucKiemTra != "" && HinhThucKiemTra != null)
                                            try
                                            {
                                                if (!string.IsNullOrEmpty(NguoiDaiDienKT))
                                                {
                                                    string[] arr_NguoiDaiDienKT = NguoiDaiDienKT.Replace("  ", "").Split(',');
                                                    foreach (var item in arr_NguoiDaiDienKT)
                                                    {
                                                        tblNhanVien findNhanVien;
                                                        string[] arr_SDT_DaiDienKT = NguoiDaiDienKT.Split('-');
                                                        if (arr_SDT_DaiDienKT != null && arr_SDT_DaiDienKT.Length > 1)
                                                        {
                                                            string key1 = arr_SDT_DaiDienKT.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                            if (findNhanVien == null)
                                                            {
                                                                string key0 = arr_SDT_DaiDienKT[0].Trim().ToUpper();
                                                                findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.GiamSatVien.ToUpper());
                                                        }
                                                        if (findNhanVien != null)
                                                        {
                                                            if (NguoiDaiDienKT_Id == null)
                                                            {
                                                                NguoiDaiDienKT_Id = findNhanVien.Id;
                                                                NguoiDaiDienKT = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            }
                                                            else
                                                            {
                                                                NguoiDaiDienKT_Id = "," + findNhanVien.Id;
                                                                NguoiDaiDienKT = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                            }
                                                            sonhanvienthamgia++;
                                                        }
                                                    }


                                                }
                                            }
                                            catch
                                            { }
                                        #endregion

                                        #endregion
                                        if (_plviec_ser.KiemTraTrung2(plv.NgayLamViec, plv.PhongBanID, plv.DiaDiem, plv.GioBd, plv.NoiDung, null))
                                        {
                                            sophientrung++;
                                            strDuplicateSum.AppendLine("<hr/><b>" + plv.NgayLamViec.ToString("dd/MM/yyyy") + "</b> (dòng " + (i + 2) + ") :<b> " + plv.NoiDung + "</b> <br/>Địa điểm: <b>" + plv.DiaDiem + "</b> <br/>Thời gian: <b>" + string.Format("{0:hh\\:mm}", plv.GioBd) + "</b> tới <b>" + string.Format("{0:hh\\:mm}", plv.GioKt) + "</b> Đơn vị: <b>" + tenPhongBan + "</b>");
                                        }
                                        else
                                        {
                                            kt = _plviec_ser.PhienLamViec_AddNew(plv);
                                            if (kt > 0)
                                            {
                                                #region Gửi notify mobile
                                                var userIds = new List<string>
                                             {
                                             plv.NguoiDuyet_SoPa_Id,
                                             plv.NguoiChiHuy_Id,
                                             plv.GiamSatVien_Id,
                                             plv.NguoiKiemSoat_Id,
                                             plv.NguoiKiemTraPhieu_Id,
                                             plv.LanhDaoTrucBan_Id,
                                             plv.LanhDaoCongViec_Id,
                                             plv.NguoiCapPhieu_Id,
                                             }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList(); // Loại bỏ Id null hoặc rỗng
                                                if (userIds.Any())
                                                {
                                                    var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                                                    foreach (var userId in userIds)
                                                    {
                                                        var requestData = new
                                                        {
                                                            IDConect = "PN",
                                                            userId = userId,
                                                            title = "Thêm mới phiên làm việc",
                                                            name = "NPCIT",
                                                            header = " ",
                                                            subtitle = " ",
                                                            contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Thêm mới phiên làm việc",
                                                        };

                                                        var jsonContent = JsonConvert.SerializeObject(requestData);
                                                        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                                                        using (HttpClient httpClient = new HttpClient())
                                                        {
                                                            var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                                            var response = await httpClient.PostAsync(Api_Notify, content);

                                                            if (response.IsSuccessStatusCode)
                                                            {
                                                                var result = await response.Content.ReadAsStringAsync();
                                                                var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                                                if (!apiResponse.Success)
                                                                {
                                                                    return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var data = response;
                                                                return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);

                                                            }
                                                        }
                                                    }

                                                    //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                                                }
                                                else
                                                {
                                                    //return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                                                }

                                                #endregion

                                                #region Insert_plv_KeHoachLichLamViec
                                                if (HinhThucKiemTra != null)
                                                {
                                                    var input_dataKHLLV = new plv_KeHoachLichLamViec
                                                    {
                                                        PhienLamViecId = kt,
                                                        HinhThucKiemTra = HinhThucKiemTra_number,
                                                        NguoiDaiDienKT_Id = NguoiDaiDienKT_Id,
                                                        NguoiDaiDienKT = NguoiDaiDienKT,
                                                        TrangThai = 1,
                                                        LyDoHoanHuy = "NULL"
                                                    };

                                                    var check = await _keHoachLichLamViecRepository.AddNew(input_dataKHLLV);
                                                }
                                                #endregion

                                                sophienthanhcong++;
                                                strSuccessSum.AppendLine("<hr/><b>" + plv.NgayLamViec.ToString("dd/MM/yyyy") + "</b> (dòng " + (i + 2) + ") : <b>" + plv.NoiDung + "</b> <br/>Địa điểm: <b>" + plv.DiaDiem + " </b><br/>Thời gian: <b>" + string.Format("{0:hh\\:mm}", plv.GioBd) + "</b> tới <b>" + string.Format("{0:hh\\:mm}", plv.GioKt) + "</b> Đơn vị: <b>" + tenPhongBan + "</b> Số người tham gia: <b>" + sonhanvienthamgia + " </b>");
                                                //
                                                int maLenhPhieu = 1;
                                                try
                                                {
                                                    string phieuLenh = ds.Tables[0].Rows[i][11].ToString().Replace("\n", " ").Replace("  ", " ").ToUpper().Trim();
                                                    if (!string.IsNullOrEmpty(phieuLenh) && (phieuLenh.ToUpper().Trim() == ("lct").ToUpper().Trim() || phieuLenh.ToUpper().Trim() == ("Lệnh công tác").ToUpper().Trim()))
                                                    {
                                                        maLenhPhieu = 2;
                                                    }
                                                    //else if (!string.IsNullOrEmpty(phieuLenh) && phieuLenh.ToUpper().Trim() == ("Phiếu công tác").ToUpper().Trim())
                                                    //{
                                                    //    maLenhPhieu = 1;
                                                    //}
                                                }
                                                catch
                                                {
                                                    strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Phiếu/Lệnh công tác</b> gặp lỗi");
                                                }

                                                try
                                                {
                                                    if (maLenhPhieu > 0)
                                                    {
                                                        plv_PhieuCongTac phieuCongTac = new plv_PhieuCongTac();
                                                        phieuCongTac.NoiDung = plv.NoiDung;
                                                        phieuCongTac.MaLP = maLenhPhieu;
                                                        phieuCongTac.MaTT = 1;
                                                        phieuCongTac.DonViId = plv.DonViId;
                                                        phieuCongTac.NgayTao = DateTime.Now;
                                                        phieuCongTac.NguoiTao = User.Identity.Name;
                                                        phieuCongTac.DonViId = plv.DonViId;

                                                        // Sửa bổ sung vào thêm người cấp phiếu
                                                        phieuCongTac.NguoiCapPhieu = plv.NguoiCapPhieu;
                                                        phieuCongTac.NguoiCapPhieu_Id = plv.NguoiCapPhieu_Id;

                                                        _plviec_ser.Context.plv_PhieuCongTac.Add(phieuCongTac);
                                                        _plviec_ser.Context.SaveChanges();

                                                        tblPhienLamViec phienLamViecNew = _plviec_ser.Context.tblPhienLamViecs.FirstOrDefault(x => x.Id == kt);
                                                        phienLamViecNew.MaPCT = phieuCongTac.ID;
                                                        _plviec_ser.Context.SaveChanges();
                                                    }
                                                }
                                                catch
                                                {
                                                    strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Phiếu/Lệnh công tác</b> gặp lỗi");
                                                }


                                                try
                                                {
                                                    string catDien = ds.Tables[0].Rows[i][12].ToString();
                                                    if (!string.IsNullOrEmpty(catDien))
                                                    {
                                                        var catDienObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 3 && x.TenThuocTinh.ToUpper() == catDien.Trim().ToUpper());
                                                        if (catDienObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = catDienObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    string tiepDia = ds.Tables[0].Rows[i][13].ToString();
                                                    if (!string.IsNullOrEmpty(tiepDia))
                                                    {
                                                        var tiepDiaObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 4 && x.TenThuocTinh.ToUpper() == tiepDia.Trim().ToUpper());
                                                        if (tiepDiaObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = tiepDiaObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    string tinhChatPhienLV = ds.Tables[0].Rows[i][14].ToString();
                                                    if (!string.IsNullOrEmpty(tinhChatPhienLV))
                                                    {
                                                        var tinhChatPhienLVObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 5 && x.TenThuocTinh.ToUpper() == tinhChatPhienLV.Trim().ToUpper());
                                                        if (tinhChatPhienLVObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = tinhChatPhienLVObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    _plviec_ser.Context.SaveChanges();
                                                }
                                                catch //(Exception ex)
                                                {
                                                    strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Trạng thái: cắt điện, tiếp địa, tính chất</b> gặp lỗi");
                                                }

                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiDuyet_SoPa_Id, (int)VaiTroPhienLamViec.NguoiDuyet_SoPa);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiChiHuy_Id, (int)VaiTroPhienLamViec.NguoiChiHuy);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.GiamSatVien_Id, (int)VaiTroPhienLamViec.GiamSatVien);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiKiemSoat_Id, (int)VaiTroPhienLamViec.NguoiKiemSoat);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiKiemTraPhieu_Id, (int)VaiTroPhienLamViec.NguoiKiemTraPhieu);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.LanhDaoTrucBan_Id, (int)VaiTroPhienLamViec.LanhDaoTrucBan);

                                                ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                            }
                                            else
                                            {
                                                sophienloi++;
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thêm mới dữ liệu gặp lỗi</b>");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sophienloi++;
                                        strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Không tìm thấy phòng ban: <b>" + ds.Tables[0].Rows[i][2].ToString().Trim() + "</b>");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    DisposeAll();

                                    //ViewBag.ErrorExcel = "File dữ liệu chưa đúng định dạng: " + ex.Message;
                                    this.SetNotification("File dữ liệu chưa đúng định dạng: " + ex.Message, NotificationEnumeration.Error, true);
                                    //NLoger.Error("loggerDatabase", string.Format("Lỗi tạo phiên làm việc. Chi tiết: {0}", ex.Message));
                                    return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
                                    ////NLoger.Error("PhienLamViec", string.Format("Tài khoản {0} thêm phiên làm việc {1} không thành công", User.Identity.Name, ex.Message));
                                }
                            }
                        }
                    }
                    else
                    {
                        this.SetNotification("Không đọc được dữ liệu từ file bạn chọn!" + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                    }
                }
                sophienloi = tongsophien - (sophienthanhcong + sophientrung);
                TempData["TongSoPhien"] = tongsophien;
                TempData["SoPhienThanhCong"] = sophienthanhcong;
                TempData["SoPhienDaTonTai"] = sophientrung;
                TempData["SoPhienLoi"] = sophienloi;
                if (strErrorSum.Length > 0)
                {
                    this.SetNotification("Dòng dữ liệu gặp lỗi: " + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                }
                if (strSuccessSum.Length > 0)
                {
                    this.SetNotification2("Thêm mới thành công: " + strSuccessSum.ToString(), NotificationEnumeration.Success, true);
                }
                if (strDuplicateSum.Length > 0)
                {
                    this.SetNotification3("Công việc đã tồn tại: " + strDuplicateSum.ToString(), NotificationEnumeration.Warning, true);
                }

                DisposeAll();

                return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
            }
            catch (Exception ex)
            {
                DisposeAll();

                this.SetNotification("File dữ liệu chưa đúng định dạng: " + ex.Message + "<br/>" + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
            }
        }

        #endregion

        #region MyString2Timespan
        public static Regex myTimePattern = new Regex(@"^(\d+)(\:(\d+))?$");
        public static DateTime MyString2Timespan(string s)
        {
            if (s == null) throw new ArgumentNullException("s");
            System.Text.RegularExpressions.Match m = myTimePattern.Match(s);
            if (!m.Success) throw new ArgumentOutOfRangeException("s");
            string hh = m.Groups[1].Value;
            string mm = m.Groups[3].Value.PadRight(2, '0');
            int hours = int.Parse(hh);
            int minutes = int.Parse(mm);
            if (minutes < 0 || minutes > 59) throw new ArgumentOutOfRangeException("s");
            DateTime dt = new DateTime(2018, 01, 01);
            TimeSpan value = new TimeSpan(hours, minutes, 0);
            return dt + value;
        }

        public static DateTime MyStringDateTime(string s)
        {
            string[] arr1 = s.Split(' ');
            string[] arr2 = arr1[0].Trim().Split(':');
            string[] arr3 = arr1[1].Trim().Split('/');

            DateTime date = DateTime.ParseExact(arr2[0] + ":" + arr2[1] + " " + ParseDayMonth(arr3[0]) + "/" + ParseDayMonth(arr3[1]) + "/" + arr3[2], "HH:mm dd/MM/yyyy", CultureInfo.InvariantCulture);
            return date;
        }

        public static string ParseDayMonth(string s)
        {
            int val = int.Parse(s);
            if (val < 10)
            {
                return "0" + val;
            }
            else
            {
                return val.ToString();
            }
        }
        #endregion

        #region ImportExcelPLV_BS
        [HttpPost]
        public async Task<ActionResult> ImportExcelPLV_BS(string NgayBoSung, HttpPostedFileBase file, string typeshow = "")
        {
            int tongsophien = 0;
            int sophienthanhcong = 0;
            int sophientrung = 0;
            int sophienloi = 0;

            int sonhanvienthamgia = 0;

            StringBuilder strErrorSum = new StringBuilder();
            StringBuilder strSuccessSum = new StringBuilder();
            StringBuilder strDuplicateSum = new StringBuilder();
            try
            {
                int kt = 0;
                DataSet dsFullTable = new DataSet();
                DataSet ds = new DataSet();

                string donviId = null;
                try
                {
                    donviId = Session["DonViID"].ToString();
                }
                catch { }

                if (Request.Files["file"].ContentLength > 0)
                {
                    int rowerror = -1;
                    string fileExtension =
                                         System.IO.Path.GetExtension(Request.Files["file"].FileName);
                    if (fileExtension == ".xlsx" || fileExtension == ".xlsxx")
                    {
                        string strErrExcel = "";
                        this.ReadFileExcel_2(ref ds, out strErrExcel);
                        strErrorSum.Append(strErrExcel);
                    }

                    DateTime strNgayDkCurrent = DateTime.ParseExact(NgayBoSung, "dd/MM/yyyy", CultureInfo.InvariantCulture); ;

                    if (ds.Tables[0] != null)
                    {
                        int dem = 10;
                        for (int i = 10; i < ds.Tables[0].Rows.Count; i++)
                        {
                            sonhanvienthamgia = 0;
                            rowerror = i;
                            if (!string.IsNullOrEmpty(ds.Tables[0].Rows[i][1].ToString()) && !string.IsNullOrEmpty(ds.Tables[0].Rows[i][2].ToString()) && !string.IsNullOrEmpty(ds.Tables[0].Rows[i][3].ToString()) && ds.Tables[0].Rows[i][0].ToString().Trim() != "………….")
                            {
                                try
                                {
                                    var row = ds.Tables[0].Rows[i];
                                    string tenPhongBan = "";
                                    int PhongBanID = PhongBanRepository.GetIdPhongBanByName(ds.Tables[0].Rows[i][2].ToString().Trim(), donviId);
                                    if (PhongBanID != 0)
                                    {
                                        tongsophien++;
                                        dem++;
                                        tblPhienLamViec plv = new tblPhienLamViec();
                                        try
                                        {
                                            plv.PhongBanID = PhongBanID;

                                            plv.PhongBanIDCreate = int.Parse(Session["PhongBanId"].ToString());

                                            tblPhongBan phongBan = _plviec_ser.Context.tblPhongBans.FirstOrDefault(x => x.Id == plv.PhongBanID);
                                            if (phongBan != null)
                                            {
                                                plv.DonViId = phongBan.MaDVi;
                                                tenPhongBan = phongBan.TenPhongBan;
                                            }
                                            else
                                            {
                                                plv.DonViId = Session["DonViID"].ToString();
                                            }
                                        }
                                        catch //(Exception ex)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Không tìm thấy phòng ban: <b>" + ds.Tables[0].Rows[i][2].ToString().Trim() + "</b>");
                                            continue;
                                        }
                                        try
                                        {
                                            plv.NoiDung = ds.Tables[0].Rows[i][1].ToString().Trim();
                                            if (string.IsNullOrEmpty(plv.NoiDung))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Nội dung không được bỏ trống");
                                                continue;
                                            }
                                            else if (plv.NoiDung.Length > 500)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Nội dung quá dài, yêu cầu < 500 ký tự");
                                                continue;
                                            }
                                        }
                                        catch (Exception)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") <b>Nội dung</b> công việc gặp lỗi");
                                            continue;
                                        }
                                        try
                                        {
                                            plv.DiaDiem = ds.Tables[0].Rows[i][3].ToString().Trim();
                                            if (string.IsNullOrEmpty(plv.DiaDiem))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") <b>Địa điểm</b> không được bỏ trống");
                                                continue;
                                            }
                                            else if (plv.DiaDiem.Length > 256)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") <b>Địa điểm</b> quá dài, yêu cầu < 256 ký tự");
                                                continue;
                                            }

                                        }
                                        catch (Exception)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") <b>Địa điểm</b> gặp lỗi");
                                            continue;
                                        }
                                        plv.NgayLamViec = strNgayDkCurrent;

                                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[i][12].ToString().Replace("\n", " ").Replace("  ", " ").ToUpper().Trim()))
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Phiếu/Lệnh công tác không được bỏ trống");
                                            continue;
                                        }

                                        try
                                        {
                                            if (string.IsNullOrEmpty(ds.Tables[0].Rows[i][4].ToString()))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thời gian công tác</b> không được bỏ trống");
                                                continue;
                                            }
                                            string[] arrGio = ds.Tables[0].Rows[i][4].ToString().Replace("\n", "").Replace("\t", "").Replace("  ", " ").Trim().Split('-', '–');
                                            string strBD = arrGio[0].Replace("h", ":").Replace("H", ":").Trim();
                                            string strKT = arrGio[1].Replace("h", ":").Replace("H", ":").Trim();
                                            DateTime gioBd = MyString2Timespan(strBD);
                                            DateTime gioKT = new DateTime(1970, 1, 1);
                                            if (strKT.Length > 10)
                                            {
                                                gioKT = MyStringDateTime(strKT);
                                            }
                                            else
                                            {
                                                gioKT = MyString2Timespan(strKT);
                                            }

                                            if (gioBd == null || gioKT == null)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thời gian công tác</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioBd != null)
                                            {
                                                plv.GioBd = new DateTime(plv.NgayLamViec.Year, plv.NgayLamViec.Month, plv.NgayLamViec.Day, gioBd.Hour, gioBd.Minute, 0);
                                            }
                                            else
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ bắt đầu</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioKT != null && gioKT.Year > 1970)
                                            {
                                                if (gioKT.Date < plv.NgayLamViec.Date)
                                                {
                                                    plv.GioKt = new DateTime(plv.NgayLamViec.Year, plv.NgayLamViec.Month, plv.NgayLamViec.Day, gioKT.Hour, gioKT.Minute, 0);
                                                }
                                                else
                                                {
                                                    plv.GioKt = gioKT;
                                                }
                                            }
                                            else
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ kết thúc</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioBd >= gioKT)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ bắt đầu phải < Giờ kết thúc</b>");
                                                continue;
                                            }
                                        }
                                        catch
                                        {
                                            strErrorSum.AppendLine("<br/>" + "(Dòng: " + (i + 2).ToString() + ") <b>[" + ds.Tables[0].Rows[i][4].ToString() + "]</b> dữ liệu không chính xác");
                                            break;
                                        }

                                        try
                                        {
                                            plv.NguoiDuyet_SoPa = ds.Tables[0].Rows[i][5].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiChiHuy = ds.Tables[0].Rows[i][6].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.GiamSatVien = ds.Tables[0].Rows[i][7].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiKiemSoat = ds.Tables[0].Rows[i][8].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiKiemTraPhieu = ds.Tables[0].Rows[i][9].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.LanhDaoTrucBan = ds.Tables[0].Rows[i][10].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.LanhDaoCongViec = ds.Tables[0].Rows[i][16].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiCapPhieu = ds.Tables[0].Rows[i][17].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                        }
                                        catch
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Người tham gia công việc</b> gặp lỗi");
                                            continue;
                                        }

                                        #region Nhóm người thực hiện
                                        //NguoiDuyet_SoPa
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiDuyet_SoPa))
                                            {
                                                string[] arr_NguoiDuyet_SoPa = plv.NguoiDuyet_SoPa.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiDuyet_SoPa)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiDuyet_SoPa = plv.NguoiDuyet_SoPa.Split('-');
                                                    if (arr_SDT_NguoiDuyet_SoPa != null && arr_SDT_NguoiDuyet_SoPa.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiDuyet_SoPa.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiDuyet_SoPa[0].Trim().ToUpper().Replace("\n", " ").Replace("  ", " ");
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiDuyet_SoPa.ToUpper());
                                                    }

                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiDuyet_SoPa_Id == null)
                                                        {
                                                            plv.NguoiDuyet_SoPa_Id = findNhanVien.Id;
                                                            plv.NguoiDuyet_SoPa = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiDuyet_SoPa_Id = "," + findNhanVien.Id;
                                                            plv.NguoiDuyet_SoPa = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiChiHuy
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiChiHuy))
                                            {
                                                string[] arr_NguoiChiHuy = plv.NguoiChiHuy.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiChiHuy)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiChiHuy = plv.NguoiChiHuy.Split('-');
                                                    if (arr_SDT_NguoiChiHuy != null && arr_SDT_NguoiChiHuy.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiChiHuy.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiChiHuy[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiChiHuy.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiChiHuy_Id == null)
                                                        {
                                                            plv.NguoiChiHuy_Id = findNhanVien.Id;
                                                            plv.NguoiChiHuy = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiChiHuy_Id = "," + findNhanVien.Id;
                                                            plv.NguoiChiHuy = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //GiamSatVien
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.GiamSatVien))
                                            {
                                                string[] arr_GiamSatVien = plv.GiamSatVien.Replace("  ", "").Split(',');
                                                foreach (var item in arr_GiamSatVien)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_GiamSatVien = plv.GiamSatVien.Split('-');
                                                    if (arr_SDT_GiamSatVien != null && arr_SDT_GiamSatVien.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_GiamSatVien.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_GiamSatVien[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.GiamSatVien.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.GiamSatVien_Id == null)
                                                        {
                                                            plv.GiamSatVien_Id = findNhanVien.Id;
                                                            plv.GiamSatVien = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.GiamSatVien_Id = "," + findNhanVien.Id;
                                                            plv.GiamSatVien = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiKiemSoat
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiKiemSoat))
                                            {
                                                string[] arr_NguoiKiemSoat = plv.NguoiKiemSoat.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiKiemSoat)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiKiemSoat = plv.NguoiKiemSoat.Split('-');
                                                    if (arr_SDT_NguoiKiemSoat != null && arr_SDT_NguoiKiemSoat.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiKiemSoat.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiKiemSoat[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiKiemSoat.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiKiemSoat_Id == null)
                                                        {
                                                            plv.NguoiKiemSoat_Id = findNhanVien.Id;
                                                            plv.NguoiKiemSoat = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiKiemSoat_Id = "," + findNhanVien.Id;
                                                            plv.NguoiKiemSoat = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch //(Exception ex)
                                        { }
                                        //NguoiKiemTraPhieu
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiKiemTraPhieu))
                                            {
                                                string[] arr_NguoiKiemTraPhieu = plv.NguoiKiemTraPhieu.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiKiemTraPhieu)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiKiemTraPhieu = plv.NguoiKiemTraPhieu.Split('-');
                                                    if (arr_SDT_NguoiKiemTraPhieu != null && arr_SDT_NguoiKiemTraPhieu.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiKiemTraPhieu.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiKiemTraPhieu[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiKiemTraPhieu.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiKiemTraPhieu_Id == null)
                                                        {
                                                            plv.NguoiKiemTraPhieu_Id = findNhanVien.Id;
                                                            plv.NguoiKiemTraPhieu = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiKiemTraPhieu_Id = "," + findNhanVien.Id;
                                                            plv.NguoiKiemTraPhieu = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //LanhDaoTrucBan
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.LanhDaoTrucBan))
                                            {
                                                string[] arr_LanhDaoTrucBan = plv.LanhDaoTrucBan.Replace("  ", "").Split(',');
                                                foreach (var item in arr_LanhDaoTrucBan)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_LanhDaoTrucBan = plv.LanhDaoTrucBan.Split('-');
                                                    if (arr_SDT_LanhDaoTrucBan != null && arr_SDT_LanhDaoTrucBan.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_LanhDaoTrucBan.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_LanhDaoTrucBan[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.LanhDaoTrucBan.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.LanhDaoTrucBan_Id == null)
                                                        {
                                                            plv.LanhDaoTrucBan_Id = findNhanVien.Id;
                                                            plv.LanhDaoTrucBan = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.LanhDaoTrucBan_Id = "," + findNhanVien.Id;
                                                            plv.LanhDaoTrucBan = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //LanhDaoCongViec
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.LanhDaoCongViec))
                                            {
                                                string[] arr_LanhDaoCongViec = plv.LanhDaoCongViec.Replace("  ", "").Split(',');
                                                foreach (var item in arr_LanhDaoCongViec)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_LanhDaoCongViec = plv.LanhDaoCongViec.Split('-');
                                                    if (arr_SDT_LanhDaoCongViec != null && arr_SDT_LanhDaoCongViec.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_LanhDaoCongViec.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_LanhDaoCongViec[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.LanhDaoCongViec.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.LanhDaoCongViec_Id == null)
                                                        {
                                                            plv.LanhDaoCongViec_Id = findNhanVien.Id;
                                                            plv.LanhDaoCongViec = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.LanhDaoCongViec_Id = "," + findNhanVien.Id;
                                                            plv.LanhDaoCongViec = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiCapPhieu
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiCapPhieu))
                                            {
                                                string[] arr_NguoiCapPhieu = plv.NguoiCapPhieu.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiCapPhieu)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiCapPhieu = plv.NguoiCapPhieu.Split('-');
                                                    if (arr_SDT_NguoiCapPhieu != null && arr_SDT_NguoiCapPhieu.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiCapPhieu[1].Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiCapPhieu[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiCapPhieu.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiCapPhieu_Id == null)
                                                        {
                                                            plv.NguoiCapPhieu_Id = findNhanVien.Id;
                                                            plv.NguoiCapPhieu = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            plv.PhongBanIDCreate = findNhanVien.PhongBanId;
                                                        }
                                                        else
                                                        {
                                                            plv.NguoiCapPhieu_Id = "," + findNhanVien.Id;
                                                            plv.NguoiCapPhieu = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            plv.PhongBanIDCreate = findNhanVien.PhongBanId;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }

                                        #region Kiểm tra hiện trường
                                        // Kiểm tra hiện trường
                                        var HinhThucKiemTra = ds.Tables[0].Rows[i][18].ToString().Replace("\n", " ").Replace("  ", " ").Trim().ToUpper(); ;
                                        var soSanhChuoi = "Kiểm tra giữa giờ".ToUpper();
                                        var HinhThucKiemTra_number = 1;
                                        if (HinhThucKiemTra == soSanhChuoi)
                                        {
                                            HinhThucKiemTra_number = 2;
                                        }
                                        var NguoiDaiDienKT = ds.Tables[0].Rows[i][19].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                        var NguoiDaiDienKT_Id = " ";
                                        if (NguoiDaiDienKT != "" && NguoiDaiDienKT != null && HinhThucKiemTra != "" && HinhThucKiemTra != null)
                                            try
                                            {
                                                if (!string.IsNullOrEmpty(NguoiDaiDienKT))
                                                {
                                                    string[] arr_NguoiDaiDienKT = NguoiDaiDienKT.Replace("  ", "").Split(',');
                                                    foreach (var item in arr_NguoiDaiDienKT)
                                                    {
                                                        tblNhanVien findNhanVien;
                                                        string[] arr_SDT_DaiDienKT = NguoiDaiDienKT.Split('-');
                                                        if (arr_SDT_DaiDienKT != null && arr_SDT_DaiDienKT.Length > 1)
                                                        {
                                                            string key1 = arr_SDT_DaiDienKT.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                            if (findNhanVien == null)
                                                            {
                                                                string key0 = arr_SDT_DaiDienKT[0].Trim().ToUpper();
                                                                findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.GiamSatVien.ToUpper());
                                                        }
                                                        if (findNhanVien != null)
                                                        {
                                                            if (NguoiDaiDienKT_Id == null)
                                                            {
                                                                NguoiDaiDienKT_Id = findNhanVien.Id;
                                                                NguoiDaiDienKT = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            }
                                                            else
                                                            {
                                                                NguoiDaiDienKT_Id = "," + findNhanVien.Id;
                                                                NguoiDaiDienKT = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                            }
                                                            sonhanvienthamgia++;
                                                        }
                                                    }


                                                }
                                            }
                                            catch
                                            { }
                                        #endregion

                                        #endregion

                                        plv.NgayTao = DateTime.Now;
                                        plv.NguoiTao = User.Identity.Name;
                                        plv.TT_Phien = (int)TinhChatPhienLV.CongViecBoSung;
                                        plv.LyDoThayDoi = ds.Tables[0].Rows[i][11].ToString().Replace("...", "");
                                        //Trạng thái : Vừa tạo, đã duyệt
                                        plv.TrangThai = (int)TrangThaiPhienLV.VuaTao;

                                        if (_plviec_ser.KiemTraTrung2(plv.NgayLamViec, plv.PhongBanID, plv.DiaDiem, plv.GioBd, plv.NoiDung, null))
                                        {
                                            sophientrung++;
                                            strDuplicateSum.AppendLine("<hr/><b>" + plv.NgayLamViec.ToString("dd/MM/yyyy") + "</b> (dòng " + (i + 2) + ") :<b> " + plv.NoiDung + "</b> <br/>Địa điểm: <b>" + plv.DiaDiem + "</b> <br/>Thời gian: <b>" + string.Format("{0:hh\\:mm}", plv.GioBd) + "</b> tới <b>" + string.Format("{0:hh\\:mm}", plv.GioKt) + "</b> Đơn vị: <b>" + tenPhongBan + "</b>");
                                        }
                                        else
                                        {
                                            kt = _plviec_ser.PhienLamViec_AddNew(plv);
                                            if (kt > 0)
                                            {
                                                #region Gửi notify mobile
                                                var userIds = new List<string>
                                             {
                                             plv.NguoiDuyet_SoPa_Id,
                                             plv.NguoiChiHuy_Id,
                                             plv.GiamSatVien_Id,
                                             plv.NguoiKiemSoat_Id,
                                             plv.NguoiKiemTraPhieu_Id,
                                             plv.LanhDaoTrucBan_Id,
                                             plv.LanhDaoCongViec_Id,
                                             plv.NguoiCapPhieu_Id,
                                             }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList(); // Loại bỏ Id null hoặc rỗng
                                                if (userIds.Any())
                                                {
                                                    var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                                                    foreach (var userId in userIds)
                                                    {
                                                        var requestData = new
                                                        {
                                                            IDConect = "PN",
                                                            userId = userId,
                                                            title = "Thêm mới phiên làm việc",
                                                            name = "NPCIT",
                                                            header = " ",
                                                            subtitle = " ",
                                                            contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Thêm mới phiên làm việc",
                                                        };

                                                        var jsonContent = JsonConvert.SerializeObject(requestData);
                                                        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                                                        using (HttpClient httpClient = new HttpClient())
                                                        {
                                                            var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                                            var response = await httpClient.PostAsync(Api_Notify, content);

                                                            if (response.IsSuccessStatusCode)
                                                            {
                                                                var result = await response.Content.ReadAsStringAsync();
                                                                var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                                                if (!apiResponse.Success)
                                                                {
                                                                    return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var data = response;
                                                                return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);

                                                            }
                                                        }
                                                    }

                                                    //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                                                }
                                                else
                                                {
                                                    //return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                                                }

                                                #endregion

                                                #region Insert_plv_KeHoachLichLamViec
                                                if (HinhThucKiemTra != null)
                                                {
                                                    var input_dataKHLLV = new plv_KeHoachLichLamViec
                                                    {
                                                        PhienLamViecId = kt,
                                                        HinhThucKiemTra = HinhThucKiemTra_number,
                                                        NguoiDaiDienKT_Id = NguoiDaiDienKT_Id,
                                                        NguoiDaiDienKT = NguoiDaiDienKT,
                                                        TrangThai = 1,
                                                        LyDoHoanHuy = "NULL"
                                                    };

                                                    var check = await _keHoachLichLamViecRepository.AddNew(input_dataKHLLV);
                                                }
                                                #endregion

                                                sophienthanhcong++;
                                                strSuccessSum.AppendLine("<hr/><b>" + plv.NgayLamViec.ToString("dd/MM/yyyy") + "</b> (dòng " + (i + 2) + ") : <b>" + plv.NoiDung + "</b> <br/>Địa điểm: <b>" + plv.DiaDiem + " </b><br/>Thời gian: <b>" + string.Format("{0:hh\\:mm}", plv.GioBd) + "</b> tới <b>" + string.Format("{0:hh\\:mm}", plv.GioKt) + "</b> Đơn vị: <b>" + tenPhongBan + "</b> Số người tham gia: <b>" + sonhanvienthamgia + " </b>");
                                                //
                                                int maLenhPhieu = 1;
                                                try
                                                {
                                                    string phieuLenh = ds.Tables[0].Rows[i][12].ToString().Replace("\n", " ").Replace("  ", " ").ToUpper().Trim();
                                                    if (!string.IsNullOrEmpty(phieuLenh) && (phieuLenh.ToUpper().Trim() == ("lct").ToUpper().Trim() || phieuLenh.ToUpper().Trim() == ("Lệnh công tác").ToUpper().Trim()))
                                                    {
                                                        maLenhPhieu = 2;
                                                    }
                                                    //else if (!string.IsNullOrEmpty(phieuLenh) && phieuLenh.ToUpper().Trim() == ("Phiếu công tác").ToUpper().Trim())
                                                    //{
                                                    //    maLenhPhieu = 1;
                                                    //}
                                                }
                                                catch
                                                { }

                                                try
                                                {
                                                    if (maLenhPhieu > 0)
                                                    {
                                                        plv_PhieuCongTac phieuCongTac = new plv_PhieuCongTac();
                                                        phieuCongTac.NoiDung = plv.NoiDung;
                                                        phieuCongTac.MaLP = maLenhPhieu;
                                                        phieuCongTac.MaTT = 1;
                                                        phieuCongTac.NgayTao = DateTime.Now;
                                                        phieuCongTac.NguoiTao = User.Identity.Name;
                                                        phieuCongTac.DonViId = plv.DonViId;

                                                        // Sửa bổ sung vào thêm người cấp phiếu
                                                        phieuCongTac.NguoiCapPhieu = plv.NguoiCapPhieu;
                                                        phieuCongTac.NguoiCapPhieu_Id = plv.NguoiCapPhieu_Id;

                                                        _plviec_ser.Context.plv_PhieuCongTac.Add(phieuCongTac);
                                                        _plviec_ser.Context.SaveChanges();

                                                        tblPhienLamViec phienLamViecNew = _plviec_ser.Context.tblPhienLamViecs.FirstOrDefault(x => x.Id == kt);
                                                        phienLamViecNew.MaPCT = phieuCongTac.ID;
                                                        _plviec_ser.Context.SaveChanges();
                                                    }
                                                }
                                                catch
                                                {
                                                    strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Phiếu/Lệnh công tác</b> gặp lỗi");
                                                }
                                                try
                                                {

                                                    string catDien = ds.Tables[0].Rows[i][13].ToString();
                                                    if (!string.IsNullOrEmpty(catDien))
                                                    {
                                                        var catDienObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 3 && x.TenThuocTinh.ToUpper() == catDien.Trim().ToUpper());
                                                        if (catDienObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = catDienObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    string tiepDia = ds.Tables[0].Rows[i][14].ToString();
                                                    if (!string.IsNullOrEmpty(tiepDia))
                                                    {
                                                        var tiepDiaObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 4 && x.TenThuocTinh.ToUpper() == tiepDia.Trim().ToUpper());
                                                        if (tiepDiaObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = tiepDiaObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    string tinhChatPhienLV = ds.Tables[0].Rows[i][15].ToString();
                                                    if (!string.IsNullOrEmpty(tinhChatPhienLV))
                                                    {
                                                        var tinhChatPhienLVObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 5 && x.TenThuocTinh.ToUpper() == tinhChatPhienLV.Trim().ToUpper());
                                                        if (tinhChatPhienLVObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = tinhChatPhienLVObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    _plviec_ser.Context.SaveChanges();
                                                }
                                                catch
                                                {
                                                    strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Trạng thái: cắt điện, tiếp địa, tính chất</b> gặp lỗi");
                                                }

                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiDuyet_SoPa_Id, (int)VaiTroPhienLamViec.NguoiDuyet_SoPa);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiChiHuy_Id, (int)VaiTroPhienLamViec.NguoiChiHuy);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.GiamSatVien_Id, (int)VaiTroPhienLamViec.GiamSatVien);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiKiemSoat_Id, (int)VaiTroPhienLamViec.NguoiKiemSoat);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiKiemTraPhieu_Id, (int)VaiTroPhienLamViec.NguoiKiemTraPhieu);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.LanhDaoTrucBan_Id, (int)VaiTroPhienLamViec.LanhDaoTrucBan);
                                                //
                                                //await CallServiceAPI.SendMsgMobile(User.Identity.GetUserId(), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                                ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                            }
                                            else
                                            {
                                                sophienloi++;
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thêm mới dữ liệu gặp lỗi</b>");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sophienloi++;
                                        strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Không tìm thấy phòng ban: <b>" + ds.Tables[0].Rows[i][2].ToString().Trim() + "</b>");
                                    }

                                }
                                catch (Exception ex)
                                {
                                    DisposeAll();

                                    this.SetNotification("File dữ liệu chưa đúng định dạng: " + ex.Message, NotificationEnumeration.Error, true);
                                    //NLoger.Error("loggerDatabase", string.Format("Lỗi tạo phiên làm việc. Chi tiết: {0}", ex.Message));
                                    return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
                                }
                            }
                        }

                    }
                    else
                    {
                        this.SetNotification("Không đọc được dữ liệu từ file bạn chọn!" + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                    }
                }

                sophienloi = tongsophien - (sophienthanhcong + sophientrung);
                TempData["TongSoPhien"] = tongsophien;
                TempData["SoPhienThanhCong"] = sophienthanhcong;
                TempData["SoPhienDaTonTai"] = sophientrung;
                TempData["SoPhienLoi"] = sophienloi;

                if (strErrorSum.Length > 0)
                {
                    this.SetNotification("Dòng dữ liệu gặp lỗi: " + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                }
                if (strSuccessSum.Length > 0)
                {
                    this.SetNotification2("Thêm mới thành công: " + strSuccessSum.ToString(), NotificationEnumeration.Success, true);
                }
                if (strDuplicateSum.Length > 0)
                {
                    this.SetNotification3("Công việc đã tồn tại: " + strDuplicateSum.ToString(), NotificationEnumeration.Warning, true);
                }

                DisposeAll();

                return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
            }
            catch (Exception ex)
            {
                DisposeAll();

                this.SetNotification("File dữ liệu chưa đúng định dạng: " + ex.Message + "<br/>" + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
            }
        }

        void UpdateNhanVienVaiTroPhienLV(int phienlvID, string arrNhanVien, int vaitro)
        {
            if (phienlvID > 0 && !string.IsNullOrEmpty(arrNhanVien))
            {
                string[] splitEmp = arrNhanVien.Split(',');
                if (splitEmp != null && splitEmp.Length > 0)
                {
                    foreach (var item in splitEmp)
                    {
                        try
                        {
                            var getNhanVien = _nhanvien_ser.GetById(item);
                            if (getNhanVien != null)
                            {
                                tbl_NhanVien_PhienLamViec nhanVienPhienLV = new tbl_NhanVien_PhienLamViec();
                                nhanVienPhienLV.NhanVienId = getNhanVien.Id;
                                nhanVienPhienLV.PhienLamViecId = phienlvID;
                                nhanVienPhienLV.VaiTroPhienLamViecId = vaitro;
                                nhanVienPhienLV.DonViId = getNhanVien.DonViId;
                                nhanVienPhienLV.PhongBanId = getNhanVien.PhongBanId;

                                _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(nhanVienPhienLV);
                                _plviec_ser.Context.SaveChanges();
                            }
                        }
                        catch
                        { }

                    }
                }
            }
        }
        #endregion

        #region ImportExcelPLV_DX

        [HttpPost]
        public async Task<ActionResult> ImportExcelPLV_DX(string NgayDotXuat, HttpPostedFileBase file, string typeshow = "")
        {
            int tongsophien = 0;
            int sophienthanhcong = 0;
            int sophientrung = 0;
            int sophienloi = 0;

            int sonhanvienthamgia = 0;

            StringBuilder strErrorSum = new StringBuilder();
            StringBuilder strSuccessSum = new StringBuilder();
            StringBuilder strDuplicateSum = new StringBuilder();
            try
            {
                int kt = 0;
                DataSet dsFullTable = new DataSet();
                DataSet ds = new DataSet();

                string donviId = null;
                try
                {
                    donviId = Session["DonViID"].ToString();
                }
                catch { }

                if (Request.Files["file"].ContentLength > 0)
                {
                    int rowerror = -1;
                    string fileExtension =
                                         System.IO.Path.GetExtension(Request.Files["file"].FileName);
                    if (fileExtension == ".xlsx" || fileExtension == ".xlsxx")
                    {
                        string strErrExcel = "";
                        this.ReadFileExcel_2(ref ds, out strErrExcel);
                        strErrorSum.Append(strErrExcel);
                    }

                    DateTime strNgayDkCurrent = DateTime.ParseExact(NgayDotXuat, "dd/MM/yyyy", CultureInfo.InvariantCulture); ;

                    if (ds.Tables[0] != null)
                    {
                        int dem = 10;
                        for (int i = 10; i < ds.Tables[0].Rows.Count; i++)
                        {
                            sonhanvienthamgia = 0;
                            rowerror = i;
                            if (!string.IsNullOrEmpty(ds.Tables[0].Rows[i][1].ToString()) && !string.IsNullOrEmpty(ds.Tables[0].Rows[i][2].ToString()) && !string.IsNullOrEmpty(ds.Tables[0].Rows[i][3].ToString()) && ds.Tables[0].Rows[i][0].ToString().Trim() != "………….")
                            {
                                try
                                {
                                    var row = ds.Tables[0].Rows[i];
                                    string tenPhongBan = "";
                                    int PhongBanID = PhongBanRepository.GetIdPhongBanByName(ds.Tables[0].Rows[i][2].ToString().Trim(), donviId);
                                    if (PhongBanID != 0)
                                    {
                                        tongsophien++;
                                        dem++;
                                        tblPhienLamViec plv = new tblPhienLamViec();
                                        try
                                        {
                                            plv.PhongBanID = PhongBanID;

                                            plv.PhongBanIDCreate = int.Parse(Session["PhongBanId"].ToString());

                                            tblPhongBan phongBan = _plviec_ser.Context.tblPhongBans.FirstOrDefault(x => x.Id == plv.PhongBanID);
                                            if (phongBan != null)
                                            {
                                                plv.DonViId = phongBan.MaDVi;
                                                tenPhongBan = phongBan.TenPhongBan;
                                            }
                                            else
                                            {
                                                plv.DonViId = Session["DonViID"].ToString();
                                            }
                                        }
                                        catch //(Exception ex)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Không tìm thấy phòng ban: <b>" + ds.Tables[0].Rows[i][2].ToString().Trim() + "</b>");
                                            continue;
                                        }
                                        try
                                        {
                                            plv.NoiDung = ds.Tables[0].Rows[i][1].ToString().Trim();
                                            if (string.IsNullOrEmpty(plv.NoiDung))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Nội dung không được bỏ trống");
                                                continue;
                                            }
                                            else if (plv.NoiDung.Length > 500)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Nội dung quá dài, yêu cầu < 500 ký tự");
                                                continue;
                                            }
                                        }
                                        catch (Exception)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") <b>Nội dung</b> công việc gặp lỗi");
                                            continue;
                                        }
                                        try
                                        {
                                            plv.DiaDiem = ds.Tables[0].Rows[i][3].ToString().Trim();
                                            if (string.IsNullOrEmpty(plv.DiaDiem))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") <b>Địa điểm</b> không được bỏ trống");
                                                continue;
                                            }
                                            else if (plv.DiaDiem.Length > 256)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") <b>Địa điểm</b> quá dài, yêu cầu < 256 ký tự");
                                                continue;
                                            }

                                        }
                                        catch (Exception)
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") <b>Địa điểm</b> gặp lỗi");
                                            continue;
                                        }
                                        plv.NgayLamViec = strNgayDkCurrent;

                                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[i][12].ToString().Replace("\n", " ").Replace("  ", " ").ToUpper().Trim()))
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Phiếu/Lệnh công tác không được bỏ trống");
                                            continue;
                                        }

                                        try
                                        {
                                            if (string.IsNullOrEmpty(ds.Tables[0].Rows[i][4].ToString()))
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thời gian công tác</b> không được bỏ trống");
                                                continue;
                                            }
                                            string[] arrGio = ds.Tables[0].Rows[i][4].ToString().Replace("\n", "").Replace("\t", "").Replace("  ", " ").Trim().Split('-', '–');
                                            string strBD = arrGio[0].Replace("h", ":").Replace("H", ":").Trim();
                                            string strKT = arrGio[1].Replace("h", ":").Replace("H", ":").Trim();
                                            DateTime gioBd = MyString2Timespan(strBD);
                                            DateTime gioKT = new DateTime(1970, 1, 1);
                                            if (strKT.Length > 10)
                                            {
                                                gioKT = MyStringDateTime(strKT);
                                            }
                                            else
                                            {
                                                gioKT = MyString2Timespan(strKT);
                                            }

                                            if (gioBd == null || gioKT == null)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thời gian công tác</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioBd != null)
                                            {
                                                plv.GioBd = new DateTime(plv.NgayLamViec.Year, plv.NgayLamViec.Month, plv.NgayLamViec.Day, gioBd.Hour, gioBd.Minute, 0);
                                            }
                                            else
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ bắt đầu</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioKT != null && gioKT.Year > 1970)
                                            {
                                                if (gioKT.Date < plv.NgayLamViec.Date)
                                                {
                                                    plv.GioKt = new DateTime(plv.NgayLamViec.Year, plv.NgayLamViec.Month, plv.NgayLamViec.Day, gioKT.Hour, gioKT.Minute, 0);
                                                }
                                                else
                                                {
                                                    plv.GioKt = gioKT;
                                                }
                                            }
                                            else
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ kết thúc</b> dữ liệu không chính xác");
                                                continue;
                                            }

                                            if (gioBd >= gioKT)
                                            {
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Giờ bắt đầu phải < Giờ kết thúc</b>");
                                                continue;
                                            }
                                        }
                                        catch
                                        {
                                            strErrorSum.AppendLine("<br/>" + "(Dòng: " + (i + 2).ToString() + ") <b>[" + ds.Tables[0].Rows[i][4].ToString() + "]</b> dữ liệu không chính xác");
                                            break;
                                        }

                                        try
                                        {
                                            plv.NguoiDuyet_SoPa = ds.Tables[0].Rows[i][5].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiChiHuy = ds.Tables[0].Rows[i][6].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.GiamSatVien = ds.Tables[0].Rows[i][7].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiKiemSoat = ds.Tables[0].Rows[i][8].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiKiemTraPhieu = ds.Tables[0].Rows[i][9].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.LanhDaoTrucBan = ds.Tables[0].Rows[i][10].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.LanhDaoCongViec = ds.Tables[0].Rows[i][16].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                            plv.NguoiCapPhieu = ds.Tables[0].Rows[i][17].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                        }
                                        catch
                                        {
                                            strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Người tham gia công việc</b> gặp lỗi");
                                            continue;
                                        }

                                        #region Nhóm người thực hiện
                                        //NguoiDuyet_SoPa
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiDuyet_SoPa))
                                            {
                                                string[] arr_NguoiDuyet_SoPa = plv.NguoiDuyet_SoPa.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiDuyet_SoPa)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiDuyet_SoPa = plv.NguoiDuyet_SoPa.Split('-');
                                                    if (arr_SDT_NguoiDuyet_SoPa != null && arr_SDT_NguoiDuyet_SoPa.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiDuyet_SoPa.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiDuyet_SoPa[0].Trim().ToUpper().Replace("\n", " ").Replace("  ", " ");
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiDuyet_SoPa.ToUpper());
                                                    }

                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiDuyet_SoPa_Id == null)
                                                        {
                                                            plv.NguoiDuyet_SoPa_Id = findNhanVien.Id;
                                                            plv.NguoiDuyet_SoPa = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiDuyet_SoPa_Id = "," + findNhanVien.Id;
                                                            plv.NguoiDuyet_SoPa = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiChiHuy
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiChiHuy))
                                            {
                                                string[] arr_NguoiChiHuy = plv.NguoiChiHuy.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiChiHuy)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiChiHuy = plv.NguoiChiHuy.Split('-');
                                                    if (arr_SDT_NguoiChiHuy != null && arr_SDT_NguoiChiHuy.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiChiHuy.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiChiHuy[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiChiHuy.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiChiHuy_Id == null)
                                                        {
                                                            plv.NguoiChiHuy_Id = findNhanVien.Id;
                                                            plv.NguoiChiHuy = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiChiHuy_Id = "," + findNhanVien.Id;
                                                            plv.NguoiChiHuy = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //GiamSatVien
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.GiamSatVien))
                                            {
                                                string[] arr_GiamSatVien = plv.GiamSatVien.Replace("  ", "").Split(',');
                                                foreach (var item in arr_GiamSatVien)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_GiamSatVien = plv.GiamSatVien.Split('-');
                                                    if (arr_SDT_GiamSatVien != null && arr_SDT_GiamSatVien.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_GiamSatVien.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_GiamSatVien[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.GiamSatVien.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.GiamSatVien_Id == null)
                                                        {
                                                            plv.GiamSatVien_Id = findNhanVien.Id;
                                                            plv.GiamSatVien = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.GiamSatVien_Id = "," + findNhanVien.Id;
                                                            plv.GiamSatVien = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiKiemSoat
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiKiemSoat))
                                            {
                                                string[] arr_NguoiKiemSoat = plv.NguoiKiemSoat.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiKiemSoat)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiKiemSoat = plv.NguoiKiemSoat.Split('-');
                                                    if (arr_SDT_NguoiKiemSoat != null && arr_SDT_NguoiKiemSoat.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiKiemSoat.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiKiemSoat[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiKiemSoat.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiKiemSoat_Id == null)
                                                        {
                                                            plv.NguoiKiemSoat_Id = findNhanVien.Id;
                                                            plv.NguoiKiemSoat = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiKiemSoat_Id = "," + findNhanVien.Id;
                                                            plv.NguoiKiemSoat = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch //(Exception ex)
                                        { }
                                        //NguoiKiemTraPhieu
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiKiemTraPhieu))
                                            {
                                                string[] arr_NguoiKiemTraPhieu = plv.NguoiKiemTraPhieu.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiKiemTraPhieu)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiKiemTraPhieu = plv.NguoiKiemTraPhieu.Split('-');
                                                    if (arr_SDT_NguoiKiemTraPhieu != null && arr_SDT_NguoiKiemTraPhieu.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiKiemTraPhieu.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiKiemTraPhieu[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiKiemTraPhieu.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiKiemTraPhieu_Id == null)
                                                        {
                                                            plv.NguoiKiemTraPhieu_Id = findNhanVien.Id;
                                                            plv.NguoiKiemTraPhieu = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.NguoiKiemTraPhieu_Id = "," + findNhanVien.Id;
                                                            plv.NguoiKiemTraPhieu = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //LanhDaoTrucBan
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.LanhDaoTrucBan))
                                            {
                                                string[] arr_LanhDaoTrucBan = plv.LanhDaoTrucBan.Replace("  ", "").Split(',');
                                                foreach (var item in arr_LanhDaoTrucBan)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_LanhDaoTrucBan = plv.LanhDaoTrucBan.Split('-');
                                                    if (arr_SDT_LanhDaoTrucBan != null && arr_SDT_LanhDaoTrucBan.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_LanhDaoTrucBan.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_LanhDaoTrucBan[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.LanhDaoTrucBan.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.LanhDaoTrucBan_Id == null)
                                                        {
                                                            plv.LanhDaoTrucBan_Id = findNhanVien.Id;
                                                            plv.LanhDaoTrucBan = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.LanhDaoTrucBan_Id = "," + findNhanVien.Id;
                                                            plv.LanhDaoTrucBan = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //LanhDaoCongViec
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.LanhDaoCongViec))
                                            {
                                                string[] arr_LanhDaoCongViec = plv.LanhDaoCongViec.Replace("  ", "").Split(',');
                                                foreach (var item in arr_LanhDaoCongViec)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_LanhDaoCongViec = plv.LanhDaoCongViec.Split('-');
                                                    if (arr_SDT_LanhDaoCongViec != null && arr_SDT_LanhDaoCongViec.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_LanhDaoCongViec.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_LanhDaoCongViec[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.LanhDaoCongViec.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.LanhDaoCongViec_Id == null)
                                                        {
                                                            plv.LanhDaoCongViec_Id = findNhanVien.Id;
                                                            plv.LanhDaoCongViec = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                        }
                                                        else
                                                        {
                                                            plv.LanhDaoCongViec_Id = "," + findNhanVien.Id;
                                                            plv.LanhDaoCongViec = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        //NguoiCapPhieu
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(plv.NguoiCapPhieu))
                                            {
                                                string[] arr_NguoiCapPhieu = plv.NguoiCapPhieu.Replace("  ", "").Split(',');
                                                foreach (var item in arr_NguoiCapPhieu)
                                                {
                                                    tblNhanVien findNhanVien;
                                                    string[] arr_SDT_NguoiCapPhieu = plv.NguoiCapPhieu.Split('-');
                                                    if (arr_SDT_NguoiCapPhieu != null && arr_SDT_NguoiCapPhieu.Length > 1)
                                                    {
                                                        string key1 = arr_SDT_NguoiCapPhieu.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                        if (findNhanVien == null)
                                                        {
                                                            string key0 = arr_SDT_NguoiCapPhieu[0].Trim().ToUpper();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.NguoiCapPhieu.ToUpper());
                                                    }
                                                    if (findNhanVien != null)
                                                    {
                                                        if (plv.NguoiCapPhieu_Id == null)
                                                        {
                                                            plv.NguoiCapPhieu_Id = findNhanVien.Id;
                                                            plv.NguoiCapPhieu = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            plv.PhongBanIDCreate = findNhanVien.PhongBanId;
                                                        }
                                                        else
                                                        {
                                                            plv.NguoiCapPhieu_Id = "," + findNhanVien.Id;
                                                            plv.NguoiCapPhieu = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            plv.PhongBanIDCreate = findNhanVien.PhongBanId;
                                                        }
                                                        sonhanvienthamgia++;
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        { }
                                        #region Kiểm tra hiện trường
                                        // Kiểm tra hiện trường
                                        var HinhThucKiemTra = ds.Tables[0].Rows[i][18].ToString().Replace("\n", " ").Replace("  ", " ").Trim().ToUpper(); ;
                                        var soSanhChuoi = "Kiểm tra giữa giờ".ToUpper();
                                        var HinhThucKiemTra_number = 1;
                                        if (HinhThucKiemTra == soSanhChuoi)
                                        {
                                            HinhThucKiemTra_number = 2;
                                        }
                                        var NguoiDaiDienKT = ds.Tables[0].Rows[i][19].ToString().Replace("\n", " ").Replace("  ", " ").Trim();
                                        var NguoiDaiDienKT_Id = " ";
                                        if (NguoiDaiDienKT != "" && NguoiDaiDienKT != null && HinhThucKiemTra != "" && HinhThucKiemTra != null)
                                            try
                                            {
                                                if (!string.IsNullOrEmpty(NguoiDaiDienKT))
                                                {
                                                    string[] arr_NguoiDaiDienKT = NguoiDaiDienKT.Replace("  ", "").Split(',');
                                                    foreach (var item in arr_NguoiDaiDienKT)
                                                    {
                                                        tblNhanVien findNhanVien;
                                                        string[] arr_SDT_DaiDienKT = NguoiDaiDienKT.Split('-');
                                                        if (arr_SDT_DaiDienKT != null && arr_SDT_DaiDienKT.Length > 1)
                                                        {
                                                            string key1 = arr_SDT_DaiDienKT.Last().Replace("  ", "").Replace(" ", "").Replace(".", "").Trim();
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.SoDT == key1);
                                                            if (findNhanVien == null)
                                                            {
                                                                string key0 = arr_SDT_DaiDienKT[0].Trim().ToUpper();
                                                                findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == key0);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            findNhanVien = _nhanvien_ser.Context.tblNhanViens.FirstOrDefault(x => x.DonViId == donviId && x.TenNhanVien.ToUpper() == plv.GiamSatVien.ToUpper());
                                                        }
                                                        if (findNhanVien != null)
                                                        {
                                                            if (NguoiDaiDienKT_Id == null)
                                                            {
                                                                NguoiDaiDienKT_Id = findNhanVien.Id;
                                                                NguoiDaiDienKT = findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;

                                                            }
                                                            else
                                                            {
                                                                NguoiDaiDienKT_Id = "," + findNhanVien.Id;
                                                                NguoiDaiDienKT = ", " + findNhanVien.TenNhanVien + " - " + findNhanVien.SoDT;
                                                            }
                                                            sonhanvienthamgia++;
                                                        }
                                                    }


                                                }
                                            }
                                            catch
                                            { }
                                        #endregion
                                        #endregion

                                        plv.NgayTao = DateTime.Now;
                                        plv.NguoiTao = User.Identity.Name;
                                        plv.TT_Phien = (int)TinhChatPhienLV.CongViecDotXuat;
                                        plv.LyDoThayDoi = ds.Tables[0].Rows[i][11].ToString().Replace("...", "");
                                        //Trạng thái : Vừa tạo, đã duyệt
                                        plv.TrangThai = (int)TrangThaiPhienLV.VuaTao;

                                        if (_plviec_ser.KiemTraTrung2(plv.NgayLamViec, plv.PhongBanID, plv.DiaDiem, plv.GioBd, plv.NoiDung, null))
                                        {
                                            sophientrung++;
                                            strDuplicateSum.AppendLine("<hr/><b>" + plv.NgayLamViec.ToString("dd/MM/yyyy") + "</b> (dòng " + (i + 2) + ") :<b> " + plv.NoiDung + "</b> <br/>Địa điểm: <b>" + plv.DiaDiem + "</b> <br/>Thời gian: <b>" + string.Format("{0:hh\\:mm}", plv.GioBd) + "</b> tới <b>" + string.Format("{0:hh\\:mm}", plv.GioKt) + "</b> Đơn vị: <b>" + tenPhongBan + "</b>");
                                        }
                                        else
                                        {
                                            kt = _plviec_ser.PhienLamViec_AddNew(plv);
                                            if (kt > 0)
                                            {
                                                #region Gửi notify mobile
                                                var userIds = new List<string>
                                             {
                                             plv.NguoiDuyet_SoPa_Id,
                                             plv.NguoiChiHuy_Id,
                                             plv.GiamSatVien_Id,
                                             plv.NguoiKiemSoat_Id,
                                             plv.NguoiKiemTraPhieu_Id,
                                             plv.LanhDaoTrucBan_Id,
                                             plv.LanhDaoCongViec_Id,
                                             plv.NguoiCapPhieu_Id,
                                             }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList(); // Loại bỏ Id null hoặc rỗng
                                                if (userIds.Any())
                                                {
                                                    var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                                                    foreach (var userId in userIds)
                                                    {
                                                        var requestData = new
                                                        {
                                                            IDConect = "PN",
                                                            userId = userId,
                                                            title = "Thêm mới phiên làm việc",
                                                            name = "NPCIT",
                                                            header = " ",
                                                            subtitle = " ",
                                                            contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Thêm mới phiên làm việc",
                                                        };

                                                        var jsonContent = JsonConvert.SerializeObject(requestData);
                                                        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                                                        using (HttpClient httpClient = new HttpClient())
                                                        {
                                                            var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                                            var response = await httpClient.PostAsync(Api_Notify, content);

                                                            if (response.IsSuccessStatusCode)
                                                            {
                                                                var result = await response.Content.ReadAsStringAsync();
                                                                var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                                                if (!apiResponse.Success)
                                                                {
                                                                    return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var data = response;
                                                                return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);

                                                            }
                                                        }
                                                    }

                                                    //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                                                }
                                                else
                                                {
                                                    //return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                                                }

                                                #endregion

                                                #region Insert_plv_KeHoachLichLamViec
                                                if (HinhThucKiemTra != null)
                                                {
                                                    var input_dataKHLLV = new plv_KeHoachLichLamViec
                                                    {
                                                        PhienLamViecId = kt,
                                                        HinhThucKiemTra = HinhThucKiemTra_number,
                                                        NguoiDaiDienKT_Id = NguoiDaiDienKT_Id,
                                                        NguoiDaiDienKT = NguoiDaiDienKT,
                                                        TrangThai = 1,
                                                        LyDoHoanHuy = "NULL"
                                                    };

                                                    var check = await _keHoachLichLamViecRepository.AddNew(input_dataKHLLV);
                                                }
                                                #endregion

                                                sophienthanhcong++;
                                                strSuccessSum.AppendLine("<hr/><b>" + plv.NgayLamViec.ToString("dd/MM/yyyy") + "</b> (dòng " + (i + 2) + ") : <b>" + plv.NoiDung + "</b> <br/>Địa điểm: <b>" + plv.DiaDiem + " </b><br/>Thời gian: <b>" + string.Format("{0:hh\\:mm}", plv.GioBd) + "</b> tới <b>" + string.Format("{0:hh\\:mm}", plv.GioKt) + "</b> Đơn vị: <b>" + tenPhongBan + "</b> Số người tham gia: <b>" + sonhanvienthamgia + " </b>");
                                                //
                                                int maLenhPhieu = 1;
                                                try
                                                {
                                                    string phieuLenh = ds.Tables[0].Rows[i][12].ToString().Replace("\n", " ").Replace("  ", " ").ToUpper().Trim();
                                                    if (!string.IsNullOrEmpty(phieuLenh) && (phieuLenh.ToUpper().Trim() == ("lct").ToUpper().Trim() || phieuLenh.ToUpper().Trim() == ("Lệnh công tác").ToUpper().Trim()))
                                                    {
                                                        maLenhPhieu = 2;
                                                    }
                                                    //else if (!string.IsNullOrEmpty(phieuLenh) && phieuLenh.ToUpper().Trim() == ("Phiếu công tác").ToUpper().Trim())
                                                    //{
                                                    //    maLenhPhieu = 1;
                                                    //}
                                                }
                                                catch
                                                { }

                                                try
                                                {
                                                    if (maLenhPhieu > 0)
                                                    {
                                                        plv_PhieuCongTac phieuCongTac = new plv_PhieuCongTac();
                                                        phieuCongTac.NoiDung = plv.NoiDung;
                                                        phieuCongTac.MaLP = maLenhPhieu;
                                                        phieuCongTac.MaTT = 1;
                                                        phieuCongTac.NgayTao = DateTime.Now;
                                                        phieuCongTac.NguoiTao = User.Identity.Name;
                                                        phieuCongTac.DonViId = plv.DonViId;

                                                        // Sửa bổ sung vào thêm người cấp phiếu
                                                        phieuCongTac.NguoiCapPhieu = plv.NguoiCapPhieu;
                                                        phieuCongTac.NguoiCapPhieu_Id = plv.NguoiCapPhieu_Id;

                                                        _plviec_ser.Context.plv_PhieuCongTac.Add(phieuCongTac);
                                                        _plviec_ser.Context.SaveChanges();

                                                        tblPhienLamViec phienLamViecNew = _plviec_ser.Context.tblPhienLamViecs.FirstOrDefault(x => x.Id == kt);
                                                        phienLamViecNew.MaPCT = phieuCongTac.ID;
                                                        _plviec_ser.Context.SaveChanges();
                                                    }
                                                }
                                                catch
                                                {
                                                    strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Phiếu/Lệnh công tác</b> gặp lỗi");
                                                }
                                                try
                                                {

                                                    string catDien = ds.Tables[0].Rows[i][13].ToString();
                                                    if (!string.IsNullOrEmpty(catDien))
                                                    {
                                                        var catDienObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 3 && x.TenThuocTinh.ToUpper() == catDien.Trim().ToUpper());
                                                        if (catDienObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = catDienObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    string tiepDia = ds.Tables[0].Rows[i][14].ToString();
                                                    if (!string.IsNullOrEmpty(tiepDia))
                                                    {
                                                        var tiepDiaObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 4 && x.TenThuocTinh.ToUpper() == tiepDia.Trim().ToUpper());
                                                        if (tiepDiaObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = tiepDiaObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    string tinhChatPhienLV = ds.Tables[0].Rows[i][15].ToString();
                                                    if (!string.IsNullOrEmpty(tinhChatPhienLV))
                                                    {
                                                        var tinhChatPhienLVObj = _plviec_ser.Context.plv_ThuocTinhPhien.FirstOrDefault(x => x.LoaiThuocTinh == 5 && x.TenThuocTinh.ToUpper() == tinhChatPhienLV.Trim().ToUpper());
                                                        if (tinhChatPhienLVObj != null)
                                                        {
                                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                                            phienLV_ThuocTinh.ThuocTinhId = tinhChatPhienLVObj.Id;
                                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                                        }
                                                    }
                                                    _plviec_ser.Context.SaveChanges();
                                                }
                                                catch
                                                {
                                                    strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Trạng thái: cắt điện, tiếp địa, tính chất</b> gặp lỗi");
                                                }

                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiDuyet_SoPa_Id, (int)VaiTroPhienLamViec.NguoiDuyet_SoPa);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiChiHuy_Id, (int)VaiTroPhienLamViec.NguoiChiHuy);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.GiamSatVien_Id, (int)VaiTroPhienLamViec.GiamSatVien);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiKiemSoat_Id, (int)VaiTroPhienLamViec.NguoiKiemSoat);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.NguoiKiemTraPhieu_Id, (int)VaiTroPhienLamViec.NguoiKiemTraPhieu);
                                                UpdateNhanVienVaiTroPhienLV(kt, plv.LanhDaoTrucBan_Id, (int)VaiTroPhienLamViec.LanhDaoTrucBan);
                                                //
                                                //await CallServiceAPI.SendMsgMobile(User.Identity.GetUserId(), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                                ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                            }
                                            else
                                            {
                                                sophienloi++;
                                                strErrorSum.AppendLine("<hr/>" + "(Dòng: " + (i + 2).ToString() + ") <b>Thêm mới dữ liệu gặp lỗi</b>");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sophienloi++;
                                        strErrorSum.AppendLine("<hr/>" + "(Dòng: " + i.ToString() + ") Không tìm thấy phòng ban: <b>" + ds.Tables[0].Rows[i][2].ToString().Trim() + "</b>");
                                    }

                                }
                                catch (Exception ex)
                                {
                                    DisposeAll();
                                    this.SetNotification("File dữ liệu chưa đúng định dạng: " + ex.Message, NotificationEnumeration.Error, true);
                                    //NLoger.Error("loggerDatabase", string.Format("Lỗi tạo phiên làm việc. Chi tiết: {0}", ex.Message));
                                    return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
                                }
                            }
                        }
                    }
                    else
                    {
                        this.SetNotification("Không đọc được dữ liệu từ file bạn chọn!" + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                    }
                }

                sophienloi = tongsophien - (sophienthanhcong + sophientrung);
                TempData["TongSoPhien"] = tongsophien;
                TempData["SoPhienThanhCong"] = sophienthanhcong;
                TempData["SoPhienDaTonTai"] = sophientrung;
                TempData["SoPhienLoi"] = sophienloi;

                if (strErrorSum.Length > 0)
                {
                    this.SetNotification("Dòng dữ liệu gặp lỗi: " + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                }
                if (strSuccessSum.Length > 0)
                {
                    this.SetNotification2("Thêm mới thành công: " + strSuccessSum.ToString(), NotificationEnumeration.Success, true);
                }
                if (strDuplicateSum.Length > 0)
                {
                    this.SetNotification3("Công việc đã tồn tại: " + strDuplicateSum.ToString(), NotificationEnumeration.Warning, true);
                }
                DisposeAll();
                return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
            }
            catch (Exception ex)
            {
                DisposeAll();
                this.SetNotification("File dữ liệu chưa đúng định dạng: " + ex.Message + "<br/>" + strErrorSum.ToString(), NotificationEnumeration.Error, true);
                return RedirectToAction("LapLichLamViec", "PhienLV", new { typeshow = typeshow });
            }
        }

        #endregion

        #region CmbPhongBan
        [HttpGet]
        public ActionResult CmbPhongBan(string DonViId)
        {
            try
            {
                ViewBag.PhongBan = PhongBanRepository.GetPhongBanByDonViIDHtml(DonViId, 0);
                DisposeAll();
                return View();
            }
            catch (Exception ex)
            {
                DisposeAll();
                //NLoger.Error("loggerDatabase", string.Format("Không lấy được danh sách phòng ban", User.Identity.Name, ex.Message));
                return View();
            }

        }
        #endregion

        #region ExportToExcel Báo cáo theo mẫu NPC
        private void ExportExcelFromList(IEnumerable<PhienLVModel> list, int tcphien, string DateFrom, string DateTo)
        {
            try
            {
                string donviId = Session["DonViID"].ToString();
                var donVi = _dvi_ser.GetById(donviId);
                var donViCha = _dvi_ser.List().Where(x => x.Id == donVi.DviCha).FirstOrDefault();

                IWorkbook workbook = new XSSFWorkbook();
                ISheet sheet = workbook.CreateSheet("Report");

                // Thay đổi kích thước từng cột
                sheet.SetColumnWidth(0, 1500);
                sheet.SetColumnWidth(1, 6000);
                sheet.SetColumnWidth(2, 3000);
                sheet.SetColumnWidth(3, 5000);
                sheet.SetColumnWidth(4, 3000);
                sheet.SetColumnWidth(5, 3000);
                sheet.SetColumnWidth(6, 4500);
                sheet.SetColumnWidth(7, 4500);
                sheet.SetColumnWidth(8, 4500);
                sheet.SetColumnWidth(9, 4500);
                sheet.SetColumnWidth(10, 3000);
                sheet.SetColumnWidth(11, 3000);
                sheet.SetColumnWidth(12, 3000);
                sheet.SetColumnWidth(13, 3000);
                //sheet.SetColumnWidth(10, 4500);


                //gop cell
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:D1"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G1:J1"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:D2"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G2:J2"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A3:D3"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G3:J3"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A4:D4"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G4:J4"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A5:D5"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G5:J5"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:J7"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:J8"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A9:J9"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A10:J10"));



                IPrintSetup ps = sheet.PrintSetup;
                ps.Landscape = true;
                ps.PaperSize = (short)PaperSize.A4_Small;
                sheet.FitToPage = true;
                sheet.PrintSetup.FitWidth = 1;


                var rowIndex = 0;

                #region Report

                ICellStyle styleHeader1 = workbook.CreateCellStyle();
                IFont font1 = workbook.CreateFont();
                font1.FontName = "Times New Roman";
                font1.Boldweight = (short)FontBoldWeight.Bold;
                font1.FontHeightInPoints = 13;
                styleHeader1.SetFont(font1);
                styleHeader1.VerticalAlignment = VerticalAlignment.Top;
                styleHeader1.Alignment = HorizontalAlignment.Center;
                styleHeader1.WrapText = true;


                IRow rowTerminal = sheet.CreateRow(rowIndex);

                if (donViCha != null)
                {
                    rowTerminal.CreateCell(0).SetCellValue(donViCha.TenDonVi.ToUpper());
                }
                else
                {
                    rowTerminal.CreateCell(0).SetCellValue("");
                }

                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(6).SetCellValue("CỘNG HOÀ XÃ HỘI CHỦ NGHĨA VIỆT NAM");
                rowTerminal.Cells[1].CellStyle = styleHeader1;


                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue(donVi.TenDonVi.ToUpper());
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(6).SetCellValue("Độc lập – Tự do – Hạnh phúc");
                rowTerminal.Cells[1].CellStyle = styleHeader1;

                //rowIndex++;
                //rowTerminal = sheet.CreateRow(rowIndex);
                //rowTerminal.CreateCell(0).SetCellValue("ĐIỆN LỰC HẢI PHÒNG");
                //rowTerminal.Cells[0].Row.Height = 350;
                //rowTerminal.Cells[0].CellStyle = styleHeader1;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);

                // So van ban
                ICellStyle styleHeader2 = workbook.CreateCellStyle();
                IFont font3 = workbook.CreateFont();
                font3.FontName = "Times New Roman";
                font3.FontHeightInPoints = 13;
                styleHeader2.SetFont(font3);
                styleHeader2.VerticalAlignment = VerticalAlignment.Top;
                styleHeader2.Alignment = HorizontalAlignment.Center;
                styleHeader2.WrapText = true;

                ICellStyle styleHeader3 = workbook.CreateCellStyle();
                IFont font4 = workbook.CreateFont();
                font4.FontName = "Times New Roman";
                font4.FontHeightInPoints = 13;
                font4.IsItalic = true;
                styleHeader3.SetFont(font4);
                styleHeader3.VerticalAlignment = VerticalAlignment.Top;
                styleHeader3.Alignment = HorizontalAlignment.Center;
                styleHeader3.WrapText = true;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                if (donviId == null)
                {
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /PCHP-AT");
                }
                else
                {
                    string tenDvi = _dvi_ser.GetById(donviId).TenDonVi;
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /" + tenDvi + "-AT");
                }

                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader2;
                rowTerminal.CreateCell(6).SetCellValue("..........., ngày " + DateTime.Now.Day + " tháng " + DateTime.Now.Month + " năm " + DateTime.Now.Year + "   ");
                rowTerminal.Cells[1].CellStyle = styleHeader3;

                //Thêm dòng về việc với cấp công ty
                //if (donviId == 1)
                //{
                //    rowIndex++;
                //    rowTerminal = sheet.CreateRow(rowIndex);
                //    rowTerminal.CreateCell(0).SetCellValue("Về việc báo cáo lịch làm việc trên lưới điện");
                //    rowIndex++;
                //    rowTerminal = sheet.CreateRow(rowIndex);
                //    rowTerminal.CreateCell(0).SetCellValue(" tại hiện trường từ ngày " + DateFrom + " năm " + DateTime.Now.Year);
                //}
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue("");
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue("");

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);

                if (donviId == null)
                {
                    // Tiêu đề đơn vị cấp dưới
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("BÁO CÁO LỊCH LÀM VIỆC TRÊN LƯỚI ĐIỆN TUẦN");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;

                    //Ngày tháng
                    ICellStyle styleHeader4 = workbook.CreateCellStyle();
                    IFont font5 = workbook.CreateFont();
                    font5.Boldweight = (short)FontBoldWeight.Bold;
                    font5.FontName = "Times New Roman";
                    font5.FontHeightInPoints = 13;
                    font5.IsItalic = true;
                    styleHeader4.SetFont(font5);
                    styleHeader4.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader4.Alignment = HorizontalAlignment.Center;
                    styleHeader4.WrapText = true;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Từ ngày " + DateFrom + " đến ngày " + DateTo);
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader4;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader4;
                    //rowIndex++;
                    //rowTerminal = sheet.CreateRow(rowIndex);
                }
                else
                {
                    // Tiêu đề đơn vị cấp dưới
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("BÁO CÁO LỊCH LÀM VIỆC TRÊN LƯỚI ĐIỆN TUẦN");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;

                    //Ngày tháng
                    ICellStyle styleHeader4 = workbook.CreateCellStyle();
                    IFont font5 = workbook.CreateFont();
                    font5.Boldweight = (short)FontBoldWeight.Bold;
                    font5.FontName = "Times New Roman";
                    font5.FontHeightInPoints = 13;
                    font5.IsItalic = true;
                    styleHeader4.SetFont(font5);
                    styleHeader4.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader4.Alignment = HorizontalAlignment.Center;
                    styleHeader4.WrapText = true;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Từ ngày " + DateFrom + " đến ngày " + DateTo);
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader4;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Kính gửi: Phòng An toàn");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader4;
                    //rowIndex++;
                    //rowTerminal = sheet.CreateRow(rowIndex);
                }


                // Header
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);


                ICellStyle styleHeader = workbook.CreateCellStyle();
                IFont font = workbook.CreateFont();
                font.FontName = "Times New Roman";
                font.Boldweight = (short)FontBoldWeight.Bold;
                font.FontHeightInPoints = 11;
                styleHeader.SetFont(font);
                styleHeader.VerticalAlignment = VerticalAlignment.Top;
                styleHeader.Alignment = HorizontalAlignment.Center;
                styleHeader.WrapText = true;
                styleHeader.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;



                rowTerminal.CreateCell(0).SetCellValue("Công việc");
                rowTerminal.Cells[0].Row.Height = 2000;
                rowTerminal.Cells[0].CellStyle = styleHeader;

                rowTerminal.CreateCell(1).SetCellValue("Nội dung công việc");
                rowTerminal.Cells[1].CellStyle = styleHeader;

                rowTerminal.CreateCell(2).SetCellValue("Đơn vị làm công việc");
                rowTerminal.Cells[2].CellStyle = styleHeader;

                rowTerminal.CreateCell(3).SetCellValue("Địa điểm (vị trí) công tác");
                rowTerminal.Cells[3].CellStyle = styleHeader;

                rowTerminal.CreateCell(4).SetCellValue("Thời gian công tác");
                rowTerminal.Cells[4].CellStyle = styleHeader;

                rowTerminal.CreateCell(5).SetCellValue("Ngày thực hiện");
                rowTerminal.Cells[5].CellStyle = styleHeader;

                rowTerminal.CreateCell(6).SetCellValue("Người duyệt phương án");
                rowTerminal.Cells[6].CellStyle = styleHeader;

                rowTerminal.CreateCell(7).SetCellValue("Người chỉ huy trực tiếp (số điện thoại DD)");
                rowTerminal.Cells[7].CellStyle = styleHeader;

                rowTerminal.CreateCell(8).SetCellValue("Người giám sát ATĐ (chức danh- số điện thoại DD)");
                rowTerminal.Cells[8].CellStyle = styleHeader;

                rowTerminal.CreateCell(9).SetCellValue("Lãnh đạo đơn vị trực ban kiểm soát (số điện thoại DD)");
                rowTerminal.Cells[9].CellStyle = styleHeader;

                rowTerminal.CreateCell(10).SetCellValue("Phiếu/ Lệnh công tác");
                rowTerminal.Cells[10].CellStyle = styleHeader;

                rowTerminal.CreateCell(11).SetCellValue("Trạng thái cắt điện");
                rowTerminal.Cells[11].CellStyle = styleHeader;

                rowTerminal.CreateCell(12).SetCellValue("Trạng thái tiếp địa");
                rowTerminal.Cells[12].CellStyle = styleHeader;

                rowTerminal.CreateCell(13).SetCellValue("Tính chất phiên lv");
                rowTerminal.Cells[13].CellStyle = styleHeader;

                rowTerminal.CreateCell(14).SetCellValue("Loại phiếu");
                rowTerminal.Cells[14].CellStyle = styleHeader;

                rowTerminal.CreateCell(15).SetCellValue("Lãnh đạo đơn vị kiểm tra kiểm soát");
                rowTerminal.Cells[15].CellStyle = styleHeader;

                rowTerminal.CreateCell(16).SetCellValue("Ngày kết thúc");
                rowTerminal.Cells[16].CellStyle = styleHeader;

                rowTerminal.CreateCell(17).SetCellValue("Người kết thúc");
                rowTerminal.Cells[17].CellStyle = styleHeader;

                rowTerminal.CreateCell(18).SetCellValue("Tổng (" + list.Count() + ")");
                rowTerminal.Cells[18].CellStyle = styleHeader;

                rowTerminal.CreateCell(19).SetCellValue("Số phiếu/lệnh");
                rowTerminal.Cells[19].CellStyle = styleHeader;


                rowIndex++;
                ICellStyle style2 = workbook.CreateCellStyle();
                style2.VerticalAlignment = VerticalAlignment.Top;
                style2.Alignment = HorizontalAlignment.Center;
                style2.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                IFont fontr2 = workbook.CreateFont();
                fontr2.FontName = "Times New Roman";
                fontr2.FontHeightInPoints = 11;
                fontr2.IsItalic = true;
                style2.SetFont(fontr2);

                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue("1");
                rowTerminal.Cells[0].CellStyle = style2;

                rowTerminal.CreateCell(1).SetCellValue("2");
                rowTerminal.Cells[1].CellStyle = style2;

                rowTerminal.CreateCell(2).SetCellValue("3");
                rowTerminal.Cells[2].CellStyle = style2;

                rowTerminal.CreateCell(3).SetCellValue("4");
                rowTerminal.Cells[3].CellStyle = style2;

                rowTerminal.CreateCell(4).SetCellValue("5");
                rowTerminal.Cells[4].CellStyle = style2;

                rowTerminal.CreateCell(5).SetCellValue("6");
                rowTerminal.Cells[5].CellStyle = style2;

                rowTerminal.CreateCell(6).SetCellValue("7");
                rowTerminal.Cells[6].CellStyle = style2;

                rowTerminal.CreateCell(7).SetCellValue("8");
                rowTerminal.Cells[7].CellStyle = style2;

                rowTerminal.CreateCell(8).SetCellValue("9");
                rowTerminal.Cells[8].CellStyle = style2;

                rowTerminal.CreateCell(9).SetCellValue("10");
                rowTerminal.Cells[9].CellStyle = style2;

                rowTerminal.CreateCell(10).SetCellValue("11");
                rowTerminal.Cells[10].CellStyle = style2;

                rowTerminal.CreateCell(11).SetCellValue("12");
                rowTerminal.Cells[11].CellStyle = style2;

                rowTerminal.CreateCell(12).SetCellValue("13");
                rowTerminal.Cells[12].CellStyle = style2;

                rowTerminal.CreateCell(13).SetCellValue("14");
                rowTerminal.Cells[13].CellStyle = style2;

                rowTerminal.CreateCell(14).SetCellValue("15");
                rowTerminal.Cells[14].CellStyle = style2;

                rowTerminal.CreateCell(15).SetCellValue("16");
                rowTerminal.Cells[15].CellStyle = style2;

                rowTerminal.CreateCell(16).SetCellValue("17");
                rowTerminal.Cells[16].CellStyle = style2;

                rowTerminal.CreateCell(17).SetCellValue("18");
                rowTerminal.Cells[17].CellStyle = style2;

                rowTerminal.CreateCell(18).SetCellValue("19");
                rowTerminal.Cells[18].CellStyle = style2;

                rowTerminal.CreateCell(19).SetCellValue("20");
                rowTerminal.Cells[19].CellStyle = style2;

                rowIndex++;
                int i = 0, j = 0;

                ICellStyle stylerow = workbook.CreateCellStyle();
                IFont fontr = workbook.CreateFont();
                fontr.FontName = "Times New Roman";
                fontr.FontHeightInPoints = 11;

                stylerow.SetFont(fontr);
                stylerow.VerticalAlignment = VerticalAlignment.Top;
                stylerow.Alignment = HorizontalAlignment.Center;
                stylerow.WrapText = true;
                stylerow.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                ICellStyle styleFoote4 = workbook.CreateCellStyle();
                IFont fontF4 = workbook.CreateFont();
                fontF4.FontName = "Times New Roman";
                fontF4.Boldweight = (short)FontBoldWeight.Bold;
                fontF4.FontHeightInPoints = 12;
                styleFoote4.SetFont(fontF4);
                styleFoote4.VerticalAlignment = VerticalAlignment.Top;
                styleFoote4.Alignment = HorizontalAlignment.Left;
                styleFoote4.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.WrapText = true;

                //Footer
                ICellStyle styleFooter1 = workbook.CreateCellStyle();
                IFont fontF1 = workbook.CreateFont();
                fontF1.FontName = "Times New Roman";
                fontF1.Boldweight = (short)FontBoldWeight.Bold;
                fontF1.FontHeightInPoints = 12;
                styleFooter1.SetFont(fontF1);
                styleFooter1.VerticalAlignment = VerticalAlignment.Top;
                styleFooter1.Alignment = HorizontalAlignment.Center;
                styleFooter1.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.WrapText = true;

                var lstDonVi = _dvi_ser.ListByParentId(" ");
                //Lay toan bo danh sach phien lam viec
                // Add data rows
                var lstTempPLviec = list.ToList();
                if (donviId == null)
                {
                    foreach (var item in lstDonVi)
                    {
                        var listTenDvi = list.Select(x => x.TenDonVi).ToList();
                        if (!listTenDvi.Contains(item.TenDonVi))
                        {
                            lstTempPLviec.Add(new PhienLVModel
                            {
                                Id = 0,
                                TenDonVi = item.TenDonVi,
                                DiaDiem = "",
                                TenPhongBan = "",
                                GiamSatVien = "",
                                LanhDaoTrucBan = "",
                                NgayDuyet = DateTime.Now,
                                GioBd = DateTime.Now,
                                GioKt = DateTime.Now,
                                PhongBanID = 0,
                                LyDoThayDoi = "",
                                NgayLamViec = DateTime.Now,
                                NgaySua = DateTime.Now,
                                NgayTao = DateTime.Now,
                                NoiDung = "",
                                ViTri = item.ViTri.Value,
                                SDT = item.SDT
                            });
                        }

                    }
                }

                //foreach (var group in list.GroupBy(x => x.TenDonVi))               
                foreach (var group in lstTempPLviec.OrderBy(p => p.ViTri).GroupBy(x => x.TenDonVi))
                {
                    var sdt = group.FirstOrDefault() != null ? group.FirstOrDefault().SDT : "";

                    j++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue(_plviec_ser.ConvertSoSangLaMa(j));
                    rowTerminal.Cells[0].Row.Height = 350;
                    if (!String.IsNullOrEmpty(sdt))
                    {
                        rowTerminal.CreateCell(1).SetCellValue(group.Key + ": " + sdt);
                    }
                    else
                    {
                        rowTerminal.CreateCell(1).SetCellValue(group.Key);
                    }

                    rowTerminal.Cells[0].CellStyle = styleFooter1;
                    rowTerminal.Cells[1].CellStyle = styleFoote4;

                    rowTerminal.CreateCell(2).SetCellValue("");
                    rowTerminal.Cells[2].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(3).SetCellValue("");
                    rowTerminal.Cells[3].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(4).SetCellValue("");
                    rowTerminal.Cells[4].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(5).SetCellValue("");
                    rowTerminal.Cells[5].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(6).SetCellValue("");
                    rowTerminal.Cells[6].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(7).SetCellValue("");
                    rowTerminal.Cells[7].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(8).SetCellValue("");
                    rowTerminal.Cells[8].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(9).SetCellValue("");
                    rowTerminal.Cells[9].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(10).SetCellValue("");
                    rowTerminal.Cells[10].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(11).SetCellValue("");
                    rowTerminal.Cells[11].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(12).SetCellValue("");
                    rowTerminal.Cells[12].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(13).SetCellValue("");
                    rowTerminal.Cells[13].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(14).SetCellValue("");
                    rowTerminal.Cells[14].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(15).SetCellValue("");
                    rowTerminal.Cells[15].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(16).SetCellValue("");
                    rowTerminal.Cells[16].CellStyle = styleFooter1;
                    rowTerminal.CreateCell(17).SetCellValue("");
                    rowTerminal.Cells[17].CellStyle = styleFooter1;
                    if (group.Count() == 1 && string.IsNullOrEmpty(group.FirstOrDefault().DiaDiem))
                    {
                        rowTerminal.CreateCell(18).SetCellValue("0");
                        rowTerminal.Cells[18].CellStyle = styleHeader;
                    }
                    else
                    {
                        rowTerminal.CreateCell(18).SetCellValue(group.Count());
                        rowTerminal.Cells[18].CellStyle = styleHeader;
                    }
                    rowTerminal.CreateCell(19).SetCellValue("");
                    rowTerminal.Cells[19].CellStyle = styleFooter1;
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 19));



                    rowIndex++;


                    foreach (var item in group)
                    {
                        if (!string.IsNullOrEmpty(item.NoiDung))
                        {
                            i++;

                            var phieu = _pcongtac_ser.GetById(item.MaPCT);
                            var thuocTinhList = phienLamViecThuocTinhPhienRepository.GetByPhienLamViecId(item.Id);

                            plv_ThuocTinhPhien catDien = null;
                            plv_ThuocTinhPhien tiepDia = null;
                            plv_ThuocTinhPhien tinhChat = null;

                            foreach (var thuocTinhItem in thuocTinhList)
                            {
                                try
                                {
                                    if (catDien == null)
                                    {
                                        catDien = thuocTinhPhienRepository.GetByLoaiThuocTinh(3).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                    }
                                }
                                catch (Exception ex)
                                {
                                    catDien = null;
                                }

                                try
                                {
                                    if (tinhChat == null)
                                    {
                                        tinhChat = thuocTinhPhienRepository.GetByLoaiThuocTinh(5).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                    }
                                }
                                catch (Exception ex)
                                {
                                    tinhChat = null;
                                }

                                try
                                {
                                    if (tiepDia == null)
                                    {
                                        tiepDia = thuocTinhPhienRepository.GetByLoaiThuocTinh(4).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                    }
                                }
                                catch (Exception ex)
                                {
                                    tiepDia = null;
                                }
                            }

                            rowTerminal = sheet.CreateRow(rowIndex);

                            rowTerminal.CreateCell(0).SetCellValue(i);
                            rowTerminal.Cells[0].CellStyle = stylerow;

                            rowTerminal.CreateCell(1).SetCellValue(item.NoiDung);
                            rowTerminal.Cells[1].CellStyle = stylerow;

                            rowTerminal.CreateCell(2).SetCellValue(item.TenPhongBan);
                            rowTerminal.Cells[2].CellStyle = stylerow;

                            rowTerminal.CreateCell(3).SetCellValue(item.DiaDiem);
                            rowTerminal.Cells[3].CellStyle = stylerow;

                            if (item.GioBd.Date != item.GioKt.Date)
                            {
                                rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioBd) + "-" + String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioKt));
                                rowTerminal.Cells[4].CellStyle = stylerow;
                            }
                            else
                            {
                                rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:HH\\:mm}", item.GioBd) + "-" + String.Format("{0:HH\\:mm}", item.GioKt));
                                rowTerminal.Cells[4].CellStyle = stylerow;
                            }

                            rowTerminal.CreateCell(5).SetCellValue(item.NgayLamViec.ToString("dd/MM/yyyy"));
                            rowTerminal.Cells[5].CellStyle = stylerow;

                            rowTerminal.CreateCell(6).SetCellValue(item.NguoiDuyet_SoPa);
                            rowTerminal.Cells[6].CellStyle = stylerow;

                            rowTerminal.CreateCell(7).SetCellValue(item.NguoiChiHuy);
                            rowTerminal.Cells[7].CellStyle = stylerow;

                            rowTerminal.CreateCell(8).SetCellValue(item.GiamSatVien);
                            rowTerminal.Cells[8].CellStyle = stylerow;

                            rowTerminal.CreateCell(9).SetCellValue(item.LanhDaoTrucBan);
                            rowTerminal.Cells[9].CellStyle = stylerow;

                            if (item.LoaiPhieu == 1)
                            {
                                rowTerminal.CreateCell(10).SetCellValue("Phiếu công tác");
                                rowTerminal.Cells[10].CellStyle = stylerow;
                            }
                            else
                            {
                                rowTerminal.CreateCell(10).SetCellValue("Lệnh công tác");
                                rowTerminal.Cells[10].CellStyle = stylerow;
                            }

                            if (catDien != null)
                            {
                                rowTerminal.CreateCell(11).SetCellValue(catDien.TenThuocTinh);
                                rowTerminal.Cells[11].CellStyle = stylerow;
                            }
                            else
                            {
                                rowTerminal.CreateCell(11).SetCellValue("");
                                rowTerminal.Cells[11].CellStyle = stylerow;
                            }

                            if (tiepDia != null)
                            {
                                rowTerminal.CreateCell(12).SetCellValue(tiepDia.TenThuocTinh);
                                rowTerminal.Cells[12].CellStyle = stylerow;
                            }
                            else
                            {
                                rowTerminal.CreateCell(12).SetCellValue("");
                                rowTerminal.Cells[12].CellStyle = stylerow;
                            }

                            if (tinhChat != null)
                            {
                                rowTerminal.CreateCell(13).SetCellValue(tinhChat.TenThuocTinh);
                                rowTerminal.Cells[13].CellStyle = stylerow;
                            }
                            else
                            {
                                rowTerminal.CreateCell(13).SetCellValue("");
                                rowTerminal.Cells[13].CellStyle = stylerow;
                            }

                            if (item.LoaiPhieu == 1)
                            {
                                rowTerminal.CreateCell(14).SetCellValue("Phiếu công tác");
                                rowTerminal.Cells[14].CellStyle = stylerow;
                            }
                            else
                            {
                                rowTerminal.CreateCell(14).SetCellValue("Lệnh công tác");
                                rowTerminal.Cells[14].CellStyle = stylerow;
                            }

                            if (item.IsKiemTra != null && item.IsKiemTra == true)
                            {
                                string str = "Đã kiểm tra";
                                if (item.NgayGioKT != null)
                                {
                                    str = str + " " + String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayGioKT);
                                }
                                rowTerminal.CreateCell(15).SetCellValue(str);
                                rowTerminal.Cells[15].CellStyle = stylerow;
                            }
                            else
                            {
                                rowTerminal.CreateCell(15).SetCellValue("Chưa kiểm tra");
                                rowTerminal.Cells[15].CellStyle = stylerow;
                            }

                            rowTerminal.CreateCell(16).SetCellValue(String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayKetThuc));
                            rowTerminal.Cells[16].CellStyle = stylerow;

                            rowTerminal.CreateCell(17).SetCellValue(item.NguoiKetThuc);
                            rowTerminal.Cells[17].CellStyle = stylerow;

                            rowTerminal.CreateCell(18).SetCellValue("");
                            rowTerminal.Cells[18].CellStyle = stylerow;

                            rowTerminal.CreateCell(19).SetCellValue(item.SoPhieu);
                            rowTerminal.Cells[19].CellStyle = stylerow;

                            rowIndex++;
                        }
                    }
                }



                ICellStyle styleFooter2 = workbook.CreateCellStyle();
                IFont fontF2 = workbook.CreateFont();
                fontF2.FontName = "Times New Roman";
                fontF2.Boldweight = (short)FontBoldWeight.Bold;
                fontF2.IsItalic = true;
                fontF2.FontHeightInPoints = 12;
                styleFooter2.SetFont(fontF2);
                styleFooter2.VerticalAlignment = VerticalAlignment.Top;
                styleFooter2.Alignment = HorizontalAlignment.Left;
                styleFooter2.WrapText = true;

                ICellStyle styleFooter3 = workbook.CreateCellStyle();
                IFont fontF3 = workbook.CreateFont();
                fontF3.FontName = "Times New Roman";
                fontF3.FontHeightInPoints = 12;
                styleFooter3.SetFont(fontF3);
                styleFooter3.VerticalAlignment = VerticalAlignment.Top;
                styleFooter3.Alignment = HorizontalAlignment.Left;
                styleFooter3.WrapText = true;

                //Footer
                ICellStyle styleFooter5 = workbook.CreateCellStyle();
                IFont fontF5 = workbook.CreateFont();
                fontF5.FontName = "Times New Roman";
                fontF5.Boldweight = (short)FontBoldWeight.Bold;
                fontF5.FontHeightInPoints = 12;
                styleFooter5.SetFont(fontF5);
                styleFooter5.VerticalAlignment = VerticalAlignment.Top;
                styleFooter5.Alignment = HorizontalAlignment.Center;
                styleFooter5.WrapText = true;

                if (donviId == null)
                {
                    //Dành cho đơn vị cấp trên
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("Người tổng hợp");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("KT.TP.An toàn");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Như trên;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để b/c);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - PGĐ KTSX-AT;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - P4, B2; BCBSX BLV;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - 14 Điện lực, TTTNĐ, XN Cao thế;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(4).SetCellValue("Nguyễn Toàn Thắng");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[0].CellStyle = styleFooter5;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(6).SetCellValue("Đào Duy Tiến");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("Phùng Hữu Đương");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;
                }
                else
                {
                    //Dành cho đơn vị cấp dưới
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("KTVATCT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("TP.KH-KT-AT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Phòng AT Cty (để b/cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để báo cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các PGĐ (để chỉ đạo);;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các Phòng, Đội (để thực hiện);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, KH-KT-AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                }

                #endregion

                #region export
                // Save the Excel spreadsheet to a MemoryStream and return it to the client
                using (var exportData = new MemoryStream())
                {
                    workbook.Write(exportData);
                    string strFileName = "";
                    if (donviId == null)
                    {
                        strFileName = string.Format("Ctybc-LLV.Tuan-M.NPC_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    else
                    {
                        strFileName = string.Format("Dvibc-LLV.Tuan-M.NPC_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    string saveAsFileName = strFileName;
                    Response.Clear();
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", saveAsFileName));
                    //Response.BinaryWrite(exportData.GetBuffer());
                    Response.BinaryWrite(exportData.ToArray());
                    Response.End();
                }

                this.SetNotification("Xuất dữ liệu báo cáo ngày thành công!", NotificationEnumeration.Success, true);
                #endregion

            }
            catch (Exception ex)
            {
                this.SetNotification("Không xuất được dữ liệu: " + ex.Message, NotificationEnumeration.Error, true);
            }
        }

        public ActionResult Export(string filter, int tcphien, int trangThai, string DateFrom, string DateTo, string DonViId, int PhongBanId, bool? isExportExcel)
        {

            try
            {
                filter = filter.ToUpper();
                //if (PhongBanId == "null")
                //    PhongBanId = "";

                string donviId = null;
                try
                {
                    donviId = Session["DonViID"].ToString();
                }
                catch { }

                if (DonViId == "1")
                    DonViId = "";

                if (string.IsNullOrEmpty(DateFrom) && string.IsNullOrEmpty(DateTo))
                {
                    DateTime dts = new DateTime();
                    DateTime dte = new DateTime();
                    PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);
                    DateFrom = string.Format("{0:dd/MM/yyyy}", dts.Date);
                    DateTo = string.Format("{0:dd/MM/yyyy}", dte.Date);
                }

                List<PhienLVModel> modelTotal = new List<PhienLVModel>();
                List<PhienLVModel> model = new List<PhienLVModel>();

                List<string> lstdv = new List<string>();
                if (donviId == null)
                {
                    lstdv = DonViRepository.GetAllDonViID(null);
                }
                else
                {
                    if (string.IsNullOrEmpty(DonViId))
                    {
                        lstdv = DonViRepository.GetAllDonViID(null);
                    }
                    else
                    {
                        lstdv = DonViRepository.GetAllDonViID(DonViId);
                    }
                }


                if (lstdv.Count() > 0)
                {
                    foreach (string item in lstdv)
                    {

                        model = _plviec_ser.ExportPhienLv(filter, tcphien, trangThai, DateFrom, DateTo, item.ToString(), PhongBanId).ToList();
                        foreach (var it in model)
                        {
                            modelTotal.Add(it);
                        }

                    }
                }


                if (isExportExcel ?? false)
                    ExportExcelFromList(modelTotal, tcphien, DateFrom, DateTo);

                DisposeAll();

                return View();
            }
            catch (Exception ex)
            {
                DisposeAll();

                return View();
            }
        }

        #endregion

        #region ExportToExcel Báo cáo theo mẫu Cty

        private void ExportExcelKeHoachLichLamViec(IEnumerable<PhienLVModel> list, int tcphien, string DateFrom, string DateTo)
        {
            try
            {
                string donviId = Session["DonViID"].ToString();
                var donVi = _dvi_ser.GetById(donviId);
                var donViCha = _dvi_ser.List().Where(x => x.Id == donVi.DviCha).FirstOrDefault();
                IWorkbook workbook = new XSSFWorkbook();
                ISheet sheet = workbook.CreateSheet("Report");

                // Thay đổi kích thước từng cột
                sheet.SetColumnWidth(0, 1500);
                sheet.SetColumnWidth(1, 6000);
                sheet.SetColumnWidth(2, 3500);
                sheet.SetColumnWidth(3, 5000);
                sheet.SetColumnWidth(4, 3000);
                sheet.SetColumnWidth(5, 3000);
                sheet.SetColumnWidth(6, 4500);
                sheet.SetColumnWidth(7, 4500);
                sheet.SetColumnWidth(8, 4500);
                sheet.SetColumnWidth(9, 4500);
                sheet.SetColumnWidth(10, 4500);
                sheet.SetColumnWidth(11, 3000);
                sheet.SetColumnWidth(12, 3000);
                sheet.SetColumnWidth(13, 3000);



                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:K1"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:K2"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A4:D4"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A5:D5"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("E4:J4"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("E5:J5"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("H6:K6"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:M7"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:E8"));



                IPrintSetup ps = sheet.PrintSetup;
                ps.Landscape = true;
                ps.PaperSize = (short)PaperSize.A4_Small;
                sheet.FitToPage = true;
                sheet.PrintSetup.FitWidth = 1;

                var rowIndex = 0;
                #region Report

                ICellStyle styleHeader1 = workbook.CreateCellStyle();
                IFont font1 = workbook.CreateFont();
                font1.FontName = "Times New Roman";
                font1.Boldweight = (short)FontBoldWeight.Bold;
                font1.FontHeightInPoints = 13;
                styleHeader1.SetFont(font1);
                styleHeader1.VerticalAlignment = VerticalAlignment.Top;
                styleHeader1.Alignment = HorizontalAlignment.Center;
                styleHeader1.WrapText = true;

                ICellStyle styleHeader2 = workbook.CreateCellStyle();
                IFont font3 = workbook.CreateFont();
                font3.FontName = "Times New Roman";
                font3.FontHeightInPoints = 13;
                font3.Boldweight = 700;
                styleHeader2.SetFont(font3);
                styleHeader2.VerticalAlignment = VerticalAlignment.Top;
                styleHeader2.Alignment = HorizontalAlignment.Center;
                styleHeader2.WrapText = true;


                ICellStyle styleHeader3 = workbook.CreateCellStyle();
                IFont font4 = workbook.CreateFont();
                font4.FontName = "Times New Roman";
                font4.FontHeightInPoints = 13;
                font4.Boldweight = 700;
                styleHeader3.SetFont(font4);
                styleHeader3.VerticalAlignment = VerticalAlignment.Top;
                styleHeader3.Alignment = HorizontalAlignment.Center;
                styleHeader3.WrapText = true;


                ICellStyle styleHeaderThuocTinh = workbook.CreateCellStyle();
                IFont fontThuocTinh = workbook.CreateFont();
                fontThuocTinh.FontName = "Times New Roman";
                fontThuocTinh.Boldweight = (short)FontBoldWeight.Normal;
                fontThuocTinh.FontHeightInPoints = 10;
                styleHeaderThuocTinh.SetFont(fontThuocTinh);
                styleHeaderThuocTinh.VerticalAlignment = VerticalAlignment.Top;
                styleHeaderThuocTinh.Alignment = HorizontalAlignment.Left;
                styleHeaderThuocTinh.WrapText = true;
                styleHeaderThuocTinh.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;


                IRow rowTerminal = sheet.CreateRow(0);

                rowTerminal.CreateCell(0).SetCellValue("PHỤ LỤC");
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;



                rowTerminal = sheet.CreateRow(1);
                rowTerminal.CreateCell(0).SetCellValue("(Phụ lục 06 - ĐKKH - QĐKTKS - Về các biểu mẫu theo quy định)");
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;





                rowTerminal = sheet.CreateRow(3);


                rowTerminal.CreateCell(0).SetCellValue("TỔNG CÔNG TY ĐIỆN LỰC MIỀN BẮC");
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(4).SetCellValue("CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM");
                rowTerminal.Cells[1].CellStyle = styleHeader1;


                rowTerminal = sheet.CreateRow(4);

                string tenDvi = _dvi_ser.GetById(donviId).TenDonVi;

                rowTerminal.CreateCell(0).SetCellValue(tenDvi);
                rowTerminal.Cells[0].CellStyle = styleHeader1;

                rowTerminal.CreateCell(4).SetCellValue("Độc lập - Tự do - Hạnh phúc");
                rowTerminal.Cells[1].CellStyle = styleHeader1;


                rowTerminal = sheet.CreateRow(5);


                rowTerminal.CreateCell(7).SetCellValue(".........., ngày " + DateTime.Now.Day + " tháng " + DateTime.Now.Month + " năm " + DateTime.Now.Year + "   ");
                rowTerminal.Cells[0].CellStyle = styleHeaderThuocTinh;
                //rowTerminal.Cells[7].CellStyle = styleHeader3;

                rowTerminal = sheet.CreateRow(6);
                rowTerminal.CreateCell(0).SetCellValue("ĐĂNG KÝ KẾ HOẠCH LỊCH LÀM VIỆC TRÊN LƯỚI ĐIỆN - KIỂM TRA HIỆN TRƯỜNG LÀM VIỆC ");
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;


                //Ngày tháng
                ICellStyle styleHeader4 = workbook.CreateCellStyle();
                IFont font5 = workbook.CreateFont();
                font5.Boldweight = (short)FontBoldWeight.Bold;
                font5.FontName = "Times New Roman";
                font5.FontHeightInPoints = 13;
                font5.IsItalic = true;
                styleHeader4.SetFont(font5);
                styleHeader4.VerticalAlignment = VerticalAlignment.Top;
                styleHeader4.Alignment = HorizontalAlignment.Center;
                styleHeader4.WrapText = true;


                rowTerminal = sheet.CreateRow(7);
                rowTerminal.CreateCell(0).SetCellValue("Từ ngày " + DateFrom + " đến ngày " + DateTo);
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader4;






                rowTerminal = sheet.CreateRow(9);


                ICellStyle styleHeader = workbook.CreateCellStyle();
                IFont font = workbook.CreateFont();
                font.FontName = "Times New Roman";
                font.Boldweight = (short)FontBoldWeight.Bold;
                font.FontHeightInPoints = 11;
                styleHeader.SetFont(font);
                styleHeader.VerticalAlignment = VerticalAlignment.Top;
                styleHeader.Alignment = HorizontalAlignment.Center;
                styleHeader.WrapText = true;
                styleHeader.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;



                rowTerminal.CreateCell(0).SetCellValue("Công việc");
                rowTerminal.Cells[0].Row.Height = 2000;
                rowTerminal.Cells[0].CellStyle = styleHeader;

                rowTerminal.CreateCell(1).SetCellValue("Nội dung công việc");
                rowTerminal.Cells[1].CellStyle = styleHeader;

                rowTerminal.CreateCell(2).SetCellValue("Đơn vị làm công việc");
                rowTerminal.Cells[2].CellStyle = styleHeader;

                rowTerminal.CreateCell(3).SetCellValue("Địa điểm (vị trí) công tác");
                rowTerminal.Cells[3].CellStyle = styleHeader;

                rowTerminal.CreateCell(4).SetCellValue("Ngày thực hiện");
                rowTerminal.Cells[4].CellStyle = styleHeader;


                rowTerminal.CreateCell(5).SetCellValue("Thời gian công tác");
                rowTerminal.Cells[5].CellStyle = styleHeader;

                rowTerminal.CreateCell(6).SetCellValue("Công việc có PA, KH, ĐX (ghi  duyệt)");
                rowTerminal.Cells[6].CellStyle = styleHeader;

                rowTerminal.CreateCell(7).SetCellValue("Người chỉ huy trực tiếp (số điện thoại DĐ + Video call)");
                rowTerminal.Cells[7].CellStyle = styleHeader;

                rowTerminal.CreateCell(8).SetCellValue("Người cho phép - SĐT");
                rowTerminal.Cells[8].CellStyle = styleHeader;

                rowTerminal.CreateCell(9).SetCellValue("Giám sát an toàn điện (nếu có) chức danh - số điện thoại DĐ");
                rowTerminal.Cells[9].CellStyle = styleHeader;

                rowTerminal.CreateCell(10).SetCellValue("Lãnh đạo được phân công kiểm soát (ghi số điện thoại DĐ + Video call)");
                rowTerminal.Cells[10].CellStyle = styleHeader;

                rowTerminal.CreateCell(11).SetCellValue("Hình thức kiểm tra hiện trường");
                rowTerminal.Cells[11].CellStyle = styleHeader;

                rowTerminal.CreateCell(12).SetCellValue("Đại diện Đoàn KT hiện trường (Họ tên, chức danh, đơn vị, số ĐT");
                rowTerminal.Cells[12].CellStyle = styleHeader;

                rowTerminal.CreateCell(13).SetCellValue("Hoãn hủy (cập nhật lý do)");
                rowTerminal.Cells[13].CellStyle = styleHeader;



                rowIndex = 10;
                rowTerminal = sheet.CreateRow(rowIndex);


                ICellStyle styleHeader0 = workbook.CreateCellStyle();
                IFont font0 = workbook.CreateFont();
                font0.FontName = "Times New Roman";
                font0.Boldweight = (short)FontBoldWeight.Normal;
                font0.FontHeightInPoints = 9;
                styleHeader0.SetFont(font0);
                styleHeader0.VerticalAlignment = VerticalAlignment.Top;
                styleHeader0.Alignment = HorizontalAlignment.Center;
                styleHeader0.WrapText = true;
                styleHeader0.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                rowTerminal.CreateCell(0).SetCellValue(1);
                rowTerminal.Cells[0].Row.Height = 400;
                rowTerminal.Cells[0].CellStyle = styleHeader0;

                rowTerminal.CreateCell(1).SetCellValue(2);
                rowTerminal.Cells[1].CellStyle = styleHeader0;

                rowTerminal.CreateCell(2).SetCellValue(3);
                rowTerminal.Cells[2].CellStyle = styleHeader0;

                rowTerminal.CreateCell(3).SetCellValue(4);
                rowTerminal.Cells[3].CellStyle = styleHeader0;

                rowTerminal.CreateCell(4).SetCellValue(5);
                rowTerminal.Cells[4].CellStyle = styleHeader0;


                rowTerminal.CreateCell(5).SetCellValue(6);
                rowTerminal.Cells[5].CellStyle = styleHeader0;

                rowTerminal.CreateCell(6).SetCellValue(7);
                rowTerminal.Cells[6].CellStyle = styleHeader0;

                rowTerminal.CreateCell(7).SetCellValue(8);
                rowTerminal.Cells[7].CellStyle = styleHeader0;

                rowTerminal.CreateCell(8).SetCellValue(9);
                rowTerminal.Cells[8].CellStyle = styleHeader0;

                rowTerminal.CreateCell(9).SetCellValue(10);
                rowTerminal.Cells[9].CellStyle = styleHeader0;

                rowTerminal.CreateCell(10).SetCellValue(11);
                rowTerminal.Cells[10].CellStyle = styleHeader0;

                rowTerminal.CreateCell(11).SetCellValue(12);
                rowTerminal.Cells[11].CellStyle = styleHeader0;

                rowTerminal.CreateCell(12).SetCellValue(13);
                rowTerminal.Cells[12].CellStyle = styleHeader0;

                rowTerminal.CreateCell(13).SetCellValue(14);
                rowTerminal.Cells[13].CellStyle = styleHeader0;



                rowIndex++;

                int i = 0, j = 0, h = 0;

                ICellStyle stylerow = workbook.CreateCellStyle();
                IFont fontr = workbook.CreateFont();
                fontr.FontName = "Times New Roman";
                fontr.FontHeightInPoints = 11;

                stylerow.SetFont(fontr);
                stylerow.VerticalAlignment = VerticalAlignment.Top;
                stylerow.Alignment = HorizontalAlignment.Center;
                stylerow.WrapText = true;
                stylerow.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                ICellStyle styleFoote4 = workbook.CreateCellStyle();
                IFont fontF4 = workbook.CreateFont();
                fontF4.FontName = "Times New Roman";
                fontF4.Boldweight = (short)FontBoldWeight.Bold;
                fontF4.FontHeightInPoints = 12;
                styleFoote4.SetFont(fontF4);
                styleFoote4.VerticalAlignment = VerticalAlignment.Top;
                styleFoote4.Alignment = HorizontalAlignment.Left;
                styleFoote4.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                //styleFoote4.BorderDiagonalLineStyle = BorderStyle.Thin;
                styleFoote4.WrapText = true;

                ICellStyle styleTenDvi = workbook.CreateCellStyle();
                IFont fontFTenDvi = workbook.CreateFont();
                fontFTenDvi.FontName = "Times New Roman";
                fontFTenDvi.Boldweight = (short)FontBoldWeight.Bold;
                fontFTenDvi.FontHeightInPoints = 12;
                styleTenDvi.SetFont(fontFTenDvi);
                styleTenDvi.VerticalAlignment = VerticalAlignment.Top;
                styleTenDvi.Alignment = HorizontalAlignment.Left;
                styleTenDvi.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                //styleTenDvi.BorderDiagonalLineStyle = BorderStyle.Thin;
                styleTenDvi.WrapText = true;
                styleTenDvi.FillForegroundColor = IndexedColors.Yellow.Index;
                styleTenDvi.FillPattern = FillPattern.SolidForeground;

                //Footer
                ICellStyle styleFooter1 = workbook.CreateCellStyle();
                IFont fontF1 = workbook.CreateFont();
                fontF1.FontName = "Times New Roman";
                fontF1.Boldweight = (short)FontBoldWeight.Bold;
                fontF1.FontHeightInPoints = 12;
                styleFooter1.SetFont(fontF1);
                styleFooter1.VerticalAlignment = VerticalAlignment.Top;
                styleFooter1.Alignment = HorizontalAlignment.Center;
                styleFooter1.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.WrapText = true;

                ICellStyle styleFooter20 = workbook.CreateCellStyle();
                IFont fontF20 = workbook.CreateFont();
                fontF20.FontName = "Times New Roman";
                fontF20.Boldweight = (short)FontBoldWeight.Normal;
                fontF20.FontHeightInPoints = 12;
                styleFooter20.SetFont(fontF20);
                styleFooter20.VerticalAlignment = VerticalAlignment.Top;
                styleFooter20.Alignment = HorizontalAlignment.Center;
                styleFooter20.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter20.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter20.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter20.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter20.WrapText = true;
                styleFooter20.FillForegroundColor = IndexedColors.Yellow.Index;
                styleFooter20.FillPattern = FillPattern.SolidForeground;



                var lstDonVi = _dvi_ser.ListByParentId(" ");
                foreach (var groupDay in list.GroupBy(x => x.TenDonVi).OrderBy(o => o.Key))
                {
                    h++;
                    j = 0;
                    //rowTerminal = sheet.CreateRow(rowIndex);
                    ////rowTerminal.CreateCell(0).SetCellValue(PhienLVRepository.GetDayOfWeek(groupDay.Key));
                    //rowTerminal.CreateCell(0).SetCellValue(groupDay.Key);
                    //rowTerminal.Cells[0].Row.Height = 350;
                    //rowTerminal.Cells[0].CellStyle = styleFoote4;

                    //rowTerminal.CreateCell(1).SetCellValue("");
                    //rowTerminal.Cells[1].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(2).SetCellValue("");
                    //rowTerminal.Cells[2].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(3).SetCellValue("");
                    //rowTerminal.Cells[3].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(4).SetCellValue("");
                    //rowTerminal.Cells[4].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(5).SetCellValue("");
                    //rowTerminal.Cells[5].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(6).SetCellValue("");
                    //rowTerminal.Cells[6].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(7).SetCellValue("");
                    //rowTerminal.Cells[7].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(8).SetCellValue("");
                    //rowTerminal.Cells[8].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(9).SetCellValue("");
                    //rowTerminal.Cells[9].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(10).SetCellValue("");
                    //rowTerminal.Cells[10].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(11).SetCellValue("");
                    //rowTerminal.Cells[11].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(12).SetCellValue("");
                    //rowTerminal.Cells[12].CellStyle = styleFoote4;
                    //rowTerminal.CreateCell(13).SetCellValue("");
                    //rowTerminal.Cells[13].CellStyle = styleFoote4;

                    //sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 13));



                    //rowIndex++;

                    // Add data rows

                    //Lay toan bo danh sach phien lam viec
                    // Add data rows
                    var lstTempPLviec = groupDay.ToList();
                    if (donviId == null)
                    {
                        foreach (var item in lstDonVi)
                        {
                            var listTenDvi = groupDay.Select(x => x.TenDonVi).ToList();
                            if (!listTenDvi.Contains(item.TenDonVi))
                            {
                                lstTempPLviec.Add(new PhienLVModel
                                {
                                    Id = 0,
                                    TenDonVi = item.TenDonVi,
                                    DiaDiem = "",
                                    TenPhongBan = "",
                                    GiamSatVien = "",
                                    LanhDaoTrucBan = "",
                                    NgayDuyet = DateTime.Now,
                                    GioBd = DateTime.Now,
                                    GioKt = DateTime.Now,
                                    PhongBanID = 0,
                                    LyDoThayDoi = "",
                                    NgayLamViec = DateTime.Now,
                                    NgaySua = DateTime.Now,
                                    NgayTao = DateTime.Now,
                                    NoiDung = "",
                                    ViTri = item.ViTri.Value,
                                    SDT = item.SDT
                                });
                            }

                        }
                    }

                    foreach (var group in lstTempPLviec.OrderBy(p => p.ViTri).GroupBy(x => x.TenDonVi))
                    {
                        var sdt = group.FirstOrDefault() != null ? group.FirstOrDefault().SDT : "";

                        j++;
                        rowTerminal = sheet.CreateRow(rowIndex);
                        rowTerminal.CreateCell(0).SetCellValue(_plviec_ser.ConvertSoSangLaMa(j));
                        rowTerminal.Cells[0].Row.Height = 350;
                        if (!String.IsNullOrEmpty(sdt))
                        {
                            rowTerminal.CreateCell(1).SetCellValue(group.Key + ": " + sdt);
                        }
                        else
                        {
                            rowTerminal.CreateCell(1).SetCellValue(group.Key);
                        }

                        rowTerminal.Cells[0].CellStyle = styleFooter1;
                        rowTerminal.Cells[1].CellStyle = styleTenDvi;

                        rowTerminal.CreateCell(2).SetCellValue("");
                        rowTerminal.Cells[2].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(3).SetCellValue("");
                        rowTerminal.Cells[3].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(4).SetCellValue("");
                        rowTerminal.Cells[4].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(5).SetCellValue("");
                        rowTerminal.Cells[5].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(6).SetCellValue("");
                        rowTerminal.Cells[6].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(7).SetCellValue("");
                        rowTerminal.Cells[7].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(8).SetCellValue("");
                        rowTerminal.Cells[8].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(9).SetCellValue("");
                        rowTerminal.Cells[9].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(10).SetCellValue("");
                        rowTerminal.Cells[10].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(11).SetCellValue("");
                        rowTerminal.Cells[11].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(12).SetCellValue("");
                        rowTerminal.Cells[12].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(13).SetCellValue("");
                        rowTerminal.Cells[13].CellStyle = styleFooter1;

                        sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 13));



                        rowIndex++;
                        int j1 = 0;
                        foreach (var ttPhien in group.OrderBy(p => p.ViTri)
                            .GroupBy(x => x.TrangThai_KHLLV == 2 ? 0 : 2))
                        //foreach (var ttPhien in group.OrderBy(p => p.ViTri).GroupBy(x => x.TrangThai_KHLLV))
                        {
                            j1++;
                            rowTerminal = sheet.CreateRow(rowIndex);
                            rowTerminal.CreateCell(0).SetCellValue(_plviec_ser.ConvertSoSangLaMa(j1));
                            rowTerminal.Cells[0].Row.Height = 350;
                            rowTerminal.Cells[0].CellStyle = styleFooter1;

                            var tcp = ttPhien.FirstOrDefault() != null ? ttPhien.FirstOrDefault().TrangThai_KHLLV : 0;

                            rowTerminal.CreateCell(1).SetCellValue((tcp == 0 || tcp == 1) ? "Đăng ký KH kiểm tra hiện trường" : tcp == 2 ? "Thay đổi bổ sung kiểm tra hiện trường" : "");
                            rowTerminal.Cells[1].CellStyle = styleTenDvi;

                            rowTerminal.CreateCell(2).SetCellValue("");
                            rowTerminal.Cells[2].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(3).SetCellValue("");
                            rowTerminal.Cells[3].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(4).SetCellValue("");
                            rowTerminal.Cells[4].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(5).SetCellValue("");
                            rowTerminal.Cells[5].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(6).SetCellValue("");
                            rowTerminal.Cells[6].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(7).SetCellValue("");
                            rowTerminal.Cells[7].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(8).SetCellValue("");
                            rowTerminal.Cells[8].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(9).SetCellValue("");
                            rowTerminal.Cells[9].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(10).SetCellValue("");
                            rowTerminal.Cells[10].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(11).SetCellValue("");
                            rowTerminal.Cells[11].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(12).SetCellValue("");
                            rowTerminal.Cells[12].CellStyle = styleFooter1;
                            rowTerminal.CreateCell(13).SetCellValue("");
                            rowTerminal.Cells[13].CellStyle = styleFooter1;

                            sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 13));


                            rowIndex++;

                            foreach (var item in ttPhien)
                            {
                                i++;

                                var phieu = _pcongtac_ser.GetById(item.MaPCT);
                                var thuocTinhList = phienLamViecThuocTinhPhienRepository.GetByPhienLamViecId(item.Id);

                                plv_ThuocTinhPhien catDien = null;
                                plv_ThuocTinhPhien tiepDia = null;
                                plv_ThuocTinhPhien tinhChat = null;

                                foreach (var thuocTinhItem in thuocTinhList)
                                {
                                    try
                                    {
                                        if (catDien == null)
                                        {
                                            catDien = thuocTinhPhienRepository.GetByLoaiThuocTinh(3).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        catDien = null;
                                    }

                                    try
                                    {
                                        if (tinhChat == null)
                                        {
                                            tinhChat = thuocTinhPhienRepository.GetByLoaiThuocTinh(5).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        tinhChat = null;
                                    }

                                    try
                                    {
                                        if (tiepDia == null)
                                        {
                                            tiepDia = thuocTinhPhienRepository.GetByLoaiThuocTinh(4).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        tiepDia = null;
                                    }
                                }

                                rowTerminal = sheet.CreateRow(rowIndex);

                                rowTerminal.CreateCell(0).SetCellValue($"{i}\n{item.SoPhieu ?? ""}");
                                rowTerminal.Cells[0].CellStyle = stylerow;

                                rowTerminal.CreateCell(1).SetCellValue(item.NoiDung);
                                rowTerminal.Cells[1].CellStyle = stylerow;

                                rowTerminal.CreateCell(2).SetCellValue(item.TenPhongBan);
                                rowTerminal.Cells[2].CellStyle = stylerow;

                                rowTerminal.CreateCell(3).SetCellValue(item.DiaDiem);
                                rowTerminal.Cells[3].CellStyle = stylerow;

                                rowTerminal.CreateCell(4).SetCellValue(string.Format("{0:dd/MM/yyyy}", @item.NgayLamViec));
                                rowTerminal.Cells[4].CellStyle = stylerow;

                                if (item.GioBd.Date != item.GioKt.Date)
                                {
                                    rowTerminal.CreateCell(5).SetCellValue(String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioBd) + "-" + String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[5].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(5).SetCellValue(String.Format("{0:HH\\:mm}", item.GioBd) + "-" + String.Format("{0:HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[5].CellStyle = stylerow;
                                }



                                rowTerminal.CreateCell(6).SetCellValue(item.NguoiDuyet_SoPa);
                                rowTerminal.Cells[6].CellStyle = stylerow;

                                rowTerminal.CreateCell(7).SetCellValue(item.NguoiChiHuy);
                                rowTerminal.Cells[7].CellStyle = stylerow;

                                rowTerminal.CreateCell(8).SetCellValue(item.NguoiKiemSoat);
                                rowTerminal.Cells[8].CellStyle = stylerow;


                                rowTerminal.CreateCell(9).SetCellValue(item.GiamSatVien);
                                rowTerminal.Cells[9].CellStyle = stylerow;


                                //rowTerminal.CreateCell(9).SetCellValue(item.NguoiKiemTraPhieu);
                                //rowTerminal.Cells[9].CellStyle = stylerow;

                                rowTerminal.CreateCell(10).SetCellValue(item.LanhDaoTrucBan);
                                rowTerminal.Cells[10].CellStyle = stylerow;

                                rowTerminal.CreateCell(11).SetCellValue(item.HinhThucKiemTra == 1 ? "Kiểm tra đầu giờ" : item.HinhThucKiemTra == 2 ? "Kiểm tra giữa giờ" : " ");
                                rowTerminal.Cells[11].CellStyle = stylerow;

                                rowTerminal.CreateCell(12).SetCellValue(item.NguoiDaiDienKT ?? "");
                                rowTerminal.Cells[12].CellStyle = stylerow;


                                rowTerminal.CreateCell(13).SetCellValue(item.LyDoHoanHuy_KHLLV ?? "");
                                if (item.TrangThai_KHLLV == 0)
                                {
                                    rowTerminal.Cells[13].CellStyle = styleFooter20;
                                }
                                else
                                {
                                    rowTerminal.Cells[13].CellStyle = stylerow;
                                }


                                rowIndex++;
                            }



                        }
                    }
                }



                ICellStyle styleFooter2 = workbook.CreateCellStyle();
                IFont fontF2 = workbook.CreateFont();
                fontF2.FontName = "Times New Roman";
                fontF2.Boldweight = (short)FontBoldWeight.Bold;
                fontF2.IsItalic = true;
                fontF2.FontHeightInPoints = 12;
                styleFooter2.SetFont(fontF2);
                styleFooter2.VerticalAlignment = VerticalAlignment.Top;
                styleFooter2.Alignment = HorizontalAlignment.Left;
                styleFooter2.WrapText = true;

                ICellStyle styleFooter3 = workbook.CreateCellStyle();
                IFont fontF3 = workbook.CreateFont();
                fontF3.FontName = "Times New Roman";
                fontF3.FontHeightInPoints = 12;
                styleFooter3.SetFont(fontF3);
                styleFooter3.VerticalAlignment = VerticalAlignment.Top;
                styleFooter3.Alignment = HorizontalAlignment.Left;
                styleFooter3.WrapText = true;

                //Footer
                ICellStyle styleFooter5 = workbook.CreateCellStyle();
                IFont fontF5 = workbook.CreateFont();
                fontF5.FontName = "Times New Roman";
                fontF5.Boldweight = (short)FontBoldWeight.Bold;
                fontF5.FontHeightInPoints = 12;
                styleFooter5.SetFont(fontF5);
                styleFooter5.VerticalAlignment = VerticalAlignment.Top;
                styleFooter5.Alignment = HorizontalAlignment.Center;
                styleFooter5.WrapText = true;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                rowTerminal.CreateCell(0).SetCellValue("Người tổng hợp");
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleFooter5;

                rowTerminal.CreateCell(4).SetCellValue("TP.An Toàn");
                sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 6));
                rowTerminal.Cells[1].CellStyle = styleFooter5;



                rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐÔC");
                sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                rowTerminal.Cells[2].CellStyle = styleFooter5;


                #endregion


                #region export
                // Save the Excel spreadsheet to a MemoryStream and return it to the client
                using (var exportData = new MemoryStream())
                {
                    Response.Clear();
                    workbook.Write(exportData);
                    string strFileName = "";
                    if (donviId == null)
                    {
                        strFileName = string.Format("Ctybc-LLV.Tuan_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    else
                    {
                        strFileName = string.Format("Dvibc-LLV.Tuan_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    string saveAsFileName = strFileName;

                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", saveAsFileName));
                    //Response.BinaryWrite(exportData.GetBuffer());
                    Response.BinaryWrite(exportData.ToArray());
                    Response.End();
                }

                this.SetNotification("Xuất dữ liệu thành công!", NotificationEnumeration.Success, true);
                #endregion

            }
            catch (Exception ex)
            {
                this.SetNotification("Không xuất được dữ liệu: " + ex.Message, NotificationEnumeration.Error, true);
            }
        }

        private void ExportExcelFromList_Cty(IEnumerable<PhienLVModel> list, int tcphien, string DateFrom, string DateTo)
        {
            try
            {
                string donviId = Session["DonViID"].ToString();
                var donVi = _dvi_ser.GetById(donviId);
                var donViCha = _dvi_ser.List().Where(x => x.Id == donVi.DviCha).FirstOrDefault();

                IWorkbook workbook = new XSSFWorkbook();
                ISheet sheet = workbook.CreateSheet("Report");

                // Thay đổi kích thước từng cột
                sheet.SetColumnWidth(0, 1500);
                sheet.SetColumnWidth(1, 6000);
                sheet.SetColumnWidth(2, 3500);
                sheet.SetColumnWidth(3, 5000);
                sheet.SetColumnWidth(4, 3000);
                sheet.SetColumnWidth(5, 3000);
                sheet.SetColumnWidth(6, 4500);
                sheet.SetColumnWidth(7, 4500);
                sheet.SetColumnWidth(8, 4500);
                sheet.SetColumnWidth(9, 4500);
                sheet.SetColumnWidth(10, 4500);
                sheet.SetColumnWidth(11, 3000);
                sheet.SetColumnWidth(12, 3000);
                sheet.SetColumnWidth(13, 3000);
                sheet.SetColumnWidth(14, 3000);
                sheet.SetColumnWidth(15, 3000);
                sheet.SetColumnWidth(16, 3000);
                sheet.SetColumnWidth(17, 3000);
                sheet.SetColumnWidth(21, 6000);


                //gop cell
                if (donviId == null)
                {
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:D1"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G1:J1"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:D2"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G2:J2"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A3:D3"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G3:J3"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A5:D5"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G5:J5"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A6:J6"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:D7"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:J7"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:J8"));
                    //sheet.AddMergedRegion(CellRangeAddress.ValueOf("A9:J9"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A10:J10"));
                }
                else
                {
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:D1"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G1:J1"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:D2"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G2:J2"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A4:D4"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G4:J4"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A5:D5"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G5:J5"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A6:J6"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:J7"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:J8"));
                    //sheet.AddMergedRegion(CellRangeAddress.ValueOf("A9:J9"));
                }



                IPrintSetup ps = sheet.PrintSetup;
                ps.Landscape = true;
                ps.PaperSize = (short)PaperSize.A4_Small;
                sheet.FitToPage = true;
                sheet.PrintSetup.FitWidth = 1;

                var rowIndex = 0;
                #region Report

                ICellStyle styleHeader1 = workbook.CreateCellStyle();
                IFont font1 = workbook.CreateFont();
                font1.FontName = "Times New Roman";
                font1.Boldweight = (short)FontBoldWeight.Bold;
                font1.FontHeightInPoints = 13;
                styleHeader1.SetFont(font1);
                styleHeader1.VerticalAlignment = VerticalAlignment.Top;
                styleHeader1.Alignment = HorizontalAlignment.Center;
                styleHeader1.WrapText = true;

                ICellStyle styleHeaderThuocTinh = workbook.CreateCellStyle();
                IFont fontThuocTinh = workbook.CreateFont();
                fontThuocTinh.FontName = "Times New Roman";
                fontThuocTinh.Boldweight = (short)FontBoldWeight.Normal;
                fontThuocTinh.FontHeightInPoints = 10;
                styleHeaderThuocTinh.SetFont(fontThuocTinh);
                styleHeaderThuocTinh.VerticalAlignment = VerticalAlignment.Top;
                styleHeaderThuocTinh.Alignment = HorizontalAlignment.Left;
                styleHeaderThuocTinh.WrapText = true;
                styleHeaderThuocTinh.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;


                IRow rowTerminal = sheet.CreateRow(rowIndex);

                if (donViCha != null)
                {
                    rowTerminal.CreateCell(0).SetCellValue(donViCha.TenDonVi.ToUpper());
                }
                else
                {
                    rowTerminal.CreateCell(0).SetCellValue("");
                }

                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(6).SetCellValue("CỘNG HOÀ XÃ HỘI CHỦ NGHĨA VIỆT NAM");
                rowTerminal.Cells[1].CellStyle = styleHeader1;
                rowTerminal.CreateCell(21).SetCellValue("Phiếu công tác");
                rowTerminal.Cells[2].CellStyle = styleHeaderThuocTinh;


                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue(donVi.TenDonVi.ToUpper());
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(6).SetCellValue("Độc lập – Tự do – Hạnh phúc");
                rowTerminal.Cells[1].CellStyle = styleHeader1;
                rowTerminal.CreateCell(21).SetCellValue("Lệnh công tác");
                rowTerminal.Cells[2].CellStyle = styleHeaderThuocTinh;

                //rowIndex++;
                //rowTerminal = sheet.CreateRow(rowIndex);
                //rowTerminal.CreateCell(0).SetCellValue("ĐIỆN LỰC HẢI PHÒNG");
                //rowTerminal.Cells[0].Row.Height = 350;
                //rowTerminal.Cells[0].CellStyle = styleHeader1;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(21).SetCellValue("Công việc cắt điện");
                rowTerminal.Cells[0].CellStyle = styleHeaderThuocTinh;

                // So van ban
                ICellStyle styleHeader2 = workbook.CreateCellStyle();
                IFont font3 = workbook.CreateFont();
                font3.FontName = "Times New Roman";
                font3.FontHeightInPoints = 13;
                styleHeader2.SetFont(font3);
                styleHeader2.VerticalAlignment = VerticalAlignment.Top;
                styleHeader2.Alignment = HorizontalAlignment.Center;
                styleHeader2.WrapText = true;

                ICellStyle styleHeader3 = workbook.CreateCellStyle();
                IFont font4 = workbook.CreateFont();
                font4.FontName = "Times New Roman";
                font4.FontHeightInPoints = 13;
                font4.IsItalic = true;
                styleHeader3.SetFont(font4);
                styleHeader3.VerticalAlignment = VerticalAlignment.Top;
                styleHeader3.Alignment = HorizontalAlignment.Center;
                styleHeader3.WrapText = true;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(21).SetCellValue("Công việc không cắt điện");
                rowTerminal.Cells[0].CellStyle = styleHeaderThuocTinh;


                if (donviId == null)
                {
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /PCHP-AT");
                }
                else
                {
                    string tenDvi = _dvi_ser.GetById(donviId).TenDonVi;
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /" + tenDvi + "-AT");
                }

                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader2;
                rowTerminal.CreateCell(6).SetCellValue(".........., ngày " + DateTime.Now.Day + " tháng " + DateTime.Now.Month + " năm " + DateTime.Now.Year + "   ");
                rowTerminal.Cells[1].CellStyle = styleHeader3;

                //Thêm dòng về việc với cấp công ty
                if (donviId == null)
                {
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Về việc báo cáo lịch làm việc trên lưới điện");

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue(" tại hiện trường từ ngày " + DateFrom + " đến ngày " + DateTo + " năm " + DateTime.Now.Year);

                }

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(21).SetCellValue("Công việc tiếp địa");
                rowTerminal.Cells[0].CellStyle = styleHeaderThuocTinh;

                if (donviId == null)
                {
                    //Tiêu đề đơn vị cấp trên
                    rowIndex++;

                    rowTerminal.CreateCell(0).SetCellValue("Kính gửi: Ban An toàn- Tổng Công ty Điện lực miền Bắc.");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;
                    //sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 9));
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                }
                else
                {
                    // Tiêu đề đơn vị cấp dưới
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("BÁO CÁO LỊCH LÀM VIỆC TRÊN LƯỚI ĐIỆN TUẦN");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(21).SetCellValue("Công việc không tiếp địa");
                    rowTerminal.Cells[1].CellStyle = styleHeaderThuocTinh;


                    //Ngày tháng
                    ICellStyle styleHeader4 = workbook.CreateCellStyle();
                    IFont font5 = workbook.CreateFont();
                    font5.Boldweight = (short)FontBoldWeight.Bold;
                    font5.FontName = "Times New Roman";
                    font5.FontHeightInPoints = 13;
                    font5.IsItalic = true;
                    styleHeader4.SetFont(font5);
                    styleHeader4.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader4.Alignment = HorizontalAlignment.Center;
                    styleHeader4.WrapText = true;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Từ ngày " + DateFrom + " đến ngày " + DateTo);
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader4;
                    rowTerminal.CreateCell(21).SetCellValue("Công việc có tính chất phức tạp");
                    rowTerminal.Cells[1].CellStyle = styleHeaderThuocTinh;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Kính gửi: Phòng An toàn");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader4;
                    rowTerminal.CreateCell(21).SetCellValue("Công việc cần quay video");
                    rowTerminal.Cells[1].CellStyle = styleHeaderThuocTinh;
                    //rowIndex++;
                    //rowTerminal = sheet.CreateRow(rowIndex);
                }


                // Header
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);


                ICellStyle styleHeader = workbook.CreateCellStyle();
                IFont font = workbook.CreateFont();
                font.FontName = "Times New Roman";
                font.Boldweight = (short)FontBoldWeight.Bold;
                font.FontHeightInPoints = 11;
                styleHeader.SetFont(font);
                styleHeader.VerticalAlignment = VerticalAlignment.Top;
                styleHeader.Alignment = HorizontalAlignment.Center;
                styleHeader.WrapText = true;
                styleHeader.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;



                rowTerminal.CreateCell(0).SetCellValue("Công việc");
                rowTerminal.Cells[0].Row.Height = 2000;
                rowTerminal.Cells[0].CellStyle = styleHeader;

                rowTerminal.CreateCell(1).SetCellValue("Nội dung công việc");
                rowTerminal.Cells[1].CellStyle = styleHeader;

                rowTerminal.CreateCell(2).SetCellValue("Đơn vị làm công việc");
                rowTerminal.Cells[2].CellStyle = styleHeader;

                rowTerminal.CreateCell(3).SetCellValue("Địa điểm (vị trí) công tác");
                rowTerminal.Cells[3].CellStyle = styleHeader;

                rowTerminal.CreateCell(4).SetCellValue("Thời gian công tác");
                rowTerminal.Cells[4].CellStyle = styleHeader;


                rowTerminal.CreateCell(5).SetCellValue("Người duyệt phương án");
                rowTerminal.Cells[5].CellStyle = styleHeader;

                rowTerminal.CreateCell(6).SetCellValue("Người chỉ huy trực tiếp (số điện thoại DD)");
                rowTerminal.Cells[6].CellStyle = styleHeader;

                rowTerminal.CreateCell(7).SetCellValue("Người giám sát ATĐ (chức danh- số điện thoại DD)");
                rowTerminal.Cells[7].CellStyle = styleHeader;

                rowTerminal.CreateCell(8).SetCellValue("Người cho phép - SĐT");
                rowTerminal.Cells[8].CellStyle = styleHeader;

                rowTerminal.CreateCell(9).SetCellValue("Người kiểm tra PCT; LCT");
                rowTerminal.Cells[9].CellStyle = styleHeader;

                rowTerminal.CreateCell(10).SetCellValue("Lãnh đạo đơn vị kiểm tra kiểm soát - SĐT");
                rowTerminal.Cells[10].CellStyle = styleHeader;

                rowTerminal.CreateCell(11).SetCellValue("Phiếu/ Lệnh công tác");
                rowTerminal.Cells[11].CellStyle = styleHeader;

                rowTerminal.CreateCell(12).SetCellValue("Trạng thái cắt điện");
                rowTerminal.Cells[12].CellStyle = styleHeader;

                rowTerminal.CreateCell(13).SetCellValue("Trạng thái tiếp địa");
                rowTerminal.Cells[13].CellStyle = styleHeader;

                rowTerminal.CreateCell(14).SetCellValue("Tính chất phiên lv");
                rowTerminal.Cells[14].CellStyle = styleHeader;

                rowTerminal.CreateCell(15).SetCellValue("Trạng thái công việc");
                rowTerminal.Cells[15].CellStyle = styleHeader;

                rowTerminal.CreateCell(16).SetCellValue("Loại phiếu");
                rowTerminal.Cells[16].CellStyle = styleHeader;

                rowTerminal.CreateCell(17).SetCellValue("Lãnh đạo đơn vị kiểm tra kiểm soát");
                rowTerminal.Cells[17].CellStyle = styleHeader;

                rowTerminal.CreateCell(18).SetCellValue("Ngày kết thúc");
                rowTerminal.Cells[18].CellStyle = styleHeader;

                rowTerminal.CreateCell(19).SetCellValue("Người kết thúc");
                rowTerminal.Cells[19].CellStyle = styleHeader;

                rowTerminal.CreateCell(20).SetCellValue("Tổng (" + list.Count() + ")");
                rowTerminal.Cells[20].CellStyle = styleHeader;

                rowTerminal.CreateCell(21).SetCellValue("Số phiếu/lệnh");
                rowTerminal.Cells[21].CellStyle = styleHeader;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);


                ICellStyle styleHeader0 = workbook.CreateCellStyle();
                IFont font0 = workbook.CreateFont();
                font0.FontName = "Times New Roman";
                font0.Boldweight = (short)FontBoldWeight.Normal;
                font0.FontHeightInPoints = 9;
                styleHeader0.SetFont(font0);
                styleHeader0.VerticalAlignment = VerticalAlignment.Top;
                styleHeader0.Alignment = HorizontalAlignment.Center;
                styleHeader0.WrapText = true;
                styleHeader0.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                rowTerminal.CreateCell(0).SetCellValue(1);
                rowTerminal.Cells[0].Row.Height = 400;
                rowTerminal.Cells[0].CellStyle = styleHeader0;

                rowTerminal.CreateCell(1).SetCellValue(2);
                rowTerminal.Cells[1].CellStyle = styleHeader0;

                rowTerminal.CreateCell(2).SetCellValue(3);
                rowTerminal.Cells[2].CellStyle = styleHeader0;

                rowTerminal.CreateCell(3).SetCellValue(4);
                rowTerminal.Cells[3].CellStyle = styleHeader0;

                rowTerminal.CreateCell(4).SetCellValue(5);
                rowTerminal.Cells[4].CellStyle = styleHeader0;


                rowTerminal.CreateCell(5).SetCellValue(6);
                rowTerminal.Cells[5].CellStyle = styleHeader0;

                rowTerminal.CreateCell(6).SetCellValue(7);
                rowTerminal.Cells[6].CellStyle = styleHeader0;

                rowTerminal.CreateCell(7).SetCellValue(8);
                rowTerminal.Cells[7].CellStyle = styleHeader0;

                rowTerminal.CreateCell(8).SetCellValue(9);
                rowTerminal.Cells[8].CellStyle = styleHeader0;

                rowTerminal.CreateCell(9).SetCellValue(10);
                rowTerminal.Cells[9].CellStyle = styleHeader0;

                rowTerminal.CreateCell(10).SetCellValue(11);
                rowTerminal.Cells[10].CellStyle = styleHeader0;

                rowTerminal.CreateCell(11).SetCellValue(12);
                rowTerminal.Cells[11].CellStyle = styleHeader0;

                rowTerminal.CreateCell(12).SetCellValue(13);
                rowTerminal.Cells[12].CellStyle = styleHeader0;

                rowTerminal.CreateCell(13).SetCellValue(14);
                rowTerminal.Cells[13].CellStyle = styleHeader0;

                rowTerminal.CreateCell(14).SetCellValue(15);
                rowTerminal.Cells[14].CellStyle = styleHeader0;

                rowTerminal.CreateCell(15).SetCellValue(16);
                rowTerminal.Cells[15].CellStyle = styleHeader0;

                rowTerminal.CreateCell(16).SetCellValue(17);
                rowTerminal.Cells[16].CellStyle = styleHeader0;

                rowTerminal.CreateCell(17).SetCellValue(18);
                rowTerminal.Cells[17].CellStyle = styleHeader0;

                rowTerminal.CreateCell(18).SetCellValue(19);
                rowTerminal.Cells[18].CellStyle = styleHeader0;

                rowTerminal.CreateCell(19).SetCellValue(20);
                rowTerminal.Cells[19].CellStyle = styleHeader0;

                rowTerminal.CreateCell(20).SetCellValue(21);
                rowTerminal.Cells[20].CellStyle = styleHeader0;

                rowTerminal.CreateCell(21).SetCellValue(22);
                rowTerminal.Cells[21].CellStyle = styleHeader0;

                rowIndex++;

                int i = 0, j = 0, h = 0;

                ICellStyle stylerow = workbook.CreateCellStyle();
                IFont fontr = workbook.CreateFont();
                fontr.FontName = "Times New Roman";
                fontr.FontHeightInPoints = 11;

                stylerow.SetFont(fontr);
                stylerow.VerticalAlignment = VerticalAlignment.Top;
                stylerow.Alignment = HorizontalAlignment.Center;
                stylerow.WrapText = true;
                stylerow.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                ICellStyle styleFoote4 = workbook.CreateCellStyle();
                IFont fontF4 = workbook.CreateFont();
                fontF4.FontName = "Times New Roman";
                fontF4.Boldweight = (short)FontBoldWeight.Bold;
                fontF4.FontHeightInPoints = 12;
                styleFoote4.SetFont(fontF4);
                styleFoote4.VerticalAlignment = VerticalAlignment.Top;
                styleFoote4.Alignment = HorizontalAlignment.Left;
                styleFoote4.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                //styleFoote4.BorderDiagonalLineStyle = BorderStyle.Thin;
                styleFoote4.WrapText = true;

                ICellStyle styleTenDvi = workbook.CreateCellStyle();
                IFont fontFTenDvi = workbook.CreateFont();
                fontFTenDvi.FontName = "Times New Roman";
                fontFTenDvi.Boldweight = (short)FontBoldWeight.Bold;
                fontFTenDvi.FontHeightInPoints = 12;
                styleTenDvi.SetFont(fontFTenDvi);
                styleTenDvi.VerticalAlignment = VerticalAlignment.Top;
                styleTenDvi.Alignment = HorizontalAlignment.Left;
                styleTenDvi.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                //styleTenDvi.BorderDiagonalLineStyle = BorderStyle.Thin;
                styleTenDvi.WrapText = true;
                styleTenDvi.FillForegroundColor = IndexedColors.Yellow.Index;
                styleTenDvi.FillPattern = FillPattern.SolidForeground;

                //Footer
                ICellStyle styleFooter1 = workbook.CreateCellStyle();
                IFont fontF1 = workbook.CreateFont();
                fontF1.FontName = "Times New Roman";
                fontF1.Boldweight = (short)FontBoldWeight.Bold;
                fontF1.FontHeightInPoints = 12;
                styleFooter1.SetFont(fontF1);
                styleFooter1.VerticalAlignment = VerticalAlignment.Top;
                styleFooter1.Alignment = HorizontalAlignment.Center;
                styleFooter1.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.WrapText = true;


                var lstDonVi = _dvi_ser.ListByParentId(" ");
                foreach (var groupDay in list.GroupBy(x => x.NgayLamViec).OrderBy(o => o.Key))
                {
                    h++;
                    j = 0;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue(PhienLVRepository.GetDayOfWeek(groupDay.Key));
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFoote4;

                    rowTerminal.CreateCell(1).SetCellValue("");
                    rowTerminal.Cells[1].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(2).SetCellValue("");
                    rowTerminal.Cells[2].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(3).SetCellValue("");
                    rowTerminal.Cells[3].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(4).SetCellValue("");
                    rowTerminal.Cells[4].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(5).SetCellValue("");
                    rowTerminal.Cells[5].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(6).SetCellValue("");
                    rowTerminal.Cells[6].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(7).SetCellValue("");
                    rowTerminal.Cells[7].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(8).SetCellValue("");
                    rowTerminal.Cells[8].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(9).SetCellValue("");
                    rowTerminal.Cells[9].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(10).SetCellValue("");
                    rowTerminal.Cells[10].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(11).SetCellValue("");
                    rowTerminal.Cells[11].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(12).SetCellValue("");
                    rowTerminal.Cells[12].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(13).SetCellValue("");
                    rowTerminal.Cells[13].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(14).SetCellValue("");
                    rowTerminal.Cells[14].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(15).SetCellValue("");
                    rowTerminal.Cells[15].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(16).SetCellValue("");
                    rowTerminal.Cells[16].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(17).SetCellValue("");
                    rowTerminal.Cells[17].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(18).SetCellValue("");
                    rowTerminal.Cells[18].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(19).SetCellValue("");
                    rowTerminal.Cells[19].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(20).SetCellValue(groupDay.Count());
                    rowTerminal.Cells[20].CellStyle = styleHeader;
                    rowTerminal.CreateCell(21).SetCellValue("");
                    rowTerminal.Cells[21].CellStyle = styleFoote4;
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 21));



                    rowIndex++;

                    // Add data rows

                    //Lay toan bo danh sach phien lam viec
                    // Add data rows
                    var lstTempPLviec = groupDay.ToList();
                    if (donviId == null)
                    {
                        foreach (var item in lstDonVi)
                        {
                            var listTenDvi = groupDay.Select(x => x.TenDonVi).ToList();
                            if (!listTenDvi.Contains(item.TenDonVi))
                            {
                                lstTempPLviec.Add(new PhienLVModel
                                {
                                    Id = 0,
                                    TenDonVi = item.TenDonVi,
                                    DiaDiem = "",
                                    TenPhongBan = "",
                                    GiamSatVien = "",
                                    LanhDaoTrucBan = "",
                                    NgayDuyet = DateTime.Now,
                                    GioBd = DateTime.Now,
                                    GioKt = DateTime.Now,
                                    PhongBanID = 0,
                                    LyDoThayDoi = "",
                                    NgayLamViec = DateTime.Now,
                                    NgaySua = DateTime.Now,
                                    NgayTao = DateTime.Now,
                                    NoiDung = "",
                                    ViTri = item.ViTri.Value,
                                    SDT = item.SDT
                                });
                            }

                        }
                    }

                    foreach (var group in lstTempPLviec.OrderBy(p => p.ViTri).GroupBy(x => x.TenDonVi))
                    {
                        var sdt = group.FirstOrDefault() != null ? group.FirstOrDefault().SDT : "";

                        j++;
                        rowTerminal = sheet.CreateRow(rowIndex);
                        rowTerminal.CreateCell(0).SetCellValue(_plviec_ser.ConvertSoSangLaMa(j));
                        rowTerminal.Cells[0].Row.Height = 350;
                        if (!String.IsNullOrEmpty(sdt))
                        {
                            rowTerminal.CreateCell(1).SetCellValue(group.Key + ": " + sdt);
                        }
                        else
                        {
                            rowTerminal.CreateCell(1).SetCellValue(group.Key);
                        }

                        rowTerminal.Cells[0].CellStyle = styleFooter1;
                        rowTerminal.Cells[1].CellStyle = styleTenDvi;

                        rowTerminal.CreateCell(2).SetCellValue("");
                        rowTerminal.Cells[2].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(3).SetCellValue("");
                        rowTerminal.Cells[3].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(4).SetCellValue("");
                        rowTerminal.Cells[4].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(5).SetCellValue("");
                        rowTerminal.Cells[5].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(6).SetCellValue("");
                        rowTerminal.Cells[6].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(7).SetCellValue("");
                        rowTerminal.Cells[7].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(8).SetCellValue("");
                        rowTerminal.Cells[8].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(9).SetCellValue("");
                        rowTerminal.Cells[9].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(10).SetCellValue("");
                        rowTerminal.Cells[10].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(11).SetCellValue("");
                        rowTerminal.Cells[11].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(12).SetCellValue("");
                        rowTerminal.Cells[12].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(13).SetCellValue("");
                        rowTerminal.Cells[13].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(14).SetCellValue("");
                        rowTerminal.Cells[14].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(15).SetCellValue("");
                        rowTerminal.Cells[15].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(16).SetCellValue("");
                        rowTerminal.Cells[16].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(17).SetCellValue("");
                        rowTerminal.Cells[17].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(18).SetCellValue("");
                        rowTerminal.Cells[18].CellStyle = styleFooter1;
                        rowTerminal.CreateCell(19).SetCellValue("");
                        rowTerminal.Cells[19].CellStyle = styleFooter1;
                        if (group.Count() == 1 && string.IsNullOrEmpty(group.FirstOrDefault().DiaDiem))
                        {
                            rowTerminal.CreateCell(20).SetCellValue("0");
                            rowTerminal.Cells[20].CellStyle = styleHeader;
                        }
                        else
                        {
                            rowTerminal.CreateCell(20).SetCellValue(group.Count());
                            rowTerminal.Cells[20].CellStyle = styleHeader;
                        }
                        rowTerminal.CreateCell(21).SetCellValue("");
                        rowTerminal.Cells[21].CellStyle = styleFooter1;
                        sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 21));



                        rowIndex++;

                        foreach (var item in group)
                        {
                            var dv = _dvi_ser.GetById(item.Id);
                            if (dv != null)
                            {
                                if (dv.TenDonVi.Contains(group.Key))
                                {

                                }
                            }
                            else
                            {
                                i++;

                                var phieu = _pcongtac_ser.GetById(item.MaPCT);
                                var thuocTinhList = phienLamViecThuocTinhPhienRepository.GetByPhienLamViecId(item.Id);

                                plv_ThuocTinhPhien catDien = null;
                                plv_ThuocTinhPhien tiepDia = null;
                                plv_ThuocTinhPhien tinhChat = null;

                                foreach (var thuocTinhItem in thuocTinhList)
                                {
                                    try
                                    {
                                        if (catDien == null)
                                        {
                                            catDien = thuocTinhPhienRepository.GetByLoaiThuocTinh(3).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        catDien = null;
                                    }

                                    try
                                    {
                                        if (tinhChat == null)
                                        {
                                            tinhChat = thuocTinhPhienRepository.GetByLoaiThuocTinh(5).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        tinhChat = null;
                                    }

                                    try
                                    {
                                        if (tiepDia == null)
                                        {
                                            tiepDia = thuocTinhPhienRepository.GetByLoaiThuocTinh(4).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        tiepDia = null;
                                    }
                                }

                                rowTerminal = sheet.CreateRow(rowIndex);

                                rowTerminal.CreateCell(0).SetCellValue(i);
                                rowTerminal.Cells[0].CellStyle = stylerow;

                                rowTerminal.CreateCell(1).SetCellValue(item.NoiDung);
                                rowTerminal.Cells[1].CellStyle = stylerow;

                                rowTerminal.CreateCell(2).SetCellValue(item.TenPhongBan);
                                rowTerminal.Cells[2].CellStyle = stylerow;

                                rowTerminal.CreateCell(3).SetCellValue(item.DiaDiem);
                                rowTerminal.Cells[3].CellStyle = stylerow;

                                if (item.GioBd.Date != item.GioKt.Date)
                                {
                                    rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioBd) + "-" + String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[4].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:HH\\:mm}", item.GioBd) + "-" + String.Format("{0:HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[4].CellStyle = stylerow;
                                }

                                //rowTerminal.CreateCell(5).SetCellValue(String.Format("{0:dd/MM/yyyy}", item.NgayLamViec));
                                //rowTerminal.Cells[5].CellStyle = stylerow;

                                rowTerminal.CreateCell(5).SetCellValue(item.NguoiDuyet_SoPa);
                                rowTerminal.Cells[5].CellStyle = stylerow;

                                rowTerminal.CreateCell(6).SetCellValue(item.NguoiChiHuy);
                                rowTerminal.Cells[6].CellStyle = stylerow;

                                rowTerminal.CreateCell(7).SetCellValue(item.GiamSatVien);
                                rowTerminal.Cells[7].CellStyle = stylerow;

                                rowTerminal.CreateCell(8).SetCellValue(item.NguoiKiemSoat);
                                rowTerminal.Cells[8].CellStyle = stylerow;

                                rowTerminal.CreateCell(9).SetCellValue(item.NguoiKiemTraPhieu);
                                rowTerminal.Cells[9].CellStyle = stylerow;

                                rowTerminal.CreateCell(10).SetCellValue(item.LanhDaoTrucBan);
                                rowTerminal.Cells[10].CellStyle = stylerow;

                                if (phieu != null)
                                {
                                    rowTerminal.CreateCell(11).SetCellValue(phieu.plv_LoaiPhieu.TenLP);
                                    rowTerminal.Cells[11].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(11).SetCellValue("");
                                    rowTerminal.Cells[11].CellStyle = stylerow;
                                }

                                if (catDien != null)
                                {
                                    rowTerminal.CreateCell(12).SetCellValue(catDien.TenThuocTinh);
                                    rowTerminal.Cells[12].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(12).SetCellValue("");
                                    rowTerminal.Cells[12].CellStyle = stylerow;
                                }

                                if (tiepDia != null)
                                {
                                    rowTerminal.CreateCell(13).SetCellValue(tiepDia.TenThuocTinh);
                                    rowTerminal.Cells[13].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(13).SetCellValue("");
                                    rowTerminal.Cells[13].CellStyle = stylerow;
                                }

                                if (tinhChat != null)
                                {
                                    rowTerminal.CreateCell(14).SetCellValue(tinhChat.TenThuocTinh);
                                    rowTerminal.Cells[14].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(14).SetCellValue("");
                                    rowTerminal.Cells[14].CellStyle = stylerow;
                                }

                                if (item.TrangThai == 1)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Vừa tạo");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else if (item.TrangThai == 2)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Đã duyệt");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else if (item.TrangThai == 3)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Đã xong");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else if (item.TrangThai == 5)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Chuyển hoàn");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else if (item.TrangThai == 7)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Hủy bỏ");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }

                                if (item.LoaiPhieu == 1)
                                {
                                    rowTerminal.CreateCell(16).SetCellValue("Phiếu công tác");
                                    rowTerminal.Cells[16].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(16).SetCellValue("Lệnh công tác");
                                    rowTerminal.Cells[16].CellStyle = stylerow;
                                }

                                if (item.IsKiemTra != null && item.IsKiemTra == true)
                                {
                                    string str = "Đã kiểm tra";
                                    if (item.NgayGioKT != null)
                                    {
                                        str = str + " " + String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayGioKT);
                                    }
                                    rowTerminal.CreateCell(17).SetCellValue(str);
                                    rowTerminal.Cells[17].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(17).SetCellValue("Chưa kiểm tra");
                                    rowTerminal.Cells[17].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(18).SetCellValue(String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayKetThuc));
                                rowTerminal.Cells[18].CellStyle = stylerow;

                                rowTerminal.CreateCell(19).SetCellValue(item.NguoiKetThuc);
                                rowTerminal.Cells[19].CellStyle = stylerow;

                                rowTerminal.CreateCell(20).SetCellValue("");
                                rowTerminal.Cells[20].CellStyle = stylerow;

                                rowTerminal.CreateCell(21).SetCellValue(item.SoPhieu);
                                rowTerminal.Cells[21].CellStyle = stylerow;

                                rowIndex++;
                            }
                        }
                    }
                }



                ICellStyle styleFooter2 = workbook.CreateCellStyle();
                IFont fontF2 = workbook.CreateFont();
                fontF2.FontName = "Times New Roman";
                fontF2.Boldweight = (short)FontBoldWeight.Bold;
                fontF2.IsItalic = true;
                fontF2.FontHeightInPoints = 12;
                styleFooter2.SetFont(fontF2);
                styleFooter2.VerticalAlignment = VerticalAlignment.Top;
                styleFooter2.Alignment = HorizontalAlignment.Left;
                styleFooter2.WrapText = true;

                ICellStyle styleFooter3 = workbook.CreateCellStyle();
                IFont fontF3 = workbook.CreateFont();
                fontF3.FontName = "Times New Roman";
                fontF3.FontHeightInPoints = 12;
                styleFooter3.SetFont(fontF3);
                styleFooter3.VerticalAlignment = VerticalAlignment.Top;
                styleFooter3.Alignment = HorizontalAlignment.Left;
                styleFooter3.WrapText = true;

                //Footer
                ICellStyle styleFooter5 = workbook.CreateCellStyle();
                IFont fontF5 = workbook.CreateFont();
                fontF5.FontName = "Times New Roman";
                fontF5.Boldweight = (short)FontBoldWeight.Bold;
                fontF5.FontHeightInPoints = 12;
                styleFooter5.SetFont(fontF5);
                styleFooter5.VerticalAlignment = VerticalAlignment.Top;
                styleFooter5.Alignment = HorizontalAlignment.Center;
                styleFooter5.WrapText = true;

                if (donviId == null)
                {
                    //Dành cho đơn vị cấp trên
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Như trên;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để b/c); (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - PGĐ KTSX-AT; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - P4, B2; BCBSX BLV; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - 14 Điện lực, TTTNĐ, XN Cao thế; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(4).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[0].CellStyle = styleFooter5;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(6).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("Phùng Hữu Đương");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;
                }
                else
                {
                    //Dành cho đơn vị cấp dưới
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("KTVATCT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("TP.KH-KT-AT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Phòng AT Cty (để b/cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để báo cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các PGĐ (để chỉ đạo);;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các Phòng, Đội (để thực hiện);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, KH-KT-AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;
                }

                #endregion


                #region export
                // Save the Excel spreadsheet to a MemoryStream and return it to the client
                using (var exportData = new MemoryStream())
                {
                    Response.Clear();
                    workbook.Write(exportData);
                    string strFileName = "";
                    if (donviId == null)
                    {
                        strFileName = string.Format("Ctybc-LLV.Tuan_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    else
                    {
                        strFileName = string.Format("Dvibc-LLV.Tuan_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    string saveAsFileName = strFileName;

                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", saveAsFileName));
                    //Response.BinaryWrite(exportData.GetBuffer());
                    Response.BinaryWrite(exportData.ToArray());
                    Response.End();
                }

                this.SetNotification("Xuất dữ liệu thành công!", NotificationEnumeration.Success, true);
                #endregion

            }
            catch (Exception ex)
            {
                this.SetNotification("Không xuất được dữ liệu: " + ex.Message, NotificationEnumeration.Error, true);
            }
        }

        private void ExportExcelFromList_Cty_Download(IEnumerable<PhienLVModel> list, int tcphien, string DateFrom, string DateTo)
        {
            try
            {
                string donviId = Session["DonViID"].ToString();
                var donVi = _dvi_ser.GetById(donviId);
                var donViCha = _dvi_ser.List().Where(x => x.Id == donVi.DviCha).FirstOrDefault();

                IWorkbook workbook = new XSSFWorkbook();
                ISheet sheet = workbook.CreateSheet("Bc-Tuần (M-Dvi)");

                // Thay đổi kích thước từng cột
                sheet.SetColumnWidth(0, 1500);
                sheet.SetColumnWidth(1, 6000);
                sheet.SetColumnWidth(2, 3500);
                sheet.SetColumnWidth(3, 5000);
                sheet.SetColumnWidth(4, 3000);
                sheet.SetColumnWidth(5, 3000);
                sheet.SetColumnWidth(6, 4500);
                sheet.SetColumnWidth(7, 4500);
                sheet.SetColumnWidth(8, 4500);
                sheet.SetColumnWidth(9, 4500);
                sheet.SetColumnWidth(10, 4500);
                sheet.SetColumnWidth(11, 3000);
                sheet.SetColumnWidth(12, 3000);
                sheet.SetColumnWidth(13, 3000);
                sheet.SetColumnWidth(14, 3000);
                sheet.SetColumnWidth(15, 4500);
                sheet.SetColumnWidth(16, 4500);
                sheet.SetColumnWidth(17, 7000);
                sheet.SetColumnWidth(18, 7000);


                //gop cell
                if (donviId == null)
                {
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:D1"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G1:J1"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:D2"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G2:J2"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A3:D3"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G3:J3"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A5:D5"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G5:J5"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A6:J6"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:D7"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:J7"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:J8"));
                    //sheet.AddMergedRegion(CellRangeAddress.ValueOf("A9:J9"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A10:J10"));
                }
                else
                {
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:D1"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G1:J1"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:D2"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G2:J2"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A4:D4"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G4:J4"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A5:D5"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G5:J5"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A6:J6"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:J7"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:J8"));
                    //sheet.AddMergedRegion(CellRangeAddress.ValueOf("A9:J9"));
                }



                IPrintSetup ps = sheet.PrintSetup;
                ps.Landscape = true;
                ps.PaperSize = (short)PaperSize.A4_Small;
                sheet.FitToPage = true;
                sheet.PrintSetup.FitWidth = 1;

                var rowIndex = 0;
                #region Report

                ICellStyle styleHeader1 = workbook.CreateCellStyle();
                IFont font1 = workbook.CreateFont();
                font1.FontName = "Times New Roman";
                font1.Boldweight = (short)FontBoldWeight.Bold;
                font1.FontHeightInPoints = 13;
                styleHeader1.SetFont(font1);
                styleHeader1.VerticalAlignment = VerticalAlignment.Top;
                styleHeader1.Alignment = HorizontalAlignment.Center;
                styleHeader1.WrapText = true;

                ICellStyle styleHeaderThuocTinh = workbook.CreateCellStyle();
                IFont fontThuocTinh = workbook.CreateFont();
                fontThuocTinh.FontName = "Times New Roman";
                fontThuocTinh.Boldweight = (short)FontBoldWeight.Normal;
                fontThuocTinh.FontHeightInPoints = 10;
                styleHeaderThuocTinh.SetFont(fontThuocTinh);
                styleHeaderThuocTinh.VerticalAlignment = VerticalAlignment.Top;
                styleHeaderThuocTinh.Alignment = HorizontalAlignment.Left;
                styleHeaderThuocTinh.WrapText = true;
                styleHeaderThuocTinh.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeaderThuocTinh.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;


                IRow rowTerminal = sheet.CreateRow(rowIndex);

                if (donViCha != null)
                {
                    rowTerminal.CreateCell(0).SetCellValue(donViCha.TenDonVi.ToUpper());
                }
                else
                {
                    rowTerminal.CreateCell(0).SetCellValue("");
                }

                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(6).SetCellValue("CỘNG HOÀ XÃ HỘI CHỦ NGHĨA VIỆT NAM");
                rowTerminal.Cells[1].CellStyle = styleHeader1;
                rowTerminal.CreateCell(17).SetCellValue("Phiếu công tác");
                rowTerminal.Cells[2].CellStyle = styleHeaderThuocTinh;
                rowTerminal.CreateCell(18).SetCellValue("Công việc hotline");
                rowTerminal.Cells[3].CellStyle = styleHeaderThuocTinh;


                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue(donVi.TenDonVi.ToUpper());
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(6).SetCellValue("Độc lập – Tự do – Hạnh phúc");
                rowTerminal.Cells[1].CellStyle = styleHeader1;
                rowTerminal.CreateCell(17).SetCellValue("Lệnh công tác");
                rowTerminal.Cells[2].CellStyle = styleHeaderThuocTinh;
                rowTerminal.CreateCell(18).SetCellValue("Công việc rửa sứ");
                rowTerminal.Cells[3].CellStyle = styleHeaderThuocTinh;

                //rowIndex++;
                //rowTerminal = sheet.CreateRow(rowIndex);
                //rowTerminal.CreateCell(0).SetCellValue("ĐIỆN LỰC HẢI PHÒNG");
                //rowTerminal.Cells[0].Row.Height = 350;
                //rowTerminal.Cells[0].CellStyle = styleHeader1;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(17).SetCellValue("Công việc cắt điện");
                rowTerminal.Cells[0].CellStyle = styleHeaderThuocTinh;

                // So van ban
                ICellStyle styleHeader2 = workbook.CreateCellStyle();
                IFont font3 = workbook.CreateFont();
                font3.FontName = "Times New Roman";
                font3.FontHeightInPoints = 13;
                styleHeader2.SetFont(font3);
                styleHeader2.VerticalAlignment = VerticalAlignment.Top;
                styleHeader2.Alignment = HorizontalAlignment.Center;
                styleHeader2.WrapText = true;

                ICellStyle styleHeader3 = workbook.CreateCellStyle();
                IFont font4 = workbook.CreateFont();
                font4.FontName = "Times New Roman";
                font4.FontHeightInPoints = 13;
                font4.IsItalic = true;
                styleHeader3.SetFont(font4);
                styleHeader3.VerticalAlignment = VerticalAlignment.Top;
                styleHeader3.Alignment = HorizontalAlignment.Center;
                styleHeader3.WrapText = true;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);

                if (donviId == null)
                {
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /PCHP-AT");
                }
                else
                {
                    string tenDvi = _dvi_ser.GetById(donviId).TenDonVi;
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /" + tenDvi + "-AT");
                }

                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader2;
                rowTerminal.CreateCell(6).SetCellValue(".........., ngày " + DateTime.Now.Day + " tháng " + DateTime.Now.Month + " năm " + DateTime.Now.Year + "   ");
                rowTerminal.Cells[1].CellStyle = styleHeader3;
                rowTerminal.CreateCell(17).SetCellValue("Công việc không cắt điện");
                rowTerminal.Cells[2].CellStyle = styleHeaderThuocTinh;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(17).SetCellValue("Công việc tiếp địa");
                rowTerminal.Cells[0].CellStyle = styleHeaderThuocTinh;


                //Thêm dòng về việc với cấp công ty
                if (donviId == null)
                {
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Về việc báo cáo lịch làm việc trên lưới điện");

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue(" tại hiện trường từ ngày " + DateFrom + " đến ngày " + DateTo + " năm " + DateTime.Now.Year);

                }

                if (donviId == null)
                {
                    //Tiêu đề đơn vị cấp trên
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);

                    rowTerminal.CreateCell(0).SetCellValue("Kính gửi: Ban An toàn- Tổng Công ty Điện lực miền Bắc.");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(17).SetCellValue("Công việc không tiếp địa");
                    rowTerminal.Cells[1].CellStyle = styleHeaderThuocTinh;

                    //sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 9));
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                }
                else
                {
                    // Tiêu đề đơn vị cấp dưới
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("BÁO CÁO LỊCH LÀM VIỆC TRÊN LƯỚI ĐIỆN TUẦN");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(17).SetCellValue("Công việc không tiếp địa");
                    rowTerminal.Cells[1].CellStyle = styleHeaderThuocTinh;

                    //Ngày tháng
                    ICellStyle styleHeader4 = workbook.CreateCellStyle();
                    IFont font5 = workbook.CreateFont();
                    font5.Boldweight = (short)FontBoldWeight.Bold;
                    font5.FontName = "Times New Roman";
                    font5.FontHeightInPoints = 13;
                    font5.IsItalic = true;
                    styleHeader4.SetFont(font5);
                    styleHeader4.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader4.Alignment = HorizontalAlignment.Center;
                    styleHeader4.WrapText = true;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Từ ngày " + DateFrom + " đến ngày " + DateTo);
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader4;
                    rowTerminal.CreateCell(17).SetCellValue("Công việc có tính chất phức tạp");
                    rowTerminal.Cells[1].CellStyle = styleHeaderThuocTinh;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    //rowTerminal.CreateCell(0).SetCellValue("Kính gửi: Phòng An toàn");
                    //rowTerminal.Cells[0].Row.Height = 350;
                    //rowTerminal.Cells[0].CellStyle = styleHeader4;
                    rowTerminal.CreateCell(17).SetCellValue("Công việc cần quay video");
                    rowTerminal.Cells[0].CellStyle = styleHeaderThuocTinh;

                    //rowIndex++;
                    //rowTerminal = sheet.CreateRow(rowIndex);
                }

                // Header
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);


                ICellStyle styleHeader = workbook.CreateCellStyle();
                IFont font = workbook.CreateFont();
                font.FontName = "Times New Roman";
                font.Boldweight = (short)FontBoldWeight.Bold;
                font.FontHeightInPoints = 11;
                styleHeader.SetFont(font);
                styleHeader.VerticalAlignment = VerticalAlignment.Top;
                styleHeader.Alignment = HorizontalAlignment.Center;
                styleHeader.WrapText = true;
                styleHeader.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;



                rowTerminal.CreateCell(0).SetCellValue("Công việc");
                rowTerminal.Cells[0].Row.Height = 2000;
                rowTerminal.Cells[0].CellStyle = styleHeader;

                rowTerminal.CreateCell(1).SetCellValue("Nội dung công việc");
                rowTerminal.Cells[1].CellStyle = styleHeader;

                rowTerminal.CreateCell(2).SetCellValue("Đơn vị làm công việc");
                rowTerminal.Cells[2].CellStyle = styleHeader;

                rowTerminal.CreateCell(3).SetCellValue("Địa điểm (vị trí) công tác");
                rowTerminal.Cells[3].CellStyle = styleHeader;

                rowTerminal.CreateCell(4).SetCellValue("Thời gian công tác");
                rowTerminal.Cells[4].CellStyle = styleHeader;


                rowTerminal.CreateCell(5).SetCellValue("Người duyệt phương án");
                rowTerminal.Cells[5].CellStyle = styleHeader;

                rowTerminal.CreateCell(6).SetCellValue("Người chỉ huy trực tiếp (số điện thoại DD)");
                rowTerminal.Cells[6].CellStyle = styleHeader;

                rowTerminal.CreateCell(7).SetCellValue("Người giám sát ATĐ (chức danh- số điện thoại DD)");
                rowTerminal.Cells[7].CellStyle = styleHeader;

                rowTerminal.CreateCell(8).SetCellValue("Người cho phép - SĐT");
                rowTerminal.Cells[8].CellStyle = styleHeader;

                rowTerminal.CreateCell(9).SetCellValue("Người kiểm tra PCT; LCT");
                rowTerminal.Cells[9].CellStyle = styleHeader;

                rowTerminal.CreateCell(10).SetCellValue("Lãnh đạo đơn vị kiểm tra kiểm soát - SĐT");
                rowTerminal.Cells[10].CellStyle = styleHeader;

                rowTerminal.CreateCell(11).SetCellValue("Phiếu/ Lệnh công tác");
                rowTerminal.Cells[11].CellStyle = styleHeader;

                rowTerminal.CreateCell(12).SetCellValue("Trạng thái cắt điện");
                rowTerminal.Cells[12].CellStyle = styleHeader;

                rowTerminal.CreateCell(13).SetCellValue("Trạng thái tiếp địa");
                rowTerminal.Cells[13].CellStyle = styleHeader;

                rowTerminal.CreateCell(14).SetCellValue("Tính chất phiên lv");
                rowTerminal.Cells[14].CellStyle = styleHeader;

                rowTerminal.CreateCell(15).SetCellValue("Lãnh đạo công việc");
                rowTerminal.Cells[15].CellStyle = styleHeader;

                rowTerminal.CreateCell(16).SetCellValue("Người cấp phiếu");
                rowTerminal.Cells[16].CellStyle = styleHeader;

                rowTerminal.CreateCell(17).SetCellValue("Loại phiếu");
                rowTerminal.Cells[17].CellStyle = styleHeader;

                rowTerminal.CreateCell(18).SetCellValue("Lãnh đạo đơn vị kiểm tra kiểm soát");
                rowTerminal.Cells[18].CellStyle = styleHeader;

                rowTerminal.CreateCell(19).SetCellValue("Ngày kết thúc");
                rowTerminal.Cells[19].CellStyle = styleHeader;

                rowTerminal.CreateCell(20).SetCellValue("Người kết thúc");
                rowTerminal.Cells[20].CellStyle = styleHeader;

                rowTerminal.CreateCell(21).SetCellValue("Số phiếu/lệnh");
                rowTerminal.Cells[21].CellStyle = styleHeader;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);


                ICellStyle styleHeader0 = workbook.CreateCellStyle();
                IFont font0 = workbook.CreateFont();
                font0.FontName = "Times New Roman";
                font0.Boldweight = (short)FontBoldWeight.Normal;
                font0.FontHeightInPoints = 9;
                styleHeader0.SetFont(font0);
                styleHeader0.VerticalAlignment = VerticalAlignment.Top;
                styleHeader0.Alignment = HorizontalAlignment.Center;
                styleHeader0.WrapText = true;
                styleHeader0.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader0.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                rowTerminal.CreateCell(0).SetCellValue(1);
                rowTerminal.Cells[0].Row.Height = 400;
                rowTerminal.Cells[0].CellStyle = styleHeader0;

                rowTerminal.CreateCell(1).SetCellValue(2);
                rowTerminal.Cells[1].CellStyle = styleHeader0;

                rowTerminal.CreateCell(2).SetCellValue(3);
                rowTerminal.Cells[2].CellStyle = styleHeader0;

                rowTerminal.CreateCell(3).SetCellValue(4);
                rowTerminal.Cells[3].CellStyle = styleHeader0;

                rowTerminal.CreateCell(4).SetCellValue(5);
                rowTerminal.Cells[4].CellStyle = styleHeader0;


                rowTerminal.CreateCell(5).SetCellValue(6);
                rowTerminal.Cells[5].CellStyle = styleHeader0;

                rowTerminal.CreateCell(6).SetCellValue(7);
                rowTerminal.Cells[6].CellStyle = styleHeader0;

                rowTerminal.CreateCell(7).SetCellValue(8);
                rowTerminal.Cells[7].CellStyle = styleHeader0;

                rowTerminal.CreateCell(8).SetCellValue(9);
                rowTerminal.Cells[8].CellStyle = styleHeader0;

                rowTerminal.CreateCell(9).SetCellValue(10);
                rowTerminal.Cells[9].CellStyle = styleHeader0;

                rowTerminal.CreateCell(10).SetCellValue(11);
                rowTerminal.Cells[10].CellStyle = styleHeader0;

                rowTerminal.CreateCell(11).SetCellValue(12);
                rowTerminal.Cells[11].CellStyle = styleHeader0;

                rowTerminal.CreateCell(12).SetCellValue(13);
                rowTerminal.Cells[12].CellStyle = styleHeader0;

                rowTerminal.CreateCell(13).SetCellValue(14);
                rowTerminal.Cells[13].CellStyle = styleHeader0;

                rowTerminal.CreateCell(14).SetCellValue(15);
                rowTerminal.Cells[14].CellStyle = styleHeader0;

                rowTerminal.CreateCell(15).SetCellValue(16);
                rowTerminal.Cells[15].CellStyle = styleHeader0;

                rowTerminal.CreateCell(15).SetCellValue(17);
                rowTerminal.Cells[15].CellStyle = styleHeader0;

                rowTerminal.CreateCell(16).SetCellValue(18);
                rowTerminal.Cells[16].CellStyle = styleHeader0;

                rowTerminal.CreateCell(17).SetCellValue(19);
                rowTerminal.Cells[17].CellStyle = styleHeader0;

                rowTerminal.CreateCell(18).SetCellValue(20);
                rowTerminal.Cells[18].CellStyle = styleHeader0;

                rowTerminal.CreateCell(19).SetCellValue(21);
                rowTerminal.Cells[19].CellStyle = styleHeader0;

                rowTerminal.CreateCell(20).SetCellValue(22);
                rowTerminal.Cells[20].CellStyle = styleHeader0;

                rowTerminal.CreateCell(21).SetCellValue(23);
                rowTerminal.Cells[21].CellStyle = styleHeader0;

                rowIndex++;

                int i = 0, j = 0, h = 0;

                ICellStyle stylerow = workbook.CreateCellStyle();
                IFont fontr = workbook.CreateFont();
                fontr.FontName = "Times New Roman";
                fontr.FontHeightInPoints = 11;

                stylerow.SetFont(fontr);
                stylerow.VerticalAlignment = VerticalAlignment.Top;
                stylerow.Alignment = HorizontalAlignment.Center;
                stylerow.WrapText = true;
                stylerow.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                ICellStyle styleFoote4 = workbook.CreateCellStyle();
                IFont fontF4 = workbook.CreateFont();
                fontF4.FontName = "Times New Roman";
                fontF4.Boldweight = (short)FontBoldWeight.Bold;
                fontF4.FontHeightInPoints = 12;
                styleFoote4.SetFont(fontF4);
                styleFoote4.VerticalAlignment = VerticalAlignment.Top;
                styleFoote4.Alignment = HorizontalAlignment.Left;
                styleFoote4.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                //styleFoote4.BorderDiagonalLineStyle = BorderStyle.Thin;
                styleFoote4.WrapText = true;

                ICellStyle styleTenDvi = workbook.CreateCellStyle();
                IFont fontFTenDvi = workbook.CreateFont();
                fontFTenDvi.FontName = "Times New Roman";
                fontFTenDvi.Boldweight = (short)FontBoldWeight.Bold;
                fontFTenDvi.FontHeightInPoints = 12;
                styleTenDvi.SetFont(fontFTenDvi);
                styleTenDvi.VerticalAlignment = VerticalAlignment.Top;
                styleTenDvi.Alignment = HorizontalAlignment.Left;
                styleTenDvi.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleTenDvi.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                //styleTenDvi.BorderDiagonalLineStyle = BorderStyle.Thin;
                styleTenDvi.WrapText = true;
                styleTenDvi.FillForegroundColor = IndexedColors.Yellow.Index;
                styleTenDvi.FillPattern = FillPattern.SolidForeground;

                //Footer
                ICellStyle styleFooter1 = workbook.CreateCellStyle();
                IFont fontF1 = workbook.CreateFont();
                fontF1.FontName = "Times New Roman";
                fontF1.Boldweight = (short)FontBoldWeight.Bold;
                fontF1.FontHeightInPoints = 12;
                styleFooter1.SetFont(fontF1);
                styleFooter1.VerticalAlignment = VerticalAlignment.Top;
                styleFooter1.Alignment = HorizontalAlignment.Center;
                styleFooter1.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.WrapText = true;


                var lstDonVi = _dvi_ser.ListByParentId(" ");
                foreach (var groupDay in list.GroupBy(x => x.NgayLamViec).OrderBy(o => o.Key))
                {
                    h++;
                    j = 0;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue(PhienLVRepository.GetDayOfWeek(groupDay.Key));
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFoote4;

                    rowTerminal.CreateCell(1).SetCellValue("");
                    rowTerminal.Cells[1].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(2).SetCellValue("");
                    rowTerminal.Cells[2].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(3).SetCellValue("");
                    rowTerminal.Cells[3].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(4).SetCellValue("");
                    rowTerminal.Cells[4].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(5).SetCellValue("");
                    rowTerminal.Cells[5].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(6).SetCellValue("");
                    rowTerminal.Cells[6].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(7).SetCellValue("");
                    rowTerminal.Cells[7].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(8).SetCellValue("");
                    rowTerminal.Cells[8].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(9).SetCellValue("");
                    rowTerminal.Cells[9].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(10).SetCellValue("");
                    rowTerminal.Cells[10].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(11).SetCellValue("");
                    rowTerminal.Cells[11].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(12).SetCellValue("");
                    rowTerminal.Cells[12].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(13).SetCellValue("");
                    rowTerminal.Cells[13].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(14).SetCellValue("");
                    rowTerminal.Cells[14].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(15).SetCellValue("");
                    rowTerminal.Cells[15].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(16).SetCellValue("");
                    rowTerminal.Cells[16].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(17).SetCellValue("");
                    rowTerminal.Cells[17].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(18).SetCellValue("");
                    rowTerminal.Cells[18].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(19).SetCellValue("");
                    rowTerminal.Cells[19].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(20).SetCellValue("");
                    rowTerminal.Cells[20].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(21).SetCellValue("");
                    rowTerminal.Cells[21].CellStyle = styleFoote4;
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 21));

                    rowIndex++;

                    // Add data rows

                    //Lay toan bo danh sach phien lam viec
                    // Add data rows
                    var lstTempPLviec = groupDay.ToList();
                    if (donviId == null)
                    {
                        foreach (var item in lstDonVi)
                        {
                            var listTenDvi = groupDay.Select(x => x.TenDonVi).ToList();
                            if (!listTenDvi.Contains(item.TenDonVi))
                            {
                                lstTempPLviec.Add(new PhienLVModel
                                {
                                    Id = 0,
                                    TenDonVi = item.TenDonVi,
                                    DiaDiem = "",
                                    TenPhongBan = "",
                                    GiamSatVien = "",
                                    LanhDaoTrucBan = "",
                                    NgayDuyet = DateTime.Now,
                                    GioBd = DateTime.Now,
                                    GioKt = DateTime.Now,
                                    PhongBanID = 0,
                                    LyDoThayDoi = "",
                                    NgayLamViec = DateTime.Now,
                                    NgaySua = DateTime.Now,
                                    NgayTao = DateTime.Now,
                                    NoiDung = "",
                                    ViTri = item.ViTri.Value,
                                    SDT = item.SDT
                                });
                            }

                        }
                    }

                    //foreach (var group in lstTempPLviec.OrderBy(p => p.ViTri).GroupBy(x => x.TenDonVi))
                    //{
                    //    var sdt = group.FirstOrDefault() != null ? group.FirstOrDefault().SDT : "";

                    //    j++;
                    //    rowTerminal = sheet.CreateRow(rowIndex);
                    //    rowTerminal.CreateCell(0).SetCellValue(_plviec_ser.ConvertSoSangLaMa(j));
                    //    rowTerminal.Cells[0].Row.Height = 350;
                    //    if (!String.IsNullOrEmpty(sdt))
                    //    {
                    //        rowTerminal.CreateCell(1).SetCellValue(group.Key + ": " + sdt);
                    //    }
                    //    else
                    //    {
                    //        rowTerminal.CreateCell(1).SetCellValue(group.Key);
                    //    }

                    //    rowTerminal.Cells[0].CellStyle = styleFooter1;
                    //    rowTerminal.Cells[1].CellStyle = styleTenDvi;

                    //    rowTerminal.CreateCell(2).SetCellValue("");
                    //    rowTerminal.Cells[2].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(3).SetCellValue("");
                    //    rowTerminal.Cells[3].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(4).SetCellValue("");
                    //    rowTerminal.Cells[4].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(5).SetCellValue("");
                    //    rowTerminal.Cells[5].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(6).SetCellValue("");
                    //    rowTerminal.Cells[6].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(7).SetCellValue("");
                    //    rowTerminal.Cells[7].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(8).SetCellValue("");
                    //    rowTerminal.Cells[8].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(9).SetCellValue("");
                    //    rowTerminal.Cells[9].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(10).SetCellValue("");
                    //    rowTerminal.Cells[10].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(11).SetCellValue("");
                    //    rowTerminal.Cells[11].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(12).SetCellValue("");
                    //    rowTerminal.Cells[12].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(13).SetCellValue("");
                    //    rowTerminal.Cells[13].CellStyle = styleFooter1;
                    //    rowTerminal.CreateCell(14).SetCellValue("");
                    //    rowTerminal.Cells[14].CellStyle = styleFooter1;
                    //    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 14));

                    //    if (group.Count() == 1 && string.IsNullOrEmpty(group.FirstOrDefault().DiaDiem))
                    //    {
                    //        rowTerminal.CreateCell(15).SetCellValue("0");
                    //        rowTerminal.Cells[15].CellStyle = styleHeader;
                    //    }
                    //    else
                    //    {
                    //        rowTerminal.CreateCell(15).SetCellValue(group.Count());
                    //        rowTerminal.Cells[15].CellStyle = styleHeader;
                    //    }

                    //    rowIndex++;


                    //}

                    foreach (var item in lstTempPLviec)
                    {

                        if (!string.IsNullOrEmpty(item.NoiDung)
                            && !string.IsNullOrEmpty(item.TenPhongBan)
                            && !string.IsNullOrEmpty(item.DiaDiem)
                            )
                        {
                            var dv = _dvi_ser.GetById(item.Id);
                            if (dv != null)
                            {
                                //if (dv.TenDonVi.Contains(group.Key))
                                //{

                                //}
                            }
                            else
                            {
                                i++;

                                var phieu = _pcongtac_ser.GetById(item.MaPCT);

                                rowTerminal = sheet.CreateRow(rowIndex);

                                rowTerminal.CreateCell(0).SetCellValue(i);
                                rowTerminal.Cells[0].CellStyle = stylerow;

                                rowTerminal.CreateCell(1).SetCellValue(item.NoiDung);
                                rowTerminal.Cells[1].CellStyle = stylerow;

                                rowTerminal.CreateCell(2).SetCellValue(item.TenPhongBan);
                                rowTerminal.Cells[2].CellStyle = stylerow;

                                rowTerminal.CreateCell(3).SetCellValue(item.DiaDiem);
                                rowTerminal.Cells[3].CellStyle = stylerow;

                                if (item.GioBd.Date != item.GioKt.Date)
                                {
                                    rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioBd) + "-" + String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[4].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:HH\\:mm}", item.GioBd) + "-" + String.Format("{0:HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[4].CellStyle = stylerow;
                                }

                                //rowTerminal.CreateCell(5).SetCellValue(String.Format("{0:dd/MM/yyyy}", item.NgayLamViec));
                                //rowTerminal.Cells[5].CellStyle = stylerow;

                                rowTerminal.CreateCell(5).SetCellValue(item.NguoiDuyet_SoPa);
                                rowTerminal.Cells[5].CellStyle = stylerow;

                                rowTerminal.CreateCell(6).SetCellValue(item.NguoiChiHuy);
                                rowTerminal.Cells[6].CellStyle = stylerow;

                                rowTerminal.CreateCell(7).SetCellValue(item.GiamSatVien);
                                rowTerminal.Cells[7].CellStyle = stylerow;

                                rowTerminal.CreateCell(8).SetCellValue(item.NguoiKiemSoat);
                                rowTerminal.Cells[8].CellStyle = stylerow;

                                rowTerminal.CreateCell(9).SetCellValue(item.NguoiKiemTraPhieu);
                                rowTerminal.Cells[9].CellStyle = stylerow;

                                rowTerminal.CreateCell(10).SetCellValue(item.LanhDaoTrucBan);
                                rowTerminal.Cells[10].CellStyle = stylerow;

                                if (phieu != null)
                                {
                                    rowTerminal.CreateCell(11).SetCellValue(phieu.plv_LoaiPhieu.TenLP);
                                    rowTerminal.Cells[11].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(11).SetCellValue("");
                                    rowTerminal.Cells[11].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(12).SetCellValue("Công việc cắt điện");
                                rowTerminal.Cells[12].CellStyle = stylerow;

                                rowTerminal.CreateCell(13).SetCellValue("Công việc tiếp địa");
                                rowTerminal.Cells[13].CellStyle = stylerow;

                                rowTerminal.CreateCell(14).SetCellValue("Công việc có tính chất phức tạp");
                                rowTerminal.Cells[14].CellStyle = stylerow;

                                rowTerminal.CreateCell(15).SetCellValue("Phùng Đình Ánh - 0968155499");
                                rowTerminal.Cells[15].CellStyle = stylerow;

                                rowTerminal.CreateCell(16).SetCellValue("Hồ Thị Hương - 0369059727");
                                rowTerminal.Cells[16].CellStyle = stylerow;

                                if (item.LoaiPhieu == 1)
                                {
                                    rowTerminal.CreateCell(17).SetCellValue("Phiếu công tác");
                                    rowTerminal.Cells[17].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(17).SetCellValue("Lệnh công tác");
                                    rowTerminal.Cells[17].CellStyle = stylerow;
                                }

                                if (item.IsKiemTra != null && item.IsKiemTra == true)
                                {
                                    string str = "Đã kiểm tra";
                                    if (item.NgayGioKT != null)
                                    {
                                        str = str + " " + String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayGioKT);
                                    }
                                    rowTerminal.CreateCell(18).SetCellValue(str);
                                    rowTerminal.Cells[18].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(18).SetCellValue("Chưa kiểm tra");
                                    rowTerminal.Cells[18].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(19).SetCellValue(String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayKetThuc));
                                rowTerminal.Cells[19].CellStyle = stylerow;

                                rowTerminal.CreateCell(20).SetCellValue(item.NguoiKetThuc);
                                rowTerminal.Cells[20].CellStyle = stylerow;

                                rowTerminal.CreateCell(21).SetCellValue(item.SoPhieu);
                                rowTerminal.Cells[21].CellStyle = stylerow;

                                rowIndex++;
                            }
                        }
                    }

                }



                ICellStyle styleFooter2 = workbook.CreateCellStyle();
                IFont fontF2 = workbook.CreateFont();
                fontF2.FontName = "Times New Roman";
                fontF2.Boldweight = (short)FontBoldWeight.Bold;
                fontF2.IsItalic = true;
                fontF2.FontHeightInPoints = 12;
                styleFooter2.SetFont(fontF2);
                styleFooter2.VerticalAlignment = VerticalAlignment.Top;
                styleFooter2.Alignment = HorizontalAlignment.Left;
                styleFooter2.WrapText = true;

                ICellStyle styleFooter3 = workbook.CreateCellStyle();
                IFont fontF3 = workbook.CreateFont();
                fontF3.FontName = "Times New Roman";
                fontF3.FontHeightInPoints = 12;
                styleFooter3.SetFont(fontF3);
                styleFooter3.VerticalAlignment = VerticalAlignment.Top;
                styleFooter3.Alignment = HorizontalAlignment.Left;
                styleFooter3.WrapText = true;

                //Footer
                ICellStyle styleFooter5 = workbook.CreateCellStyle();
                IFont fontF5 = workbook.CreateFont();
                fontF5.FontName = "Times New Roman";
                fontF5.Boldweight = (short)FontBoldWeight.Bold;
                fontF5.FontHeightInPoints = 12;
                styleFooter5.SetFont(fontF5);
                styleFooter5.VerticalAlignment = VerticalAlignment.Top;
                styleFooter5.Alignment = HorizontalAlignment.Center;
                styleFooter5.WrapText = true;

                if (donviId == null)
                {
                    //Dành cho đơn vị cấp trên
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Như trên;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để b/c); (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - PGĐ KTSX-AT; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - P4, B2; BCBSX BLV; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - 14 Điện lực, TTTNĐ, XN Cao thế; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(4).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[0].CellStyle = styleFooter5;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(6).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("Phùng Hữu Đương");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;
                }
                else
                {
                    //Dành cho đơn vị cấp dưới
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("KTVATCT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("TP.KH-KT-AT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Phòng AT Cty (để b/cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để báo cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các PGĐ (để chỉ đạo);;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các Phòng, Đội (để thực hiện);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, KH-KT-AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;
                }

                #endregion


                #region export
                // Save the Excel spreadsheet to a MemoryStream and return it to the client
                using (var exportData = new MemoryStream())
                {
                    Response.Clear();
                    workbook.Write(exportData);
                    string strFileName = "";
                    if (donviId == null)
                    {
                        strFileName = string.Format("Ctybc-LLV.Tuan_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    else
                    {
                        strFileName = string.Format("Dvibc-LLV.Tuan_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    string saveAsFileName = strFileName;

                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", saveAsFileName));
                    //Response.BinaryWrite(exportData.GetBuffer());
                    Response.BinaryWrite(exportData.ToArray());
                    Response.End();
                }

                this.SetNotification("Xuất dữ liệu thành công!", NotificationEnumeration.Success, true);
                #endregion

            }
            catch (Exception ex)
            {
                this.SetNotification("Không xuất được dữ liệu: " + ex.Message, NotificationEnumeration.Error, true);
            }
        }

        public ActionResult DownloadExportTuan_Cty()
        {
            List<PhienLVModel> modelTotal = new List<PhienLVModel>();
            DateTime dts = new DateTime();
            DateTime dte = new DateTime();
            PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);

            PhienLVModel item = new PhienLVModel();
            item.NoiDung = "Thay công tơ định kỳ 1 pha";
            item.TenPhongBan = "ĐỘI SX1";
            item.DiaDiem = "lưới hạ thế thuộc TBA Xóm Ngau";
            item.GioBd = new DateTime(2018, 06, 15, 06, 30, 00);
            item.GioKt = new DateTime(2018, 06, 15, 11, 30, 00);
            item.NguoiDuyet = "Ngô Đức Phong - 0986888033";
            item.NguoiChiHuy = "Lê Ngọc Hà - 0968055666";
            item.GiamSatVien = "Trần Thị Phương Thảo - 0915080976";
            item.NguoiKiemSoat = "Hà Văn Thái - 01654223325";
            item.NguoiKiemTraPhieu = "Nguyễn Công Huân - 0978252000";
            item.LanhDaoTrucBan = "Dương Thủy Bình - 0968557888";
            item.NguoiDuyet_SoPa = "Phạm Thị Kim Chi - 01653402039";
            item.LanhDaoCongViec = "Phùng Đình Ánh - 0968155499";
            item.NguoiCapPhieu = "Hồ Thị Hương - 0369059727";
            //item.t
            item.MaPCT = 2;
            item.TT_Phien = 2;
            item.NgayLamViec = dts;


            modelTotal.Add(item);

            item = new PhienLVModel()
            {
                Id = 0,
                TenDonVi = "",
                DiaDiem = "",
                TenPhongBan = "",
                GiamSatVien = "",
                LanhDaoTrucBan = "",
                NgayDuyet = DateTime.Now,
                GioBd = DateTime.Now,
                GioKt = DateTime.Now,
                PhongBanID = 0,
                LyDoThayDoi = "",
                NgayLamViec = dts.AddDays(1),
                NgaySua = DateTime.Now,
                NgayTao = DateTime.Now,
                NoiDung = "",
                ViTri = 0,
                SDT = ""
            };

            modelTotal.Add(item);

            item = new PhienLVModel()
            {
                Id = 0,
                TenDonVi = "",
                DiaDiem = "",
                TenPhongBan = "",
                GiamSatVien = "",
                LanhDaoTrucBan = "",
                NgayDuyet = DateTime.Now,
                GioBd = DateTime.Now,
                GioKt = DateTime.Now,
                PhongBanID = 0,
                LyDoThayDoi = "",
                NgayLamViec = dts.AddDays(2),
                NgaySua = DateTime.Now,
                NgayTao = DateTime.Now,
                NoiDung = "",
                ViTri = 0,
                SDT = ""
            };

            modelTotal.Add(item);

            item = new PhienLVModel()
            {
                Id = 0,
                TenDonVi = "",
                DiaDiem = "",
                TenPhongBan = "",
                GiamSatVien = "",
                LanhDaoTrucBan = "",
                NgayDuyet = DateTime.Now,
                GioBd = DateTime.Now,
                GioKt = DateTime.Now,
                PhongBanID = 0,
                LyDoThayDoi = "",
                NgayLamViec = dts.AddDays(3),
                NgaySua = DateTime.Now,
                NgayTao = DateTime.Now,
                NoiDung = "",
                ViTri = 0,
                SDT = ""
            };

            modelTotal.Add(item);

            item = new PhienLVModel()
            {
                Id = 0,
                TenDonVi = "",
                DiaDiem = "",
                TenPhongBan = "",
                GiamSatVien = "",
                LanhDaoTrucBan = "",
                NgayDuyet = DateTime.Now,
                GioBd = DateTime.Now,
                GioKt = DateTime.Now,
                PhongBanID = 0,
                LyDoThayDoi = "",
                NgayLamViec = dts.AddDays(4),
                NgaySua = DateTime.Now,
                NgayTao = DateTime.Now,
                NoiDung = "",
                ViTri = 0,
                SDT = ""
            };

            modelTotal.Add(item);

            item = new PhienLVModel()
            {
                Id = 0,
                TenDonVi = "",
                DiaDiem = "",
                TenPhongBan = "",
                GiamSatVien = "",
                LanhDaoTrucBan = "",
                NgayDuyet = DateTime.Now,
                GioBd = DateTime.Now,
                GioKt = DateTime.Now,
                PhongBanID = 0,
                LyDoThayDoi = "",
                NgayLamViec = dts.AddDays(5),
                NgaySua = DateTime.Now,
                NgayTao = DateTime.Now,
                NoiDung = "",
                ViTri = 0,
                SDT = ""
            };

            modelTotal.Add(item);

            item = new PhienLVModel()
            {
                Id = 0,
                TenDonVi = "",
                DiaDiem = "",
                TenPhongBan = "",
                GiamSatVien = "",
                LanhDaoTrucBan = "",
                NgayDuyet = DateTime.Now,
                GioBd = DateTime.Now,
                GioKt = DateTime.Now,
                PhongBanID = 0,
                LyDoThayDoi = "",
                NgayLamViec = dts.AddDays(6),
                NgaySua = DateTime.Now,
                NgayTao = DateTime.Now,
                NoiDung = "",
                ViTri = 0,
                SDT = ""
            };

            modelTotal.Add(item);

            ExportExcelFromList_Cty_Download(modelTotal, 0, dts.ToString("dd/MM/yyyy"), dte.ToString("dd/MM/yyyy"));

            DisposeAll();

            return View();
        }

        public ActionResult Export_Cty(string filter, int tcphien, int trangThai, string DateFrom, string DateTo, string DonViId, int PhongBanId, bool? isExportExcel)
        {
            filter = filter.ToUpper();
            //if (PhongBanId == "null")
            //    PhongBanId = "";

            string donviId = null;
            try
            {
                donviId = Session["DonViID"].ToString();
            }
            catch { }

            if (DonViId == "PA")
                DonViId = "";

            if (string.IsNullOrEmpty(DateFrom) && string.IsNullOrEmpty(DateTo))
            {
                DateTime dts = new DateTime();
                DateTime dte = new DateTime();
                PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);
                DateFrom = string.Format("{0:dd/MM/yyyy}", dts.Date);
                DateTo = string.Format("{0:dd/MM/yyyy}", dte.Date);
            }

            List<PhienLVModel> modelTotal = new List<PhienLVModel>();
            List<PhienLVModel> model = new List<PhienLVModel>();

            List<string> lstdv = new List<string>();
            if (donviId == null)
            {
                lstdv = DonViRepository.GetAllDonViID(null);
            }
            else
            {
                if (string.IsNullOrEmpty(DonViId))
                {
                    lstdv = DonViRepository.GetAllDonViID(null);
                }
                else
                {
                    lstdv = DonViRepository.GetAllDonViID(DonViId);
                }
            }


            if (lstdv.Count() > 0)
            {
                foreach (string item in lstdv)
                {
                    model = _plviec_ser.ExportPhienLv(filter, tcphien, trangThai, DateFrom, DateTo, item.ToString(), PhongBanId).ToList();
                    foreach (var it in model)
                    {
                        modelTotal.Add(it);
                    }
                }
            }

            if (isExportExcel ?? false)
                ExportExcelFromList_Cty(modelTotal, tcphien, DateFrom, DateTo);

            return View();
        }

        #endregion

        #region ExportToExcelBS Theo mẫu NPC
        private void ExportExcelFromListBS(IEnumerable<PhienLVModel> list, string DateFrom)
        {
            try
            {
                string donviId = null;
                try
                {
                    donviId = Session["DonViID"].ToString();
                }
                catch { }

                var donVi = _dvi_ser.GetById(donviId);
                var donViCha = _dvi_ser.List().Where(x => x.Id == donVi.DviCha).FirstOrDefault();

                IWorkbook workbook = new XSSFWorkbook();
                ISheet sheet = workbook.CreateSheet("Report");

                // Thay đổi kích thước từng cột
                sheet.SetColumnWidth(0, 1500);
                sheet.SetColumnWidth(1, 6000);
                sheet.SetColumnWidth(2, 3000);
                sheet.SetColumnWidth(3, 5000);
                sheet.SetColumnWidth(4, 3000);
                sheet.SetColumnWidth(5, 3000);
                sheet.SetColumnWidth(6, 4500);
                sheet.SetColumnWidth(7, 4500);
                sheet.SetColumnWidth(8, 4500);
                sheet.SetColumnWidth(9, 4500);
                sheet.SetColumnWidth(10, 4500);
                sheet.SetColumnWidth(11, 3000);
                sheet.SetColumnWidth(12, 3000);
                sheet.SetColumnWidth(13, 3000);
                sheet.SetColumnWidth(14, 3000);
                sheet.SetColumnWidth(15, 3000);


                //gop cell
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:D1"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G1:J1"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:D2"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G2:J2"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A3:D3"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G3:J3"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G4:J4"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A4:D4"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A5:D5"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("G5:J5"));

                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A6:J6"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:J7"));
                sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:J8"));

                IPrintSetup ps = sheet.PrintSetup;
                ps.Landscape = true;
                ps.PaperSize = (short)PaperSize.A4_Small;
                sheet.FitToPage = true;
                sheet.PrintSetup.FitWidth = 1;

                var rowIndex = 0;
                #region Report

                ICellStyle styleHeader1 = workbook.CreateCellStyle();
                IFont font1 = workbook.CreateFont();
                font1.FontName = "Times New Roman";
                font1.Boldweight = (short)FontBoldWeight.Bold;
                font1.FontHeightInPoints = 13;
                styleHeader1.SetFont(font1);
                styleHeader1.VerticalAlignment = VerticalAlignment.Top;
                styleHeader1.Alignment = HorizontalAlignment.Center;
                styleHeader1.WrapText = true;


                IRow rowTerminal = sheet.CreateRow(rowIndex);

                if (donViCha != null)
                {
                    rowTerminal.CreateCell(0).SetCellValue(donViCha.TenDonVi.ToUpper());
                }
                else
                {
                    rowTerminal.CreateCell(0).SetCellValue("");
                }

                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(6).SetCellValue("CỘNG HOÀ XÃ HỘI CHỦ NGHĨA VIỆT NAM");
                rowTerminal.Cells[1].CellStyle = styleHeader1;



                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue(donVi.TenDonVi.ToUpper());
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(6).SetCellValue("Độc lập – Tự do – Hạnh phúc");
                rowTerminal.Cells[1].CellStyle = styleHeader1;

                //rowIndex++;
                //rowTerminal = sheet.CreateRow(rowIndex);
                //rowTerminal.CreateCell(0).SetCellValue("ĐIỆN LỰC HẢI PHÒNG");
                //rowTerminal.Cells[0].Row.Height = 350;
                //rowTerminal.Cells[0].CellStyle = styleHeader1;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);

                // So van ban
                ICellStyle styleHeader2 = workbook.CreateCellStyle();
                IFont font3 = workbook.CreateFont();
                font3.FontName = "Times New Roman";
                font3.FontHeightInPoints = 13;
                styleHeader2.SetFont(font3);
                styleHeader2.VerticalAlignment = VerticalAlignment.Top;
                styleHeader2.Alignment = HorizontalAlignment.Center;
                styleHeader2.WrapText = true;

                ICellStyle styleHeader3 = workbook.CreateCellStyle();
                IFont font4 = workbook.CreateFont();
                font4.FontName = "Times New Roman";
                font4.FontHeightInPoints = 13;
                font4.IsItalic = true;
                styleHeader3.SetFont(font4);
                styleHeader3.VerticalAlignment = VerticalAlignment.Top;
                styleHeader3.Alignment = HorizontalAlignment.Center;
                styleHeader3.WrapText = true;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);

                if (donviId == null)
                {
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /PCHP-AT");
                }
                else
                {
                    string tenDvi = _dvi_ser.GetById(donviId).TenDonVi;
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /" + tenDvi + "-AT");
                }


                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader2;
                rowTerminal.CreateCell(6).SetCellValue(".........., ngày " + DateTime.Now.Day + " tháng " + DateTime.Now.Month + " năm " + DateTime.Now.Year + "   ");
                rowTerminal.Cells[1].CellStyle = styleHeader3;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);




                // Tiêu đề
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue("BÁO CÁO BỔ SUNG, THAY ĐỔI LỊCH LÀM VIỆC TRÊN LƯỚI ĐIỆN");
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;

                //Ngày tháng
                ICellStyle styleHeader4 = workbook.CreateCellStyle();
                IFont font5 = workbook.CreateFont();
                font5.Boldweight = (short)FontBoldWeight.Bold;
                font5.FontName = "Times New Roman";
                font5.FontHeightInPoints = 13;
                font5.IsItalic = true;
                styleHeader4.SetFont(font5);
                styleHeader4.VerticalAlignment = VerticalAlignment.Top;
                styleHeader4.Alignment = HorizontalAlignment.Center;
                styleHeader4.WrapText = true;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                DateTime dtf = DateTime.ParseExact(DateFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                rowTerminal.CreateCell(0).SetCellValue("Ngày " + dtf.Day + " tháng " + dtf.Month + " năm " + dtf.Year);
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader4;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);

                // Header
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);


                ICellStyle styleHeader = workbook.CreateCellStyle();
                IFont font = workbook.CreateFont();
                font.FontName = "Times New Roman";
                font.Boldweight = (short)FontBoldWeight.Bold;
                font.FontHeightInPoints = 11;
                styleHeader.SetFont(font);
                styleHeader.VerticalAlignment = VerticalAlignment.Top;
                styleHeader.Alignment = HorizontalAlignment.Center;
                styleHeader.WrapText = true;
                styleHeader.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;



                rowTerminal.CreateCell(0).SetCellValue("Công việc");
                rowTerminal.Cells[0].Row.Height = 2000;
                rowTerminal.Cells[0].CellStyle = styleHeader;

                rowTerminal.CreateCell(1).SetCellValue("Nội dung công việc");
                rowTerminal.Cells[1].CellStyle = styleHeader;

                rowTerminal.CreateCell(2).SetCellValue("Đơn vị làm công việc");
                rowTerminal.Cells[2].CellStyle = styleHeader;

                rowTerminal.CreateCell(3).SetCellValue("Địa điểm (vị trí) công tác");
                rowTerminal.Cells[3].CellStyle = styleHeader;

                rowTerminal.CreateCell(4).SetCellValue("Thời gian công tác");
                rowTerminal.Cells[4].CellStyle = styleHeader;

                rowTerminal.CreateCell(5).SetCellValue("Ngày thực hiện");
                rowTerminal.Cells[5].CellStyle = styleHeader;

                rowTerminal.CreateCell(6).SetCellValue("Người duyệt phương án");
                rowTerminal.Cells[6].CellStyle = styleHeader;

                rowTerminal.CreateCell(7).SetCellValue("Người chỉ huy trực tiếp (số điện thoại DD)");
                rowTerminal.Cells[7].CellStyle = styleHeader;

                rowTerminal.CreateCell(8).SetCellValue("Người giám sát ATĐ (chức danh- số điện thoại DD)");
                rowTerminal.Cells[8].CellStyle = styleHeader;

                rowTerminal.CreateCell(9).SetCellValue("Lãnh đạo đơn vị trực ban kiểm soát (số điện thoại DD)");
                rowTerminal.Cells[9].CellStyle = styleHeader;

                rowTerminal.CreateCell(10).SetCellValue("Phiếu/ Lệnh công tác");
                rowTerminal.Cells[10].CellStyle = styleHeader;

                rowTerminal.CreateCell(11).SetCellValue("Trạng thái cắt điện");
                rowTerminal.Cells[11].CellStyle = styleHeader;

                rowTerminal.CreateCell(12).SetCellValue("Trạng thái tiếp địa");
                rowTerminal.Cells[12].CellStyle = styleHeader;

                rowTerminal.CreateCell(13).SetCellValue("Tính chất phiên lv");
                rowTerminal.Cells[13].CellStyle = styleHeader;


                rowTerminal.CreateCell(14).SetCellValue("Lý do thay đổi, bổ sung");
                rowTerminal.Cells[14].CellStyle = styleHeader;

                rowTerminal.CreateCell(15).SetCellValue("Loại phiếu");
                rowTerminal.Cells[15].CellStyle = styleHeader;

                rowTerminal.CreateCell(16).SetCellValue("Lãnh đạo đơn vị kiểm tra kiểm soát");
                rowTerminal.Cells[16].CellStyle = styleHeader;

                rowTerminal.CreateCell(17).SetCellValue("Ngày kết thúc");
                rowTerminal.Cells[17].CellStyle = styleHeader;

                rowTerminal.CreateCell(18).SetCellValue("Người kết thúc");
                rowTerminal.Cells[18].CellStyle = styleHeader;

                rowTerminal.CreateCell(19).SetCellValue("Tổng (" + list.Count() + ")");
                rowTerminal.Cells[19].CellStyle = styleHeader;

                rowTerminal.CreateCell(20).SetCellValue("Số phiếu/lệnh");
                rowTerminal.Cells[20].CellStyle = styleHeader;


                rowIndex++;
                ICellStyle style2 = workbook.CreateCellStyle();
                style2.VerticalAlignment = VerticalAlignment.Top;
                style2.Alignment = HorizontalAlignment.Center;
                style2.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                IFont fontr2 = workbook.CreateFont();
                fontr2.FontName = "Times New Roman";
                fontr2.FontHeightInPoints = 11;
                fontr2.IsItalic = true;
                style2.SetFont(fontr2);

                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue("1");
                rowTerminal.Cells[0].CellStyle = style2;

                rowTerminal.CreateCell(1).SetCellValue("2");
                rowTerminal.Cells[1].CellStyle = style2;

                rowTerminal.CreateCell(2).SetCellValue("3");
                rowTerminal.Cells[2].CellStyle = style2;

                rowTerminal.CreateCell(3).SetCellValue("4");
                rowTerminal.Cells[3].CellStyle = style2;

                rowTerminal.CreateCell(4).SetCellValue("5");
                rowTerminal.Cells[4].CellStyle = style2;

                rowTerminal.CreateCell(5).SetCellValue("6");
                rowTerminal.Cells[5].CellStyle = style2;

                rowTerminal.CreateCell(6).SetCellValue("7");
                rowTerminal.Cells[6].CellStyle = style2;

                rowTerminal.CreateCell(7).SetCellValue("8");
                rowTerminal.Cells[7].CellStyle = style2;

                rowTerminal.CreateCell(8).SetCellValue("9");
                rowTerminal.Cells[8].CellStyle = style2;

                rowTerminal.CreateCell(9).SetCellValue("10");
                rowTerminal.Cells[9].CellStyle = style2;

                rowTerminal.CreateCell(10).SetCellValue("11");
                rowTerminal.Cells[10].CellStyle = style2;

                rowTerminal.CreateCell(11).SetCellValue("12");
                rowTerminal.Cells[11].CellStyle = style2;

                rowTerminal.CreateCell(12).SetCellValue("13");
                rowTerminal.Cells[12].CellStyle = style2;

                rowTerminal.CreateCell(13).SetCellValue("14");
                rowTerminal.Cells[13].CellStyle = style2;

                rowTerminal.CreateCell(14).SetCellValue("15");
                rowTerminal.Cells[14].CellStyle = style2;

                rowTerminal.CreateCell(15).SetCellValue("16");
                rowTerminal.Cells[15].CellStyle = style2;

                rowTerminal.CreateCell(15).SetCellValue("17");
                rowTerminal.Cells[15].CellStyle = style2;

                rowTerminal.CreateCell(15).SetCellValue("18");
                rowTerminal.Cells[15].CellStyle = style2;

                rowTerminal.CreateCell(15).SetCellValue("19");
                rowTerminal.Cells[15].CellStyle = style2;

                rowTerminal.CreateCell(15).SetCellValue("20");
                rowTerminal.Cells[15].CellStyle = style2;

                rowTerminal.CreateCell(16).SetCellValue("21");
                rowTerminal.Cells[16].CellStyle = style2;

                rowTerminal.CreateCell(17).SetCellValue("22");
                rowTerminal.Cells[17].CellStyle = style2;

                rowTerminal.CreateCell(18).SetCellValue("23");
                rowTerminal.Cells[18].CellStyle = style2;

                rowTerminal.CreateCell(19).SetCellValue("24");
                rowTerminal.Cells[19].CellStyle = style2;

                rowTerminal.CreateCell(20).SetCellValue("25");
                rowTerminal.Cells[20].CellStyle = style2;


                rowIndex++;
                int i = 0, j = 0, k = 0;

                ICellStyle stylerow = workbook.CreateCellStyle();
                IFont fontr = workbook.CreateFont();
                fontr.FontName = "Times New Roman";
                fontr.FontHeightInPoints = 11;

                stylerow.SetFont(fontr);
                stylerow.VerticalAlignment = VerticalAlignment.Top;
                stylerow.Alignment = HorizontalAlignment.Center;
                stylerow.WrapText = true;
                stylerow.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                ICellStyle styleFoote4 = workbook.CreateCellStyle();
                IFont fontF4 = workbook.CreateFont();
                fontF4.FontName = "Times New Roman";
                fontF4.Boldweight = (short)FontBoldWeight.Bold;
                fontF4.FontHeightInPoints = 12;
                styleFoote4.SetFont(fontF4);
                styleFoote4.VerticalAlignment = VerticalAlignment.Top;
                styleFoote4.Alignment = HorizontalAlignment.Left;
                styleFoote4.WrapText = true;
                styleFoote4.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                //Footer
                ICellStyle styleFooter1 = workbook.CreateCellStyle();
                IFont fontF1 = workbook.CreateFont();
                fontF1.FontName = "Times New Roman";
                fontF1.Boldweight = (short)FontBoldWeight.Bold;
                fontF1.FontHeightInPoints = 12;
                styleFooter1.SetFont(fontF1);
                styleFooter1.VerticalAlignment = VerticalAlignment.Top;
                styleFooter1.Alignment = HorizontalAlignment.Center;
                styleFooter1.WrapText = true;
                styleFooter1.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;



                var lstDonVi = _dvi_ser.ListByParentId(null);
                // Add data rows
                foreach (var group1 in list.GroupBy(x => x.TT_Phien).OrderByDescending(o => o.Key))
                {
                    var ttPhien = tinhChatPhienRepository.GetById(group1.Key);
                    j++;
                    rowTerminal = sheet.CreateRow(rowIndex);

                    if (ttPhien != null)
                    {
                        rowTerminal.CreateCell(0).SetCellValue(ttPhien.Name);
                        rowTerminal.Cells[0].Row.Height = 400;
                        rowTerminal.Cells[0].CellStyle = styleFoote4;
                    }
                    else
                    {
                        rowTerminal.CreateCell(0).SetCellValue("");
                        rowTerminal.Cells[0].Row.Height = 400;
                        rowTerminal.Cells[0].CellStyle = styleFoote4;
                    }

                    rowTerminal.CreateCell(1).SetCellValue("");
                    rowTerminal.Cells[1].CellStyle = styleFoote4;

                    rowTerminal.CreateCell(2).SetCellValue("");
                    rowTerminal.Cells[2].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(3).SetCellValue("");
                    rowTerminal.Cells[3].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(4).SetCellValue("");
                    rowTerminal.Cells[4].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(5).SetCellValue("");
                    rowTerminal.Cells[5].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(6).SetCellValue("");
                    rowTerminal.Cells[6].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(7).SetCellValue("");
                    rowTerminal.Cells[7].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(8).SetCellValue("");
                    rowTerminal.Cells[8].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(9).SetCellValue("");
                    rowTerminal.Cells[9].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(10).SetCellValue("");
                    rowTerminal.Cells[10].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(11).SetCellValue("");
                    rowTerminal.Cells[11].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(12).SetCellValue("");
                    rowTerminal.Cells[12].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(13).SetCellValue("");
                    rowTerminal.Cells[13].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(14).SetCellValue("");
                    rowTerminal.Cells[14].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(15).SetCellValue("");
                    rowTerminal.Cells[15].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(16).SetCellValue("");
                    rowTerminal.Cells[16].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(17).SetCellValue("");
                    rowTerminal.Cells[17].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(18).SetCellValue("");
                    rowTerminal.Cells[18].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(19).SetCellValue(group1.Count());
                    rowTerminal.Cells[19].CellStyle = styleHeader;
                    rowTerminal.CreateCell(20).SetCellValue("");
                    rowTerminal.Cells[20].CellStyle = styleHeader;

                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 20));


                    rowIndex++;

                    var lstTempPLviec = group1.ToList();
                    if (donviId == null)
                    {
                        foreach (var item in lstDonVi)
                        {
                            var listTenDvi = group1.Select(x => x.TenDonVi).ToList();
                            if (!listTenDvi.Contains(item.TenDonVi))
                            {
                                lstTempPLviec.Add(new PhienLVModel
                                {
                                    Id = 0,
                                    TenDonVi = item.TenDonVi,
                                    DiaDiem = "",
                                    TenPhongBan = "",
                                    GiamSatVien = "",
                                    LanhDaoTrucBan = "",
                                    NgayDuyet = DateTime.Now,
                                    GioBd = DateTime.Now,
                                    GioKt = DateTime.Now,
                                    PhongBanID = 0,
                                    LyDoThayDoi = "",
                                    NgayLamViec = DateTime.Now,
                                    NgaySua = DateTime.Now,
                                    NgayTao = DateTime.Now,
                                    NoiDung = "",
                                    ViTri = item.ViTri.Value,
                                    SDT = item.SDT
                                });
                            }

                        }
                    }

                    foreach (var group in lstTempPLviec.OrderBy(p => p.ViTri).GroupBy(x => x.TenDonVi))
                    {
                        var sdt = group.FirstOrDefault() != null ? group.FirstOrDefault().SDT : "";

                        i++;
                        rowTerminal = sheet.CreateRow(rowIndex);
                        rowTerminal.CreateCell(0).SetCellValue(_plviec_ser.ConvertSoSangLaMa(i));
                        //rowTerminal.CreateCell(0).SetCellValue(i);
                        rowTerminal.Cells[0].Row.Height = 350;
                        if (!String.IsNullOrEmpty(sdt))
                        {
                            rowTerminal.CreateCell(1).SetCellValue(group.Key + ": " + sdt);
                        }
                        else
                        {
                            rowTerminal.CreateCell(1).SetCellValue(group.Key);
                        }

                        rowTerminal.Cells[0].CellStyle = stylerow;
                        rowTerminal.Cells[1].CellStyle = styleFoote4;

                        rowTerminal.CreateCell(2).SetCellValue("");
                        rowTerminal.Cells[2].CellStyle = stylerow;
                        rowTerminal.CreateCell(3).SetCellValue("");
                        rowTerminal.Cells[3].CellStyle = stylerow;
                        rowTerminal.CreateCell(4).SetCellValue("");
                        rowTerminal.Cells[4].CellStyle = stylerow;
                        rowTerminal.CreateCell(5).SetCellValue("");
                        rowTerminal.Cells[5].CellStyle = stylerow;
                        rowTerminal.CreateCell(6).SetCellValue("");
                        rowTerminal.Cells[6].CellStyle = stylerow;
                        rowTerminal.CreateCell(7).SetCellValue("");
                        rowTerminal.Cells[7].CellStyle = stylerow;
                        rowTerminal.CreateCell(8).SetCellValue("");
                        rowTerminal.Cells[8].CellStyle = stylerow;
                        rowTerminal.CreateCell(9).SetCellValue("");
                        rowTerminal.Cells[9].CellStyle = stylerow;
                        rowTerminal.CreateCell(10).SetCellValue("");
                        rowTerminal.Cells[10].CellStyle = stylerow;

                        rowTerminal.CreateCell(11).SetCellValue("");
                        rowTerminal.Cells[11].CellStyle = stylerow;
                        rowTerminal.CreateCell(12).SetCellValue("");
                        rowTerminal.Cells[12].CellStyle = stylerow;
                        rowTerminal.CreateCell(13).SetCellValue("");
                        rowTerminal.Cells[13].CellStyle = stylerow;
                        rowTerminal.CreateCell(14).SetCellValue("");
                        rowTerminal.Cells[14].CellStyle = stylerow;
                        rowTerminal.CreateCell(15).SetCellValue("");
                        rowTerminal.Cells[15].CellStyle = stylerow;
                        rowTerminal.CreateCell(16).SetCellValue("");
                        rowTerminal.Cells[16].CellStyle = stylerow;
                        rowTerminal.CreateCell(17).SetCellValue("");
                        rowTerminal.Cells[17].CellStyle = stylerow;
                        rowTerminal.CreateCell(18).SetCellValue("");
                        rowTerminal.Cells[18].CellStyle = stylerow;
                        if (group.Count() == 1 && string.IsNullOrEmpty(group.FirstOrDefault().DiaDiem))
                        {
                            rowTerminal.CreateCell(19).SetCellValue("0");
                            rowTerminal.Cells[19].CellStyle = styleHeader;
                        }
                        else
                        {
                            rowTerminal.CreateCell(19).SetCellValue(group.Count());
                            rowTerminal.Cells[19].CellStyle = styleHeader;
                        }
                        rowTerminal.CreateCell(20).SetCellValue("");
                        rowTerminal.Cells[20].CellStyle = stylerow;
                        sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 20));



                        rowIndex++;

                        foreach (var item in group)
                        {
                            var dv = _dvi_ser.GetById(item.Id);
                            if (dv != null)
                            {
                                if (dv.TenDonVi.Contains(group.Key))
                                {

                                }
                            }
                            else
                            {

                                k++;

                                var phieu = _pcongtac_ser.GetById(item.MaPCT);
                                var thuocTinhList = phienLamViecThuocTinhPhienRepository.GetByPhienLamViecId(item.Id);

                                plv_ThuocTinhPhien catDien = null;
                                plv_ThuocTinhPhien tiepDia = null;
                                plv_ThuocTinhPhien tinhChat = null;

                                foreach (var thuocTinhItem in thuocTinhList)
                                {
                                    try
                                    {
                                        if (catDien == null)
                                        {
                                            catDien = thuocTinhPhienRepository.GetByLoaiThuocTinh(3).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        catDien = null;
                                    }

                                    try
                                    {
                                        if (tinhChat == null)
                                        {
                                            tinhChat = thuocTinhPhienRepository.GetByLoaiThuocTinh(5).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        tinhChat = null;
                                    }

                                    try
                                    {
                                        if (tiepDia == null)
                                        {
                                            tiepDia = thuocTinhPhienRepository.GetByLoaiThuocTinh(4).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        tiepDia = null;
                                    }
                                }

                                rowTerminal = sheet.CreateRow(rowIndex);

                                rowTerminal.CreateCell(0).SetCellValue(k);
                                rowTerminal.Cells[0].CellStyle = stylerow;

                                rowTerminal.CreateCell(1).SetCellValue(item.NoiDung);
                                rowTerminal.Cells[1].CellStyle = stylerow;

                                rowTerminal.CreateCell(2).SetCellValue(item.TenPhongBan);
                                rowTerminal.Cells[2].CellStyle = stylerow;

                                rowTerminal.CreateCell(3).SetCellValue(item.DiaDiem);
                                rowTerminal.Cells[3].CellStyle = stylerow;

                                if (item.GioBd.Date != item.GioKt.Date)
                                {
                                    rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioBd) + "-" + String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[4].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:HH\\:mm}", item.GioBd) + "-" + String.Format("{0:HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[4].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(5).SetCellValue(String.Format("{0:dd/MM/yyyy}", item.NgayLamViec));
                                rowTerminal.Cells[5].CellStyle = stylerow;

                                rowTerminal.CreateCell(6).SetCellValue(item.NguoiDuyet_SoPa);
                                rowTerminal.Cells[6].CellStyle = stylerow;

                                rowTerminal.CreateCell(7).SetCellValue(item.NguoiChiHuy);
                                rowTerminal.Cells[7].CellStyle = stylerow;

                                rowTerminal.CreateCell(8).SetCellValue(item.GiamSatVien);
                                rowTerminal.Cells[8].CellStyle = stylerow;

                                rowTerminal.CreateCell(9).SetCellValue(item.LanhDaoTrucBan);
                                rowTerminal.Cells[9].CellStyle = stylerow;

                                if (phieu != null)
                                {
                                    rowTerminal.CreateCell(10).SetCellValue(phieu.plv_LoaiPhieu.TenLP);
                                    rowTerminal.Cells[10].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(10).SetCellValue("");
                                    rowTerminal.Cells[10].CellStyle = stylerow;
                                }

                                if (catDien != null)
                                {
                                    rowTerminal.CreateCell(11).SetCellValue(catDien.TenThuocTinh);
                                    rowTerminal.Cells[11].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(11).SetCellValue("");
                                    rowTerminal.Cells[11].CellStyle = stylerow;
                                }

                                if (tiepDia != null)
                                {
                                    rowTerminal.CreateCell(12).SetCellValue(tiepDia.TenThuocTinh);
                                    rowTerminal.Cells[12].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(12).SetCellValue("");
                                    rowTerminal.Cells[12].CellStyle = stylerow;
                                }

                                if (tinhChat != null)
                                {
                                    rowTerminal.CreateCell(13).SetCellValue(tinhChat.TenThuocTinh);
                                    rowTerminal.Cells[13].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(13).SetCellValue("");
                                    rowTerminal.Cells[13].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(14).SetCellValue(item.LyDoThayDoi);
                                rowTerminal.Cells[14].CellStyle = stylerow;

                                if (item.LoaiPhieu == 1)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Phiếu công tác");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Lệnh công tác");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }

                                if (item.IsKiemTra != null && item.IsKiemTra == true)
                                {
                                    string str = "Đã kiểm tra";
                                    if (item.NgayGioKT != null)
                                    {
                                        str = str + " " + String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayGioKT);
                                    }
                                    rowTerminal.CreateCell(16).SetCellValue(str);
                                    rowTerminal.Cells[16].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(16).SetCellValue("Chưa kiểm tra");
                                    rowTerminal.Cells[16].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(17).SetCellValue(String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayKetThuc));
                                rowTerminal.Cells[17].CellStyle = stylerow;

                                rowTerminal.CreateCell(18).SetCellValue(item.NguoiKetThuc);
                                rowTerminal.Cells[18].CellStyle = stylerow;

                                rowTerminal.CreateCell(19).SetCellValue("");
                                rowTerminal.Cells[19].CellStyle = stylerow;

                                rowTerminal.CreateCell(20).SetCellValue(item.SoPhieu);
                                rowTerminal.Cells[20].CellStyle = stylerow;

                                rowIndex++;
                            }
                        }
                    }

                    i = 0;
                }


                ICellStyle styleFooter2 = workbook.CreateCellStyle();
                IFont fontF2 = workbook.CreateFont();
                fontF2.FontName = "Times New Roman";
                fontF2.Boldweight = (short)FontBoldWeight.Bold;
                fontF2.IsItalic = true;
                fontF2.FontHeightInPoints = 12;
                styleFooter2.SetFont(fontF2);
                styleFooter2.VerticalAlignment = VerticalAlignment.Top;
                styleFooter2.Alignment = HorizontalAlignment.Left;
                styleFooter2.WrapText = true;

                ICellStyle styleFooter3 = workbook.CreateCellStyle();
                IFont fontF3 = workbook.CreateFont();
                fontF3.FontName = "Times New Roman";
                fontF3.FontHeightInPoints = 12;
                styleFooter3.SetFont(fontF3);
                styleFooter3.VerticalAlignment = VerticalAlignment.Top;
                styleFooter3.Alignment = HorizontalAlignment.Left;
                styleFooter3.WrapText = true;

                //Footer
                ICellStyle styleFooter5 = workbook.CreateCellStyle();
                IFont fontF5 = workbook.CreateFont();
                fontF5.FontName = "Times New Roman";
                fontF5.Boldweight = (short)FontBoldWeight.Bold;
                fontF5.FontHeightInPoints = 12;
                styleFooter5.SetFont(fontF5);
                styleFooter5.VerticalAlignment = VerticalAlignment.Top;
                styleFooter5.Alignment = HorizontalAlignment.Center;
                styleFooter5.WrapText = true;

                if (donviId == null)
                {
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("Người tổng hợp");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("KT.TP.An toàn");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Như trên;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để b/c);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - PGĐ KTSX-AT;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - P4, B2; BCBSX BLV;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - 14 Điện lực, TTTNĐ, XN Cao thế;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(4).SetCellValue("Nguyễn Toàn Thắng");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[0].CellStyle = styleFooter5;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(6).SetCellValue("Đào Duy Tiến");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("Phùng Hữu Đương");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                }
                else
                {
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("KTVATCT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("TP.KH-KT-AT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Phòng AT Cty (để b/cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để báo cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các PGĐ (để chỉ đạo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các Phòng, Đội (để thực hiện);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, KH-KT-AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                }


                #endregion


                #region export
                // Save the Excel spreadsheet to a MemoryStream and return it to the client
                using (var exportData = new MemoryStream())
                {
                    workbook.Write(exportData);
                    string strFileName = "";
                    if (donviId == null)
                    {
                        strFileName = string.Format("Ctybc-Bsung-M.NPC_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    else
                    {
                        strFileName = string.Format("Dvibc-Bsung-M.NPC_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    string saveAsFileName = strFileName;
                    Response.Clear();
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", saveAsFileName));
                    //Response.BinaryWrite(exportData.GetBuffer());
                    Response.BinaryWrite(exportData.ToArray());
                    Response.End();
                }
                #endregion
                this.SetNotification("Xuất dữ liệu báo cáo ngày thành công!", NotificationEnumeration.Success, true);
            }
            catch (Exception ex)
            {
                this.SetNotification("Không xuất được dữ liệu: " + ex.Message, NotificationEnumeration.Error, true);
            }
        }

        public ActionResult ExportBS(string DateFrom, bool? isExportExcel)
        {

            try
            {
                string donviId = null;
                try
                {
                    if (Session["DonViID"] != null)
                        donviId = Session["DonViID"].ToString();
                }
                catch { }


                if (string.IsNullOrEmpty(DateFrom))
                {
                    DateFrom = string.Format("{0:dd/MM/yyyy}", DateTime.Now);
                }

                List<PhienLVModel> modelTotal = new List<PhienLVModel>();
                List<PhienLVModel> model = new List<PhienLVModel>();

                List<string> lstdv = new List<string>();
                if (donviId == null)
                {
                    lstdv = DonViRepository.GetAllDonViID(null);
                }
                else
                {
                    lstdv = DonViRepository.GetAllDonViID(donviId);
                }


                if (lstdv.Count() > 0)
                {
                    foreach (string item in lstdv)
                    {

                        model = _plviec_ser.ExportPhienLv("", 1, 0, DateFrom, DateFrom, item.ToString(), 0).ToList();
                        foreach (var it in model)
                        {
                            modelTotal.Add(it);
                        }

                    }
                }

                Console.WriteLine("isExportExcel::: ", isExportExcel);
                if (isExportExcel ?? false)
                    ExportExcelFromListBS(modelTotal, DateFrom);

                DisposeAll();

                return View();
            }
            catch (Exception ex)
            {
                DisposeAll();

                return View();
            }
        }

        #endregion

        #region ExportToExcelBS Theo mẫu Công ty
        private void ExportExcelFromListBS_Cty(IEnumerable<PhienLVModel> list, string DateFrom)
        {
            try
            {
                string donviId = null;
                try
                {
                    donviId = Session["DonViID"].ToString();
                }
                catch { }

                IWorkbook workbook = new XSSFWorkbook();
                ISheet sheet = workbook.CreateSheet("Report");

                // Thay đổi kích thước từng cột
                sheet.SetColumnWidth(0, 1500);
                sheet.SetColumnWidth(1, 6000);
                sheet.SetColumnWidth(2, 3500);
                sheet.SetColumnWidth(3, 5000);
                sheet.SetColumnWidth(4, 3000);
                sheet.SetColumnWidth(5, 4500);
                sheet.SetColumnWidth(6, 4500);
                sheet.SetColumnWidth(7, 4500);
                sheet.SetColumnWidth(8, 4500);
                sheet.SetColumnWidth(9, 4500);
                sheet.SetColumnWidth(10, 4500);
                sheet.SetColumnWidth(11, 3000);
                sheet.SetColumnWidth(12, 3000);
                sheet.SetColumnWidth(13, 3000);
                sheet.SetColumnWidth(14, 3000);
                sheet.SetColumnWidth(15, 3000);
                sheet.SetColumnWidth(16, 3000);
                sheet.SetColumnWidth(17, 4500);
                sheet.SetColumnWidth(22, 6000);

                if (donviId == null)
                {
                    //gop cell
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:D1"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G1:J1"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:D2"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G2:J2"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A3:D3"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G3:J3"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A5:D5"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G5:J5"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:J7"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:J8"));

                }
                else
                {
                    //gop cell
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A1:D1"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G1:J1"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A2:D2"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G2:J2"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A3:D3"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G3:J3"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A4:D4"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("G4:J4"));

                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A6:J6"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A7:J7"));
                    sheet.AddMergedRegion(CellRangeAddress.ValueOf("A8:J8"));
                }



                IPrintSetup ps = sheet.PrintSetup;
                ps.Landscape = true;
                ps.PaperSize = (short)PaperSize.A4_Small;
                sheet.FitToPage = true;
                sheet.PrintSetup.FitWidth = 1;

                var rowIndex = 0;
                #region Report

                ICellStyle styleHeader1 = workbook.CreateCellStyle();
                IFont font1 = workbook.CreateFont();
                font1.FontName = "Times New Roman";
                font1.Boldweight = (short)FontBoldWeight.Bold;
                font1.FontHeightInPoints = 13;
                styleHeader1.SetFont(font1);
                styleHeader1.VerticalAlignment = VerticalAlignment.Top;
                styleHeader1.Alignment = HorizontalAlignment.Center;
                styleHeader1.WrapText = true;

                ICellStyle styleThuocTinh = workbook.CreateCellStyle();
                IFont fontThuocTinh = workbook.CreateFont();
                fontThuocTinh.FontName = "Times New Roman";
                fontThuocTinh.Boldweight = (short)FontBoldWeight.Normal;
                fontThuocTinh.FontHeightInPoints = 10;
                styleThuocTinh.SetFont(fontThuocTinh);
                styleThuocTinh.VerticalAlignment = VerticalAlignment.Top;
                styleThuocTinh.Alignment = HorizontalAlignment.Left;
                styleThuocTinh.WrapText = true;
                styleThuocTinh.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleThuocTinh.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleThuocTinh.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleThuocTinh.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;


                IRow rowTerminal = sheet.CreateRow(rowIndex);
                if (donviId == null)
                {

                    rowTerminal.CreateCell(0).SetCellValue("TỔNG CÔNG TY ĐIỆN LỰC MIỀN BẮC");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(6).SetCellValue("CỘNG HOÀ XÃ HỘI CHỦ NGHĨA VIỆT NAM");
                    rowTerminal.Cells[1].CellStyle = styleHeader1;


                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("CÔNG TY TNHH MTV");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(6).SetCellValue("Độc lập – Tự do – Hạnh phúc");
                    rowTerminal.Cells[1].CellStyle = styleHeader1;

                    //rowIndex++;
                    //rowTerminal = sheet.CreateRow(rowIndex);
                    //rowTerminal.CreateCell(0).SetCellValue("ĐIỆN LỰC HẢI PHÒNG");
                    //rowTerminal.Cells[0].Row.Height = 350;
                    //rowTerminal.Cells[0].CellStyle = styleHeader1;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);

                    // So van ban
                    ICellStyle styleHeader2 = workbook.CreateCellStyle();
                    IFont font3 = workbook.CreateFont();
                    font3.FontName = "Times New Roman";
                    font3.FontHeightInPoints = 13;
                    styleHeader2.SetFont(font3);
                    styleHeader2.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader2.Alignment = HorizontalAlignment.Center;
                    styleHeader2.WrapText = true;

                    ICellStyle styleHeader3 = workbook.CreateCellStyle();
                    IFont font4 = workbook.CreateFont();
                    font4.FontName = "Times New Roman";
                    font4.FontHeightInPoints = 13;
                    font4.IsItalic = true;
                    styleHeader3.SetFont(font4);
                    styleHeader3.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader3.Alignment = HorizontalAlignment.Center;
                    styleHeader3.WrapText = true;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);

                    if (donviId == null)
                    {
                        rowTerminal.CreateCell(0).SetCellValue("Số                 /PCHP-AT");
                    }
                    else
                    {
                        string tenDvi = _dvi_ser.GetById(donviId).TenDonVi;
                        rowTerminal.CreateCell(0).SetCellValue("Số                 /" + tenDvi + "-AT");
                    }
                }
                else
                {

                    var donVi = _dvi_ser.GetById(donviId);
                    var donViCha = _dvi_ser.List().Where(x => x.Id == donVi.DviCha).FirstOrDefault();

                    rowTerminal = sheet.CreateRow(rowIndex);

                    if (donViCha != null)
                    {
                        rowTerminal.CreateCell(0).SetCellValue(donViCha.TenDonVi.ToUpper());
                    }
                    else
                    {
                        rowTerminal.CreateCell(0).SetCellValue("");
                    }

                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(6).SetCellValue("CỘNG HOÀ XÃ HỘI CHỦ NGHĨA VIỆT NAM");
                    rowTerminal.Cells[1].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(22).SetCellValue("Phiếu công tác");
                    rowTerminal.Cells[2].CellStyle = styleThuocTinh;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue(donVi.TenDonVi.ToUpper());
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(6).SetCellValue("Độc lập – Tự do – Hạnh phúc");
                    rowTerminal.Cells[1].CellStyle = styleHeader1;
                    rowTerminal.CreateCell(22).SetCellValue("Lệnh công tác");
                    rowTerminal.Cells[2].CellStyle = styleThuocTinh;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(22).SetCellValue("Công việc cắt điện");
                    rowTerminal.Cells[0].CellStyle = styleThuocTinh;

                    // So van ban
                    ICellStyle styleHeader2 = workbook.CreateCellStyle();
                    IFont font3 = workbook.CreateFont();
                    font3.FontName = "Times New Roman";
                    font3.FontHeightInPoints = 13;
                    styleHeader2.SetFont(font3);
                    styleHeader2.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader2.Alignment = HorizontalAlignment.Center;
                    styleHeader2.WrapText = true;

                    ICellStyle styleHeader3 = workbook.CreateCellStyle();
                    IFont font4 = workbook.CreateFont();
                    font4.FontName = "Times New Roman";
                    font4.FontHeightInPoints = 13;
                    font4.IsItalic = true;
                    styleHeader3.SetFont(font4);
                    styleHeader3.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader3.Alignment = HorizontalAlignment.Center;
                    styleHeader3.WrapText = true;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Số                 /ĐL......-AT");
                    rowTerminal.Cells[0].CellStyle = styleHeader2;
                    rowTerminal.CreateCell(22).SetCellValue("Công việc không cắt điện");
                    rowTerminal.Cells[1].CellStyle = styleThuocTinh;
                }




                //rowTerminal.Cells[0].Row.Height = 350;
                //rowTerminal.Cells[0].CellStyle = styleHeader2;
                //rowTerminal.CreateCell(6).SetCellValue("Hải Phòng, ngày " + DateTime.Now.Day + " tháng " + DateTime.Now.Month + " năm " + DateTime.Now.Year + "   ");
                //rowTerminal.Cells[1].CellStyle = styleHeader3;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(22).SetCellValue("Công việc tiếp địa");
                rowTerminal.Cells[0].CellStyle = styleThuocTinh;

                // Tiêu đề
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue("BÁO CÁO BỔ SUNG, THAY ĐỔI LỊCH LÀM VIỆC TRÊN LƯỚI ĐIỆN");
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader1;
                rowTerminal.CreateCell(22).SetCellValue("Công việc không tiếp địa");
                rowTerminal.Cells[1].CellStyle = styleThuocTinh;


                //Ngày tháng
                ICellStyle styleHeader4 = workbook.CreateCellStyle();
                IFont font5 = workbook.CreateFont();
                font5.Boldweight = (short)FontBoldWeight.Bold;
                font5.FontName = "Times New Roman";
                font5.FontHeightInPoints = 13;
                font5.IsItalic = true;
                styleHeader4.SetFont(font5);
                styleHeader4.VerticalAlignment = VerticalAlignment.Top;
                styleHeader4.Alignment = HorizontalAlignment.Center;
                styleHeader4.WrapText = true;

                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);
                DateTime dtf = DateTime.ParseExact(DateFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                rowTerminal.CreateCell(0).SetCellValue("Ngày " + dtf.Day + " tháng " + dtf.Month + " năm " + dtf.Year);
                rowTerminal.Cells[0].Row.Height = 350;
                rowTerminal.Cells[0].CellStyle = styleHeader4;
                rowTerminal.CreateCell(22).SetCellValue("Công việc có tính chất phức tạp");
                rowTerminal.Cells[1].CellStyle = styleThuocTinh;

                if (donviId != null)
                {
                    //Kính gửi
                    ICellStyle styleHeader5 = workbook.CreateCellStyle();
                    IFont font6 = workbook.CreateFont();
                    font6.Boldweight = (short)FontBoldWeight.Normal;
                    font6.FontName = "Times New Roman";
                    font6.FontHeightInPoints = 13;
                    font6.IsItalic = true;
                    styleHeader5.SetFont(font6);
                    styleHeader5.VerticalAlignment = VerticalAlignment.Top;
                    styleHeader5.Alignment = HorizontalAlignment.Center;
                    styleHeader5.WrapText = true;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(0).SetCellValue("Kính gửi: Phòng An toàn");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleHeader5;
                    rowTerminal.CreateCell(22).SetCellValue("Công việc cần quay video");
                    rowTerminal.Cells[1].CellStyle = styleThuocTinh;
                }



                // Header
                rowIndex++;
                rowTerminal = sheet.CreateRow(rowIndex);


                ICellStyle styleHeader = workbook.CreateCellStyle();
                IFont font = workbook.CreateFont();
                font.FontName = "Times New Roman";
                font.Boldweight = (short)FontBoldWeight.Bold;
                font.FontHeightInPoints = 11;
                styleHeader.SetFont(font);
                styleHeader.VerticalAlignment = VerticalAlignment.Top;
                styleHeader.Alignment = HorizontalAlignment.Center;
                styleHeader.WrapText = true;
                styleHeader.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleHeader.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;



                rowTerminal.CreateCell(0).SetCellValue("Công việc");
                rowTerminal.Cells[0].Row.Height = 2000;
                rowTerminal.Cells[0].CellStyle = styleHeader;

                rowTerminal.CreateCell(1).SetCellValue("Nội dung công việc");
                rowTerminal.Cells[1].CellStyle = styleHeader;

                rowTerminal.CreateCell(2).SetCellValue("Đơn vị làm công việc");
                rowTerminal.Cells[2].CellStyle = styleHeader;

                rowTerminal.CreateCell(3).SetCellValue("Địa điểm (vị trí) công tác");
                rowTerminal.Cells[3].CellStyle = styleHeader;

                rowTerminal.CreateCell(4).SetCellValue("Thời gian công tác");
                rowTerminal.Cells[4].CellStyle = styleHeader;

                rowTerminal.CreateCell(5).SetCellValue("Người duyệt phương án");
                rowTerminal.Cells[5].CellStyle = styleHeader;

                rowTerminal.CreateCell(6).SetCellValue("Người chỉ huy trực tiếp (số điện thoại DD)");
                rowTerminal.Cells[6].CellStyle = styleHeader;

                rowTerminal.CreateCell(7).SetCellValue("Người giám sát ATĐ (chức danh- số điện thoại DD)");
                rowTerminal.Cells[7].CellStyle = styleHeader;

                rowTerminal.CreateCell(8).SetCellValue("Người cho phép - SĐT");
                rowTerminal.Cells[8].CellStyle = styleHeader;

                rowTerminal.CreateCell(9).SetCellValue("Người kiểm tra PCT; LCT");
                rowTerminal.Cells[9].CellStyle = styleHeader;

                rowTerminal.CreateCell(10).SetCellValue("Lãnh đạo đơn vị kiểm tra kiểm soát - SĐT");
                rowTerminal.Cells[10].CellStyle = styleHeader;

                rowTerminal.CreateCell(11).SetCellValue("Phiếu/ Lệnh công tác");
                rowTerminal.Cells[11].CellStyle = styleHeader;

                rowTerminal.CreateCell(12).SetCellValue("Trạng thái cắt điện");
                rowTerminal.Cells[12].CellStyle = styleHeader;

                rowTerminal.CreateCell(13).SetCellValue("Trạng thái tiếp địa");
                rowTerminal.Cells[13].CellStyle = styleHeader;

                rowTerminal.CreateCell(14).SetCellValue("Tính chất phiên lv");
                rowTerminal.Cells[14].CellStyle = styleHeader;

                rowTerminal.CreateCell(15).SetCellValue("Trạng thái công việc");
                rowTerminal.Cells[15].CellStyle = styleHeader;

                rowTerminal.CreateCell(16).SetCellValue("Lý do thay đổi, bổ sung");
                rowTerminal.Cells[16].CellStyle = styleHeader;

                rowTerminal.CreateCell(17).SetCellValue("Loại phiếu");
                rowTerminal.Cells[17].CellStyle = styleHeader;

                rowTerminal.CreateCell(18).SetCellValue("Lãnh đạo đơn vị kiểm tra kiểm soát");
                rowTerminal.Cells[18].CellStyle = styleHeader;

                rowTerminal.CreateCell(19).SetCellValue("Ngày kết thúc");
                rowTerminal.Cells[19].CellStyle = styleHeader;

                rowTerminal.CreateCell(20).SetCellValue("Người kết thúc");
                rowTerminal.Cells[20].CellStyle = styleHeader;

                rowTerminal.CreateCell(21).SetCellValue("Tổng (" + list.Count() + ")");
                rowTerminal.Cells[21].CellStyle = styleHeader;

                rowTerminal.CreateCell(22).SetCellValue("Số phiếu/lệnh");
                rowTerminal.Cells[22].CellStyle = styleHeader;


                rowIndex++;
                ICellStyle style2 = workbook.CreateCellStyle();
                style2.VerticalAlignment = VerticalAlignment.Top;
                style2.Alignment = HorizontalAlignment.Center;
                style2.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style2.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                IFont fontr2 = workbook.CreateFont();
                fontr2.FontName = "Times New Roman";
                fontr2.FontHeightInPoints = 11;
                fontr2.IsItalic = true;
                style2.SetFont(fontr2);

                rowTerminal = sheet.CreateRow(rowIndex);
                rowTerminal.CreateCell(0).SetCellValue("1");
                rowTerminal.Cells[0].CellStyle = style2;

                rowTerminal.CreateCell(1).SetCellValue("2");
                rowTerminal.Cells[1].CellStyle = style2;

                rowTerminal.CreateCell(2).SetCellValue("3");
                rowTerminal.Cells[2].CellStyle = style2;

                rowTerminal.CreateCell(3).SetCellValue("4");
                rowTerminal.Cells[3].CellStyle = style2;

                rowTerminal.CreateCell(4).SetCellValue("5");
                rowTerminal.Cells[4].CellStyle = style2;

                rowTerminal.CreateCell(5).SetCellValue("6");
                rowTerminal.Cells[5].CellStyle = style2;

                rowTerminal.CreateCell(6).SetCellValue("7");
                rowTerminal.Cells[6].CellStyle = style2;

                rowTerminal.CreateCell(7).SetCellValue("8");
                rowTerminal.Cells[7].CellStyle = style2;

                rowTerminal.CreateCell(8).SetCellValue("9");
                rowTerminal.Cells[8].CellStyle = style2;

                rowTerminal.CreateCell(9).SetCellValue("10");
                rowTerminal.Cells[9].CellStyle = style2;

                rowTerminal.CreateCell(10).SetCellValue("11");
                rowTerminal.Cells[10].CellStyle = style2;

                rowTerminal.CreateCell(11).SetCellValue("12");
                rowTerminal.Cells[11].CellStyle = style2;

                rowTerminal.CreateCell(12).SetCellValue("13");
                rowTerminal.Cells[12].CellStyle = style2;

                rowTerminal.CreateCell(13).SetCellValue("14");
                rowTerminal.Cells[13].CellStyle = style2;

                rowTerminal.CreateCell(14).SetCellValue("15");
                rowTerminal.Cells[14].CellStyle = style2;

                rowTerminal.CreateCell(15).SetCellValue("16");
                rowTerminal.Cells[15].CellStyle = style2;

                rowTerminal.CreateCell(16).SetCellValue("17");
                rowTerminal.Cells[16].CellStyle = style2;

                rowTerminal.CreateCell(17).SetCellValue("18");
                rowTerminal.Cells[17].CellStyle = style2;

                rowTerminal.CreateCell(18).SetCellValue("19");
                rowTerminal.Cells[18].CellStyle = style2;

                rowTerminal.CreateCell(19).SetCellValue("20");
                rowTerminal.Cells[19].CellStyle = style2;

                rowTerminal.CreateCell(20).SetCellValue("21");
                rowTerminal.Cells[20].CellStyle = style2;

                rowTerminal.CreateCell(21).SetCellValue("22");
                rowTerminal.Cells[21].CellStyle = style2;

                rowTerminal.CreateCell(22).SetCellValue("23");
                rowTerminal.Cells[22].CellStyle = style2;

                rowIndex++;
                int i = 0, j = 0, k = 0;

                ICellStyle stylerow = workbook.CreateCellStyle();
                IFont fontr = workbook.CreateFont();
                fontr.FontName = "Times New Roman";
                fontr.FontHeightInPoints = 11;

                stylerow.SetFont(fontr);
                stylerow.VerticalAlignment = VerticalAlignment.Top;
                stylerow.Alignment = HorizontalAlignment.Center;
                stylerow.WrapText = true;
                stylerow.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                stylerow.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                ICellStyle styleFoote4 = workbook.CreateCellStyle();
                IFont fontF4 = workbook.CreateFont();
                fontF4.FontName = "Times New Roman";
                fontF4.Boldweight = (short)FontBoldWeight.Bold;
                fontF4.FontHeightInPoints = 12;
                styleFoote4.SetFont(fontF4);
                styleFoote4.VerticalAlignment = VerticalAlignment.Top;
                styleFoote4.Alignment = HorizontalAlignment.Left;
                styleFoote4.WrapText = true;
                styleFoote4.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFoote4.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;

                //Footer
                ICellStyle styleFooter1 = workbook.CreateCellStyle();
                IFont fontF1 = workbook.CreateFont();
                fontF1.FontName = "Times New Roman";
                fontF1.Boldweight = (short)FontBoldWeight.Bold;
                fontF1.FontHeightInPoints = 12;
                styleFooter1.SetFont(fontF1);
                styleFooter1.VerticalAlignment = VerticalAlignment.Top;
                styleFooter1.Alignment = HorizontalAlignment.Center;
                styleFooter1.WrapText = true;
                styleFooter1.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                styleFooter1.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;


                var lstDonVi = _dvi_ser.ListByParentId(null);
                // Add data rows
                foreach (var group1 in list.GroupBy(x => x.TT_Phien).OrderByDescending(o => o.Key))
                {
                    j++;
                    rowTerminal = sheet.CreateRow(rowIndex);

                    var ttPhien = tinhChatPhienRepository.GetById(group1.Key);

                    if (ttPhien != null)
                    {
                        rowTerminal.CreateCell(0).SetCellValue(ttPhien.Name);
                        rowTerminal.Cells[0].Row.Height = 400;
                        rowTerminal.Cells[0].CellStyle = styleFoote4;
                    }
                    else
                    {
                        rowTerminal.CreateCell(0).SetCellValue("");
                        rowTerminal.Cells[0].Row.Height = 400;
                        rowTerminal.Cells[0].CellStyle = styleFoote4;
                    }

                    rowTerminal.CreateCell(1).SetCellValue("");
                    rowTerminal.Cells[1].CellStyle = styleFoote4;

                    rowTerminal.CreateCell(2).SetCellValue("");
                    rowTerminal.Cells[2].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(3).SetCellValue("");
                    rowTerminal.Cells[3].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(4).SetCellValue("");
                    rowTerminal.Cells[4].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(5).SetCellValue("");
                    rowTerminal.Cells[5].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(6).SetCellValue("");
                    rowTerminal.Cells[6].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(7).SetCellValue("");
                    rowTerminal.Cells[7].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(8).SetCellValue("");
                    rowTerminal.Cells[8].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(9).SetCellValue("");
                    rowTerminal.Cells[9].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(10).SetCellValue("");
                    rowTerminal.Cells[10].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(11).SetCellValue("");
                    rowTerminal.Cells[11].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(12).SetCellValue("");
                    rowTerminal.Cells[12].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(13).SetCellValue("");
                    rowTerminal.Cells[13].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(14).SetCellValue("");
                    rowTerminal.Cells[14].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(15).SetCellValue("");
                    rowTerminal.Cells[15].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(16).SetCellValue("");
                    rowTerminal.Cells[16].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(17).SetCellValue("");
                    rowTerminal.Cells[17].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(18).SetCellValue("");
                    rowTerminal.Cells[18].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(19).SetCellValue("");
                    rowTerminal.Cells[19].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(20).SetCellValue("");
                    rowTerminal.Cells[20].CellStyle = styleFoote4;
                    rowTerminal.CreateCell(21).SetCellValue(group1.Count());
                    rowTerminal.Cells[21].CellStyle = styleHeader;
                    rowTerminal.CreateCell(22).SetCellValue("");
                    rowTerminal.Cells[22].CellStyle = styleFoote4;
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 22));


                    rowIndex++;

                    //Lay toan bo danh sach phien lam viec
                    // Add data rows
                    var lstTempPLviec = group1.ToList();
                    if (donviId == null)
                    {
                        foreach (var item in lstDonVi)
                        {
                            var listTenDvi = group1.Select(x => x.TenDonVi).ToList();
                            if (!listTenDvi.Contains(item.TenDonVi))
                            {
                                lstTempPLviec.Add(new PhienLVModel
                                {
                                    Id = 0,
                                    TenDonVi = item.TenDonVi,
                                    DiaDiem = "",
                                    TenPhongBan = "",
                                    GiamSatVien = "",
                                    LanhDaoTrucBan = "",
                                    NgayDuyet = DateTime.Now,
                                    GioBd = DateTime.Now,
                                    GioKt = DateTime.Now,
                                    PhongBanID = 0,
                                    LyDoThayDoi = "",
                                    NgayLamViec = DateTime.Now,
                                    NgaySua = DateTime.Now,
                                    NgayTao = DateTime.Now,
                                    NoiDung = "",
                                    ViTri = item.ViTri.Value,
                                    SDT = item.SDT
                                });
                            }

                        }
                    }

                    foreach (var group in lstTempPLviec.OrderBy(p => p.ViTri).GroupBy(x => x.TenDonVi))
                    {
                        var sdt = group.FirstOrDefault() != null ? group.FirstOrDefault().SDT : "";
                        i++;
                        rowTerminal = sheet.CreateRow(rowIndex);
                        rowTerminal.CreateCell(0).SetCellValue(_plviec_ser.ConvertSoSangLaMa(i));
                        //rowTerminal.CreateCell(0).SetCellValue(i);
                        rowTerminal.Cells[0].Row.Height = 350;
                        if (!String.IsNullOrEmpty(sdt))
                        {
                            rowTerminal.CreateCell(1).SetCellValue(group.Key + ": " + sdt);
                        }
                        else
                        {
                            rowTerminal.CreateCell(1).SetCellValue(group.Key);
                        }

                        rowTerminal.Cells[0].CellStyle = stylerow;
                        rowTerminal.Cells[1].CellStyle = styleFoote4;

                        rowTerminal.CreateCell(2).SetCellValue("");
                        rowTerminal.Cells[2].CellStyle = stylerow;
                        rowTerminal.CreateCell(3).SetCellValue("");
                        rowTerminal.Cells[3].CellStyle = stylerow;
                        rowTerminal.CreateCell(4).SetCellValue("");
                        rowTerminal.Cells[4].CellStyle = stylerow;
                        rowTerminal.CreateCell(5).SetCellValue("");
                        rowTerminal.Cells[5].CellStyle = stylerow;
                        rowTerminal.CreateCell(6).SetCellValue("");
                        rowTerminal.Cells[6].CellStyle = stylerow;
                        rowTerminal.CreateCell(7).SetCellValue("");
                        rowTerminal.Cells[7].CellStyle = stylerow;
                        rowTerminal.CreateCell(8).SetCellValue("");
                        rowTerminal.Cells[8].CellStyle = stylerow;
                        rowTerminal.CreateCell(9).SetCellValue("");
                        rowTerminal.Cells[9].CellStyle = stylerow;
                        rowTerminal.CreateCell(10).SetCellValue("");
                        rowTerminal.Cells[10].CellStyle = stylerow;
                        rowTerminal.CreateCell(11).SetCellValue("");
                        rowTerminal.Cells[11].CellStyle = stylerow;
                        rowTerminal.CreateCell(12).SetCellValue("");
                        rowTerminal.Cells[12].CellStyle = stylerow;
                        rowTerminal.CreateCell(13).SetCellValue("");
                        rowTerminal.Cells[13].CellStyle = stylerow;
                        rowTerminal.CreateCell(14).SetCellValue("");
                        rowTerminal.Cells[14].CellStyle = stylerow;
                        rowTerminal.CreateCell(15).SetCellValue("");
                        rowTerminal.Cells[15].CellStyle = stylerow;
                        rowTerminal.CreateCell(16).SetCellValue("");
                        rowTerminal.Cells[16].CellStyle = stylerow;
                        rowTerminal.CreateCell(17).SetCellValue("");
                        rowTerminal.Cells[17].CellStyle = stylerow;
                        rowTerminal.CreateCell(18).SetCellValue("");
                        rowTerminal.Cells[18].CellStyle = stylerow;
                        rowTerminal.CreateCell(19).SetCellValue("");
                        rowTerminal.Cells[19].CellStyle = stylerow;
                        rowTerminal.CreateCell(20).SetCellValue("");
                        rowTerminal.Cells[20].CellStyle = stylerow;
                        if (group.Count() == 1 && string.IsNullOrEmpty(group.FirstOrDefault().DiaDiem))
                        {
                            rowTerminal.CreateCell(21).SetCellValue("0");
                            rowTerminal.Cells[21].CellStyle = styleHeader;
                        }
                        else
                        {
                            rowTerminal.CreateCell(21).SetCellValue(group.Count());
                            rowTerminal.Cells[21].CellStyle = styleHeader;
                        }
                        rowTerminal.CreateCell(22).SetCellValue("");
                        rowTerminal.Cells[22].CellStyle = stylerow;
                        sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 22));



                        rowIndex++;

                        foreach (var item in group)
                        {
                            var dv = _dvi_ser.GetById(item.Id);
                            if (dv != null)
                            {
                                if (dv.TenDonVi.Contains(group.Key))
                                {

                                }
                            }
                            else
                            {

                                k++;

                                var phieu = _pcongtac_ser.GetById(item.MaPCT);
                                var thuocTinhList = phienLamViecThuocTinhPhienRepository.GetByPhienLamViecId(item.Id);

                                plv_ThuocTinhPhien catDien = null;
                                plv_ThuocTinhPhien tiepDia = null;
                                plv_ThuocTinhPhien tinhChat = null;

                                foreach (var thuocTinhItem in thuocTinhList)
                                {
                                    try
                                    {
                                        if (catDien == null)
                                        {
                                            catDien = thuocTinhPhienRepository.GetByLoaiThuocTinh(3).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        catDien = null;
                                    }

                                    try
                                    {
                                        if (tinhChat == null)
                                        {
                                            tinhChat = thuocTinhPhienRepository.GetByLoaiThuocTinh(5).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        tinhChat = null;
                                    }

                                    try
                                    {
                                        if (tiepDia == null)
                                        {
                                            tiepDia = thuocTinhPhienRepository.GetByLoaiThuocTinh(4).Where(x => x.Id == thuocTinhItem.ThuocTinhId).FirstOrDefault();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        tiepDia = null;
                                    }
                                }

                                rowTerminal = sheet.CreateRow(rowIndex);

                                rowTerminal.CreateCell(0).SetCellValue(k);
                                rowTerminal.Cells[0].CellStyle = stylerow;

                                rowTerminal.CreateCell(1).SetCellValue(item.NoiDung);
                                rowTerminal.Cells[1].CellStyle = stylerow;

                                rowTerminal.CreateCell(2).SetCellValue(item.TenPhongBan);
                                rowTerminal.Cells[2].CellStyle = stylerow;

                                rowTerminal.CreateCell(3).SetCellValue(item.DiaDiem);
                                rowTerminal.Cells[3].CellStyle = stylerow;

                                if (item.GioBd.Date != item.GioKt.Date)
                                {
                                    rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioBd) + "-" + String.Format("{0:dd/MM/yyyy HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[4].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(4).SetCellValue(String.Format("{0:HH\\:mm}", item.GioBd) + "-" + String.Format("{0:HH\\:mm}", item.GioKt));
                                    rowTerminal.Cells[4].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(5).SetCellValue(item.NguoiDuyet_SoPa);
                                rowTerminal.Cells[5].CellStyle = stylerow;

                                rowTerminal.CreateCell(6).SetCellValue(item.NguoiChiHuy);
                                rowTerminal.Cells[6].CellStyle = stylerow;

                                rowTerminal.CreateCell(7).SetCellValue(item.GiamSatVien);
                                rowTerminal.Cells[7].CellStyle = stylerow;

                                rowTerminal.CreateCell(8).SetCellValue(item.NguoiKiemSoat);
                                rowTerminal.Cells[8].CellStyle = stylerow;

                                rowTerminal.CreateCell(9).SetCellValue(item.NguoiKiemTraPhieu);
                                rowTerminal.Cells[9].CellStyle = stylerow;

                                rowTerminal.CreateCell(10).SetCellValue(item.LanhDaoTrucBan);
                                rowTerminal.Cells[10].CellStyle = stylerow;

                                if (phieu != null)
                                {
                                    rowTerminal.CreateCell(11).SetCellValue(phieu.plv_LoaiPhieu.TenLP);
                                    rowTerminal.Cells[11].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(11).SetCellValue("");
                                    rowTerminal.Cells[11].CellStyle = stylerow;
                                }

                                if (catDien != null)
                                {
                                    rowTerminal.CreateCell(12).SetCellValue(catDien.TenThuocTinh);
                                    rowTerminal.Cells[12].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(12).SetCellValue("");
                                    rowTerminal.Cells[12].CellStyle = stylerow;
                                }

                                if (tiepDia != null)
                                {
                                    rowTerminal.CreateCell(13).SetCellValue(tiepDia.TenThuocTinh);
                                    rowTerminal.Cells[13].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(13).SetCellValue("");
                                    rowTerminal.Cells[13].CellStyle = stylerow;
                                }

                                if (tinhChat != null)
                                {
                                    rowTerminal.CreateCell(14).SetCellValue(tinhChat.TenThuocTinh);
                                    rowTerminal.Cells[14].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(14).SetCellValue("");
                                    rowTerminal.Cells[14].CellStyle = stylerow;
                                }

                                if (item.TrangThai == 1)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Vừa tạo");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else if (item.TrangThai == 2)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Đã duyệt");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else if (item.TrangThai == 3)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Đã xong");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else if (item.TrangThai == 5)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Chuyển hoàn");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else if (item.TrangThai == 7)
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("Hủy bỏ");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(15).SetCellValue("");
                                    rowTerminal.Cells[15].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(16).SetCellValue(item.LyDoThayDoi);
                                rowTerminal.Cells[16].CellStyle = stylerow;

                                if (item.LoaiPhieu == 1)
                                {
                                    rowTerminal.CreateCell(17).SetCellValue("Phiếu công tác");
                                    rowTerminal.Cells[17].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(17).SetCellValue("Lệnh công tác");
                                    rowTerminal.Cells[17].CellStyle = stylerow;
                                }

                                if (item.IsKiemTra != null && item.IsKiemTra == true)
                                {
                                    string str = "Đã kiểm tra";
                                    if (item.NgayGioKT != null)
                                    {
                                        str = str + " " + String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayGioKT);
                                    }
                                    rowTerminal.CreateCell(18).SetCellValue(str);
                                    rowTerminal.Cells[18].CellStyle = stylerow;
                                }
                                else
                                {
                                    rowTerminal.CreateCell(18).SetCellValue("Chưa kiểm tra");
                                    rowTerminal.Cells[18].CellStyle = stylerow;
                                }

                                rowTerminal.CreateCell(19).SetCellValue(String.Format("{0:d/M/yyyy HH:mm:ss}", item.NgayKetThuc));
                                rowTerminal.Cells[19].CellStyle = stylerow;

                                rowTerminal.CreateCell(20).SetCellValue(item.NguoiKetThuc);
                                rowTerminal.Cells[20].CellStyle = stylerow;

                                rowTerminal.CreateCell(21).SetCellValue("");
                                rowTerminal.Cells[21].CellStyle = stylerow;

                                rowTerminal.CreateCell(22).SetCellValue(item.SoPhieu);
                                rowTerminal.Cells[22].CellStyle = stylerow;

                                rowIndex++;
                            }
                        }
                    }

                    i = 0;
                }


                ICellStyle styleFooter2 = workbook.CreateCellStyle();
                IFont fontF2 = workbook.CreateFont();
                fontF2.FontName = "Times New Roman";
                fontF2.Boldweight = (short)FontBoldWeight.Bold;
                fontF2.IsItalic = true;
                fontF2.FontHeightInPoints = 12;
                styleFooter2.SetFont(fontF2);
                styleFooter2.VerticalAlignment = VerticalAlignment.Top;
                styleFooter2.Alignment = HorizontalAlignment.Left;
                styleFooter2.WrapText = true;

                ICellStyle styleFooter3 = workbook.CreateCellStyle();
                IFont fontF3 = workbook.CreateFont();
                fontF3.FontName = "Times New Roman";
                fontF3.FontHeightInPoints = 12;
                styleFooter3.SetFont(fontF3);
                styleFooter3.VerticalAlignment = VerticalAlignment.Top;
                styleFooter3.Alignment = HorizontalAlignment.Left;
                styleFooter3.WrapText = true;

                //Footer
                ICellStyle styleFooter5 = workbook.CreateCellStyle();
                IFont fontF5 = workbook.CreateFont();
                fontF5.FontName = "Times New Roman";
                fontF5.Boldweight = (short)FontBoldWeight.Bold;
                fontF5.FontHeightInPoints = 12;
                styleFooter5.SetFont(fontF5);
                styleFooter5.VerticalAlignment = VerticalAlignment.Top;
                styleFooter5.Alignment = HorizontalAlignment.Center;
                styleFooter5.WrapText = true;

                if (donviId == null)
                {
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Như trên;");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để b/c); (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - PGĐ KTSX-AT; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - P.KT, B2; BCBSX BLV; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - 14 Điện lực, TTTNĐ, XN Cao thế; (Eoffice)");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    rowTerminal.CreateCell(4).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[0].CellStyle = styleFooter5;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(6).SetCellValue("");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("Phùng Hữu Đương");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                }
                else
                {
                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue("Nơi nhận:");
                    rowTerminal.Cells[0].Row.Height = 350;
                    rowTerminal.Cells[0].CellStyle = styleFooter2;

                    rowTerminal.CreateCell(4).SetCellValue("KTVATCT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 4, 5));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(6).SetCellValue("TP.KH-KT-AT");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 6, 7));
                    rowTerminal.Cells[2].CellStyle = styleFooter5;

                    rowTerminal.CreateCell(8).SetCellValue("KT. GIÁM ĐÔC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[3].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Phòng AT Cty (để b/cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowTerminal.CreateCell(8).SetCellValue("PHÓ GIÁM ĐỐC");
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 8, 9));
                    rowTerminal.Cells[1].CellStyle = styleFooter5;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Giám đốc (để báo cáo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các PGĐ (để chỉ đạo);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Các Phòng, Đội (để thực hiện);");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                    rowIndex++;
                    rowTerminal = sheet.CreateRow(rowIndex);
                    sheet.AddMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 2));
                    rowTerminal.CreateCell(0).SetCellValue(" - Lưu: VT, KH-KT-AT.");
                    rowTerminal.Cells[0].CellStyle = styleFooter3;
                    rowTerminal.Cells[0].Row.Height = 350;

                }


                #endregion


                #region export
                // Save the Excel spreadsheet to a MemoryStream and return it to the client
                using (var exportData = new MemoryStream())
                {
                    workbook.Write(exportData);
                    string strFileName = "";
                    if (donviId == null)
                    {
                        strFileName = string.Format("Ctybc-Bsung_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    else
                    {
                        strFileName = string.Format("Dvibc-Bsung_{0}.xlsx", DateTime.Now).Replace("/", "-");
                    }
                    string saveAsFileName = strFileName;
                    Response.Clear();
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", saveAsFileName));
                    //Response.BinaryWrite(exportData.GetBuffer());
                    Response.BinaryWrite(exportData.ToArray());
                    Response.End();
                }

                this.SetNotification("Xuất dữ liệu báo cáo ngày thành cômg!", NotificationEnumeration.Success, true);
                #endregion

            }
            catch (Exception ex)
            {
                this.SetNotification("Không xuất được dữ liệu: " + ex.Message, NotificationEnumeration.Error, true);
            }
        }

        public ActionResult ExportBS_Cty(string DateFrom, string DonViId, int phongBanId, bool? isExportExcel)
        {
            try
            {
                string donviId = null;
                try
                {
                    if (Session["DonViID"] != null)
                        donviId = Session["DonViID"].ToString();
                }
                catch { }


                if (string.IsNullOrEmpty(DateFrom))
                {
                    DateFrom = string.Format("{0:dd/MM/yyyy}", DateTime.Now);
                }

                List<PhienLVModel> modelTotal = new List<PhienLVModel>();
                List<PhienLVModel> model = new List<PhienLVModel>();

                //List<string> lstdv = new List<string>();

                //if (donviId == null)
                //{
                //    lstdv = DonViRepository.GetAllDonViID(null);
                //}
                //else
                //{

                if (phongBanId == 0)
                {
                    var listDonViCon = _dvi_ser.List().Where(x => x.DviCha.Equals(DonViId)).Select(x => x.Id).ToList();
                    var lstdv = _dvi_ser.List().Where(x => x.Id.Equals(DonViId) || (listDonViCon != null && listDonViCon.Count > 0 && listDonViCon.Contains(x.Id))).ToList();
                    //}

                    if (lstdv.Count() > 0)
                    {
                        foreach (var item in lstdv)
                        {

                            model = _plviec_ser.ExportPhienLv("", 1, 0, DateFrom, DateFrom, item.Id, phongBanId).ToList();
                            foreach (var it in model)
                            {
                                modelTotal.Add(it);
                            }

                        }
                    }
                }
                else
                {
                    modelTotal = _plviec_ser.ExportPhienLv("", 1, 0, DateFrom, DateFrom, DonViId, phongBanId).ToList();
                }

                if (isExportExcel ?? false)
                    ExportExcelFromListBS_Cty(modelTotal, DateFrom);

                DisposeAll();

                return View();
            }
            catch (Exception ex)
            {
                DisposeAll();

                return View();
            }
        }

        #endregion

        #region Count Image of PhienLv
        public string CountImage(int? id)
        {
            int numImg = 0;
            try
            {
                if (id != null && id.HasValue)
                {
                    numImg = _plviec_ser.CountImagePLV(id.Value);
                    if (numImg > 0)
                        return "<b style='color:green;font-size:16px;'>" + numImg.ToString() + "</b>";
                    else
                    {
                        return "<b style='color:red;font-size:16px;'>" + numImg.ToString() + "</b>";
                    }
                }
                else
                {
                    return "<b style='color:red;font-size:16px;'>" + numImg.ToString() + "</b>";
                }

            }
            catch (Exception ex)
            {
                return "<b style='color:red;font-size:16px;'>" + ex.ToString() + "</b>";
            }
        }
        #endregion

        public class ApiResponse
        {
            public bool Success { get; set; }
            public string Error { get; set; }
        }

        #region DuyetPhienLv
        [HttpGet]
        public async Task<ActionResult> DuyetPhienLv(string Id)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();
                tblPhienLamViec plv = new tblPhienLamViec();
                plv.Id = int.Parse(Id);
                plv.TrangThai = (int)TrangThaiPhienLV.DaDuyet;
                plv.NgayDuyet = DateTime.Now;
                plv.NguoiDuyet = User.Identity.Name;

                kt = _plviec_ser.PhienLamViec_Duyet(plv);
                if (kt == "")
                {


                    plv = _plviec_ser.GetById(plv.Id);

                    string userName = WebConfigurationManager.AppSettings["userEmail"];
                    string password = WebConfigurationManager.AppSettings["passEmail"];

                    IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                    var model = baseConverter.ConvertObject(plv);

                    tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                    if (nv != null)
                    {
                        userPushNotificationWeb.Add(nv.Username);

                        Message message = new Message();
                        message.NoiDung = model.NoiDung + " vừa được duyệt bởi " + User.Identity.Name;
                        message.NgayTao = DateTime.Now;
                        message.NguoiTao = User.Identity.Name;
                        message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                        message.MaTaiKhoan = nv.Id;
                        message.TrangThai = (int)TrangThaiMessage.UnRead;
                        message.MA_DVIQLY = nv.DonViId;
                        message.MA_PBAN = model.PhongBanID.ToString();
                        message.PhienLamViecId = model.Id;

                        string errorMessage = "";

                        try
                        {
                            var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                            messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                        }
                        catch
                        {
                        }

                        try
                        {
                            tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                            nhatKy.PhienLamViecId = plv.Id;
                            nhatKy.NgayTao = DateTime.Now;
                            nhatKy.NguoiTao = User.Identity.Name;
                            nhatKy.DonViId = plv.DonViId;
                            nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.VuaTao;
                            nhatKy.TrangThaiMoi = (int)TrangThaiPhienLV.DaDuyet;
                            nhatKy.GhiChu = "Duyệt công việc";
                            nhatKy.PhongBanId = plv.PhongBanID;

                            string strError = "";
                            nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                        }
                        catch
                        {
                        }

                        //try
                        //{
                        //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                        //    noti.title = "Phiên làm việc vừa được duyệt";
                        //    noti.body = plv.NoiDung + " vừa được duyệt bởi " + User.Identity.Name;
                        //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                        //    noti.tag = model.Id.ToString();

                        //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                        //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                        //    {
                        //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                        //        connection.Start().Wait();
                        //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                        //    }
                        //}
                        //catch (Exception ex)
                        //{

                        //}
                    }

                    ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                    ///
                    #region Notify mobile khi update phiên
                    // plv = _plviec_ser.GetById(plv.Id);

                    var userIds = new List<string>
                    {
                     plv.NguoiDuyet_SoPa_Id,
                     plv.NguoiChiHuy_Id,
                     plv.GiamSatVien_Id,
                     plv.NguoiKiemSoat_Id,
                     plv.NguoiKiemTraPhieu_Id,
                     plv.LanhDaoTrucBan_Id,
                     plv.LanhDaoCongViec_Id,
                     plv.NguoiCapPhieu_Id,
                     //plv.NguoiDaiDienKT_Id // Phiên làm việc
                    }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList();
                    if (userIds.Any())
                    {
                        var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                        foreach (var userId in userIds)
                        {
                            var requestData = new
                            {
                                IDConect = "PN",
                                userId = userId,
                                title = "Duyệt phiên làm việc",
                                name = "NPCIT",
                                header = " ",
                                subtitle = " ",
                                contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Duyệt phiên làm việc",
                            };

                            var jsonContent = JsonConvert.SerializeObject(requestData);
                            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                            using (HttpClient httpClient = new HttpClient())
                            {
                                var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                var response = await httpClient.PostAsync(Api_Notify, content);

                                if (response.IsSuccessStatusCode)
                                {
                                    var result = await response.Content.ReadAsStringAsync();
                                    var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                    if (!apiResponse.Success)
                                    {
                                        //return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }

                        //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                    }


                    #endregion

                    DisposeAll();

                    return Json(new { success = true, responseText = "Duyệt phiên làm việc thành công" }, JsonRequestBehavior.AllowGet);
                }

                DisposeAll();

                return Json(new { success = false, responseText = "Duyệt phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt phiên làm việc. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region DuyetAllPhieuLenh
        [HttpPost]
        public async Task<ActionResult> DuyetAllPhienLv(List<string> listId)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();
                if (listId != null && listId.Count > 0)
                {
                    List<PhienLamViecResponse> json = new List<PhienLamViecResponse>();
                    string error = "Phiên làm việc: ";

                    foreach (var Id in listId)
                    {
                        tblPhienLamViec plv = new tblPhienLamViec();
                        plv.Id = int.Parse(Id);
                        plv.TrangThai = (int)TrangThaiPhienLV.DaDuyet;
                        plv.NgayDuyet = DateTime.Now;
                        plv.NguoiDuyet = User.Identity.Name;

                        kt = _plviec_ser.PhienLamViec_Duyet(plv);
                        if (kt == "")
                        {



                            plv = _plviec_ser.GetById(plv.Id);

                            #region Notify mobile khi update phiên

                            var userIds = new List<string>
                         {
                              plv.NguoiDuyet_SoPa_Id,
                              plv.NguoiChiHuy_Id,
                              plv.GiamSatVien_Id,
                              plv.NguoiKiemSoat_Id,
                              plv.NguoiKiemTraPhieu_Id,
                              plv.LanhDaoTrucBan_Id,
                              plv.LanhDaoCongViec_Id,
                              plv.NguoiCapPhieu_Id,
                            //plv.NguoiDaiDienKT_Id // Phiên làm việc
                         }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList();
                            if (userIds.Any())
                            {
                                var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                                foreach (var userId in userIds)
                                {
                                    var requestData = new
                                    {
                                        IDConect = "PN",
                                        userId = userId,
                                        title = "Duyệt phiên làm việc",
                                        name = "NPCIT",
                                        header = "header",
                                        subtitle = " ",
                                        contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Duyệt phiên làm việc",
                                    };

                                    var jsonContent = JsonConvert.SerializeObject(requestData);
                                    var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                                    using (HttpClient httpClient = new HttpClient())
                                    {
                                        var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                        var response = await httpClient.PostAsync(Api_Notify, content);

                                        if (response.IsSuccessStatusCode)
                                        {
                                            var result = await response.Content.ReadAsStringAsync();
                                            var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                            if (!apiResponse.Success)
                                            {
                                                //return Json(new { success = false, responseText = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                            }
                                        }
                                    }
                                }

                                //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {
                                //return Json(new { success = false, responseText = "Không có nguòi nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                            }


                            #endregion

                            string userName = WebConfigurationManager.AppSettings["userEmail"];
                            string password = WebConfigurationManager.AppSettings["passEmail"];

                            IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                            var model = baseConverter.ConvertObject(plv);

                            tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                            if (nv != null)
                            {
                                userPushNotificationWeb.Add(nv.Username);

                                Message message = new Message();
                                message.NoiDung = model.NoiDung + " vừa được duyệt bởi " + User.Identity.Name;
                                message.NgayTao = DateTime.Now;
                                message.NguoiTao = User.Identity.Name;
                                message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                message.MaTaiKhoan = nv.Id;
                                message.TrangThai = (int)TrangThaiMessage.UnRead;
                                message.MA_DVIQLY = nv.DonViId;
                                message.MA_PBAN = model.PhongBanID.ToString();
                                message.PhienLamViecId = model.Id;

                                string errorMessage = "";

                                try
                                {
                                    var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                    messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                }
                                catch
                                {
                                }

                                //try
                                //{
                                //    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietCongViecNhanVienEmail.cshtml", model);
                                //    await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo duyệt công việc", html));
                                //}
                                //catch
                                //{
                                //}

                                //try
                                //{
                                //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                //    TwilioClient.Init(accountSid, authToken);

                                //    var from = new PhoneNumber(fromPhoneNumber);
                                //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                                //    var sms = await Task.Run(() => MessageResource.Create(
                                //        to: to,
                                //        from: from,
                                //        body: plv.NoiDung + " vừa được duyệt bởi " + User.Identity.Name));
                                //}
                                //catch (Exception e)
                                //{

                                //}

                                try
                                {
                                    tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                    nhatKy.PhienLamViecId = plv.Id;
                                    nhatKy.NgayTao = DateTime.Now;
                                    nhatKy.NguoiTao = User.Identity.Name;
                                    nhatKy.DonViId = plv.DonViId;
                                    nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.VuaTao;
                                    nhatKy.TrangThaiMoi = (int)TrangThaiPhienLV.DaDuyet;
                                    nhatKy.GhiChu = "Duyệt công việc";
                                    nhatKy.PhongBanId = plv.PhongBanID;

                                    string strError = "";
                                    nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                                }
                                catch
                                {

                                }

                                //try
                                //{
                                //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                                //    noti.title = "Phiên làm việc vừa được duyệt";
                                //    noti.body = plv.NoiDung + " vừa được duyệt bởi " + User.Identity.Name;
                                //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                                //    noti.tag = model.Id.ToString();

                                //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                                //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                                //    {
                                //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                                //        connection.Start().Wait();
                                //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                                //    }
                                //}
                                //catch (Exception ex)
                                //{

                                //}
                            }

                            ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                            var jsonDuyetPhienLV = new PhienLamViecResponse()
                            {
                                success = true,
                                responseText = ""
                            };

                            json.Add(jsonDuyetPhienLV);
                        }
                        else
                        {
                            var jsonDuyetPhienLV = new PhienLamViecResponse()
                            {
                                success = false,
                                responseText = ""
                            };

                            json.Add(jsonDuyetPhienLV);

                            error += plv.Id + " ";
                        }
                    }


                    var check = json.Where(x => x.success == false).FirstOrDefault();

                    if (check != null)
                    {
                        error += "không thành công!";
                        DisposeAll();

                        return Json(new { success = false, responseText = error, isDuyet = false }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        DisposeAll();
                        return Json(new { success = true, responseText = "Duyệt phiên làm việc thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Duyệt phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt phiên làm việc. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<ActionResult> DuyetAllPhieuLenh(List<string> listId)
        {
            string kt = "";
            try
            {
                //List<string> userPushNotificationWeb = new List<string>();
                //Dictionary<string, int> messageList = new Dictionary<string, int>();
                if (listId != null && listId.Count > 0)
                {
                    List<PhienLamViecResponse> json = new List<PhienLamViecResponse>();
                    string error = "Phiên làm việc: ";

                    foreach (var Id in listId)
                    {
                        string errorUpdatePhieuCongTac = "";
                        int phieuLenhId = int.Parse(Id);
                        plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(phieuLenhId);
                        phieuCongTacObj.MaTT = (int)TrangThaiPhienLV.DaDuyet;
                        phieuCongTacObj.NgayDuyet = DateTime.Now;
                        phieuCongTacObj.NguoiDuyet = User.Identity.Name;

                        int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                        string phieuLenh = " [ Phiếu Công Tác ] ";
                        if (phieuCongTacObj.MaLP == 2)
                        {
                            phieuLenh = " [ Lệnh Công Tác ] ";
                        }
                        tblPhienLamViec plv = _plviec_ser.GetByMaPhieuCongTac(idPhieuCongTac);
                        if (idPhieuCongTac > 0)
                        {


                            //string userName = WebConfigurationManager.AppSettings["userEmail"];
                            //string password = WebConfigurationManager.AppSettings["passEmail"];

                            //IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                            //var model = baseConverter.ConvertObject(plv);

                            //tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                            //if (nv != null)
                            //{
                            //    userPushNotificationWeb.Add(nv.Username);

                            //    Message message = new Message();
                            //    message.NoiDung = phieuLenh + model.NoiDung + " vừa được duyệt bởi " + User.Identity.Name;
                            //    message.NgayTao = DateTime.Now;
                            //    message.NguoiTao = User.Identity.Name;
                            //    message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                            //    message.MaTaiKhoan = nv.Id;
                            //    message.TrangThai = (int)TrangThaiMessage.UnRead;
                            //    message.MA_DVIQLY = nv.DonViId;
                            //    message.MA_PBAN = model.PhongBanID.ToString();
                            //    message.PhienLamViecId = model.Id;

                            //    string errorMessage = "";

                            //    try
                            //    {
                            //        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                            //        messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                            //    }
                            //    catch
                            //    {
                            //    }

                            //    try
                            //    {
                            //        tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                            //        nhatKy.PhienLamViecId = plv.Id;
                            //        nhatKy.NgayTao = DateTime.Now;
                            //        nhatKy.NguoiTao = User.Identity.Name;
                            //        nhatKy.DonViId = plv.DonViId;
                            //        nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.VuaTao;
                            //        nhatKy.TrangThaiMoi = (int)TrangThaiPhienLV.DaDuyet;
                            //        nhatKy.GhiChu = "Duyệt" + phieuLenh;
                            //        nhatKy.PhongBanId = plv.PhongBanID;

                            //        string strError = "";
                            //        nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                            //    }
                            //    catch
                            //    {

                            //    }

                            //    try
                            //    {
                            //        NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                            //        noti.title = phieuLenh + "vừa được duyệt";
                            //        noti.body = phieuLenh + plv.NoiDung + " vừa được duyệt bởi " + User.Identity.Name;
                            //        noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                            //        noti.tag = model.Id.ToString();

                            //        string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                            //        using (var connection = new HubConnection(url, useDefaultUrl: false))
                            //        {
                            //            IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //            connection.Start().Wait();
                            //            hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //        }
                            //    }
                            //    catch (Exception ex)
                            //    {

                            //    }
                            //}

                            ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt " + phieuLenh + " {1} thành công", User.Identity.Name, plv.NoiDung));
                            var jsonDuyetPhienLV = new PhienLamViecResponse()
                            {
                                success = true,
                                responseText = ""
                            };

                            json.Add(jsonDuyetPhienLV);
                        }
                        else
                        {
                            var jsonDuyetPhienLV = new PhienLamViecResponse()
                            {
                                success = false,
                                responseText = ""
                            };

                            json.Add(jsonDuyetPhienLV);

                            error += plv.Id + " ";
                        }

                    }


                    var check = json.Where(x => x.success == false).FirstOrDefault();

                    if (check != null)
                    {
                        error += "không thành công!";
                        DisposeAll();

                        return Json(new { success = false, responseText = error, isDuyet = false }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        DisposeAll();
                        return Json(new { success = true, responseText = "Duyệt Phiếu/Lệnh thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Duyệt Phiếu/Lệnh không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                ////NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt phiên làm việc. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public async Task<ActionResult> DuyetPhieuLenh(string Id)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();

                string errorUpdatePhieuCongTac = "";
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(int.Parse(Id));
                phieuCongTacObj.MaTT = 2;
                phieuCongTacObj.NgayDuyet = DateTime.Now;
                phieuCongTacObj.NguoiDuyet = User.Identity.Name;

                int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                string phieuLenh = " [ Phiếu Công Tác ] ";
                if (phieuCongTacObj.MaLP == 2)
                {
                    phieuLenh = " [ Lệnh Công Tác ] ";
                }
                if (idPhieuCongTac > 0)
                {

                    tblPhienLamViec plv = _plviec_ser.GetByMaPhieuCongTac(idPhieuCongTac);

                    string userName = WebConfigurationManager.AppSettings["userEmail"];
                    string password = WebConfigurationManager.AppSettings["passEmail"];

                    IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                    var model = baseConverter.ConvertObject(plv);
                    #region Gửi notify mobile
                    var userIds = new List<string>
                    {
                     plv.NguoiDuyet_SoPa_Id,
                     plv.NguoiChiHuy_Id,
                     plv.GiamSatVien_Id,
                     plv.NguoiKiemSoat_Id,
                     plv.NguoiKiemTraPhieu_Id,
                     plv.LanhDaoTrucBan_Id,
                     plv.LanhDaoCongViec_Id,
                     plv.NguoiCapPhieu_Id,
                     //plv.NguoiDaiDienKT_Id // Phiên làm việc
                    }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList(); // Loại bỏ Id null hoặc rỗng
                    if (userIds.Any())
                    {
                        var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                        foreach (var userId in userIds)
                        {
                            var requestData = new
                            {
                                IDConect = "PN",
                                userId = userId,
                                title = "Duyệt công việc",
                                name = "NPCIT",
                                header = "header",
                                subtitle = " ",
                                contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Duyệt công việc",
                            };

                            var jsonContent = JsonConvert.SerializeObject(requestData);
                            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                            using (HttpClient httpClient = new HttpClient())
                            {
                                var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                var response = await httpClient.PostAsync(Api_Notify, content);

                                if (response.IsSuccessStatusCode)
                                {
                                    var result = await response.Content.ReadAsStringAsync();
                                    var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                    if (!apiResponse.Success)
                                    {
                                        return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }

                        //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                    }

                    #endregion
                    //tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                    //if (nv != null)
                    //{
                    //    userPushNotificationWeb.Add(nv.Username);

                    //    Message message = new Message();
                    //    message.NoiDung = phieuLenh + model.NoiDung + " vừa được duyệt bởi " + User.Identity.Name;
                    //    message.NgayTao = DateTime.Now;
                    //    message.NguoiTao = User.Identity.Name;
                    //    message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                    //    message.MaTaiKhoan = nv.Id;
                    //    message.TrangThai = (int)TrangThaiMessage.UnRead;
                    //    message.MA_DVIQLY = nv.DonViId;
                    //    message.MA_PBAN = model.PhongBanID.ToString();
                    //    message.PhienLamViecId = model.Id;

                    //    string errorMessage = "";

                    //    try
                    //    {
                    //        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                    //        messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                    //    }
                    //    catch
                    //    {
                    //    }

                    //    try
                    //    {
                    //        tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                    //        nhatKy.PhienLamViecId = plv.Id;
                    //        nhatKy.NgayTao = DateTime.Now;
                    //        nhatKy.NguoiTao = User.Identity.Name;
                    //        nhatKy.DonViId = plv.DonViId;
                    //        nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.VuaTao;
                    //        nhatKy.TrangThaiMoi = (int)TrangThaiPhienLV.DaDuyet;
                    //        nhatKy.GhiChu = "Duyệt" + phieuLenh;
                    //        nhatKy.PhongBanId = plv.PhongBanID;

                    //        string strError = "";
                    //        nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                    //    }
                    //    catch
                    //    {
                    //    }

                    //}

                    ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt" + phieuLenh + " {1} thành công", User.Identity.Name, plv.NoiDung));

                    DisposeAll();

                    return Json(new { success = true, responseText = "Duyệt" + phieuLenh + "thành công" }, JsonRequestBehavior.AllowGet);
                }

                DisposeAll();

                return Json(new { success = false, responseText = "Duyệt" + phieuLenh + "không thành công" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt Phiếu/Lệnh. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt Phiếu/Lệnh không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public async Task<ActionResult> HuyDuyetPhieuLenh(string Id)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();

                string errorUpdatePhieuCongTac = "";
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(int.Parse(Id));
                phieuCongTacObj.MaTT = 1;
                phieuCongTacObj.NgayDuyet = null;
                phieuCongTacObj.NguoiDuyet = null;

                int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                string phieuLenh = " [ Phiếu Công Tác ] ";
                if (phieuCongTacObj.MaLP == 2)
                {
                    phieuLenh = " [ Lệnh Công Tác ] ";
                }

                if (phieuCongTacObj.SoPhieu != null)
                {
                    return Json(new { success = false, responseText = "Không thể hủy do " + phieuLenh + " đã cấp số." }, JsonRequestBehavior.AllowGet);
                }

                if (idPhieuCongTac > 0)
                {

                    tblPhienLamViec plv = _plviec_ser.GetByMaPhieuCongTac(idPhieuCongTac);

                    //string userName = WebConfigurationManager.AppSettings["userEmail"];
                    //string password = WebConfigurationManager.AppSettings["passEmail"];

                    //IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                    //var model = baseConverter.ConvertObject(plv);

                    //tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                    //if (nv != null)
                    //{
                    //    userPushNotificationWeb.Add(nv.Username);

                    //    Message message = new Message();
                    //    message.NoiDung = phieuLenh + model.NoiDung + " vừa được duyệt bởi " + User.Identity.Name;
                    //    message.NgayTao = DateTime.Now;
                    //    message.NguoiTao = User.Identity.Name;
                    //    message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                    //    message.MaTaiKhoan = nv.Id;
                    //    message.TrangThai = (int)TrangThaiMessage.UnRead;
                    //    message.MA_DVIQLY = nv.DonViId;
                    //    message.MA_PBAN = model.PhongBanID.ToString();
                    //    message.PhienLamViecId = model.Id;

                    //    string errorMessage = "";

                    //    try
                    //    {
                    //        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                    //        messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                    //    }
                    //    catch
                    //    {
                    //    }

                    try
                    {
                        tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                        nhatKy.PhienLamViecId = plv.Id;
                        nhatKy.NgayTao = DateTime.Now;
                        nhatKy.NguoiTao = User.Identity.Name;
                        nhatKy.DonViId = plv.DonViId;
                        nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.DaDuyet;
                        nhatKy.TrangThaiMoi = 1;
                        nhatKy.GhiChu = "Hủy Duyệt" + phieuLenh;
                        nhatKy.PhongBanId = plv.PhongBanID;

                        string strError = "";
                        nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                    }
                    catch
                    {
                    }

                    //}

                    ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt" + phieuLenh + " {1} thành công", User.Identity.Name, plv.NoiDung));

                    DisposeAll();

                    return Json(new { success = true, responseText = "Hủy duyệt " + phieuLenh + " thành công" }, JsonRequestBehavior.AllowGet);
                }

                DisposeAll();

                return Json(new { success = false, responseText = "Hủy duyệt " + phieuLenh + " không thành công" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt Phiếu/Lệnh. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt Phiếu/Lệnh không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<ActionResult> CapSoAllPhieuLenh(List<string> listId)
        {
            string kt = "";
            try
            {
                //List<string> userPushNotificationWeb = new List<string>();
                //Dictionary<string, int> messageList = new Dictionary<string, int>();
                if (listId != null && listId.Count > 0)
                {
                    List<PhienLamViecResponse> json = new List<PhienLamViecResponse>();
                    string error = "Phiếu/Lệnh công tác: ";

                    foreach (var Id in listId)
                    {
                        string errorUpdatePhieuCongTac = "";
                        int phieuLenhId = int.Parse(Id);
                        plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(phieuLenhId);

                        if (string.IsNullOrEmpty(phieuCongTacObj.SoPhieu) && !string.IsNullOrEmpty(phieuCongTacObj.NguoiDuyet))
                        {
                            #region sinh ma tu dong
                            try
                            {
                                DateTime now = DateTime.Now;

                                #region check chuyen thang
                                var objCT = _thanglamviec_ser._GetMaxByDonViIdPhanHe(Session["DonViID"].ToString(), "CT");
                                if (objCT != null)
                                {
                                    if ((objCT.Nam >= now.Year && objCT.Thang >= now.Month) || (objCT.Nam > now.Year && objCT.Thang < now.Month))
                                        now = new DateTime(objCT.Nam ?? 0, objCT.Thang ?? 0, 1);
                                    else
                                        continue;
                                }
                                #endregion

                                var data = _SoPhieuHienTai_ser.GetObjByDate(System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString,
                                    now.Month.ToString(), now.Year.ToString(),
                                    Session["DonViID"].ToString(), phieuCongTacObj.MaLP.ToString(), phieuCongTacObj.TramId.ToString());
                                if (data != null)
                                {
                                    if (string.IsNullOrEmpty(data.SoPhieu))
                                    {
                                        string sophieu = "00001/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2);
                                        phieuCongTacObj.SoPhieu = sophieu;
                                    }
                                    else
                                    {
                                        string sophieu = NextID(data.SoPhieu, "/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2), phieuCongTacObj.MaLP ?? 1, phieuCongTacObj.TramId.ToString());
                                        phieuCongTacObj.SoPhieu = sophieu;
                                    }
                                }
                                else
                                {
                                    string sophieu = "00001/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2);
                                    phieuCongTacObj.SoPhieu = sophieu;
                                }

                                #region Luu lich su cap phieu
                                string errls = "";
                                plv_LichSuCapSoPhieu objls = new plv_LichSuCapSoPhieu();
                                objls.MaLP = phieuCongTacObj.MaLP;
                                objls.NgayTao = DateTime.Now;
                                objls.NguoiTao = User.Identity.Name;
                                objls.SoPhieu = phieuCongTacObj.SoPhieu;
                                objls.DonViId = Session["DonViID"].ToString();
                                objls.MaPCT = phieuCongTacObj.ID;
                                objls.Thang = now.Month;
                                objls.Nam = now.Year;
                                _lsCapSoPhieu_ser.Create(objls, ref errls);
                                var dtSP = _SoPhieuHienTai_ser.GetObjByDonVi(System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString,
                                    Session["DonViID"].ToString(), phieuCongTacObj.MaLP.ToString(), phieuCongTacObj.TramId.ToString());
                                if (dtSP != null)
                                {
                                    dtSP.NgayTao = DateTime.Now;
                                    dtSP.NguoiTao = User.Identity.Name;
                                    dtSP.SoPhieu = phieuCongTacObj.SoPhieu;
                                    dtSP.MaPCT = phieuCongTacObj.ID;
                                    dtSP.Thang = now.Month;
                                    dtSP.Nam = now.Year;
                                    _SoPhieuHienTai_ser.Update(dtSP, ref errls);
                                }
                                else
                                {
                                    plv_SoPhieuHienTai objht = new plv_SoPhieuHienTai();
                                    objht.MaLP = phieuCongTacObj.MaLP;
                                    objht.NgayTao = DateTime.Now;
                                    objht.NguoiTao = User.Identity.Name;
                                    objht.SoPhieu = phieuCongTacObj.SoPhieu;
                                    objht.DonViId = Session["DonViID"].ToString();
                                    objht.MaPCT = phieuCongTacObj.ID;
                                    objht.Thang = now.Month;
                                    objht.Nam = now.Year;
                                    _SoPhieuHienTai_ser.Create(objht, ref errls);
                                }
                                #endregion
                            }
                            catch (Exception ex)
                            {
                            }
                            #endregion
                        }

                        //var nvcp = _nhanvien_ser.GetByUserName(User.Identity.Name);
                        //phieuCongTacObj.NguoiCapPhieu = nvcp.TenNhanVien + " - " + nvcp.SoDT;
                        //phieuCongTacObj.NguoiCapPhieu_Id = User.Identity.Name;


                        int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                        string phieuLenh = " [ Phiếu Công Tác ] ";
                        if (phieuCongTacObj.MaLP == 2)
                        {
                            phieuLenh = " [ Lệnh Công Tác ] ";
                        }
                        tblPhienLamViec plv = _plviec_ser.GetByMaPhieuCongTac(idPhieuCongTac);

                        #region Gửi notify mobile
                        var userIds = new List<string>
                    {
                     plv.NguoiDuyet_SoPa_Id,
                     plv.NguoiChiHuy_Id,
                     plv.GiamSatVien_Id,
                     plv.NguoiKiemSoat_Id,
                     plv.NguoiKiemTraPhieu_Id,
                     plv.LanhDaoTrucBan_Id,
                     plv.LanhDaoCongViec_Id,
                     plv.NguoiCapPhieu_Id,
                     //plv.NguoiDaiDienKT_Id // Phiên làm việc
                    }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList(); // Loại bỏ Id null hoặc rỗng
                        if (userIds.Any())
                        {
                            var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                            foreach (var userId in userIds)
                            {
                                var requestData = new
                                {
                                    IDConect = "PN",
                                    userId = userId,
                                    title = "Cấp số phiên làm việc",
                                    name = "NPCIT",
                                    header = "header",
                                    subtitle = " ",
                                    contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Cấp số phiên làm việc",
                                };

                                var jsonContent = JsonConvert.SerializeObject(requestData);
                                var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                                using (HttpClient httpClient = new HttpClient())
                                {
                                    var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                    var response = await httpClient.PostAsync(Api_Notify, content);

                                    if (response.IsSuccessStatusCode)
                                    {
                                        var result = await response.Content.ReadAsStringAsync();
                                        var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                        if (!apiResponse.Success)
                                        {
                                            return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                }
                            }

                            //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                        }

                        #endregion

                        if (idPhieuCongTac > 0)
                        {


                            // string userName = WebConfigurationManager.AppSettings["userEmail"];
                            //string password = WebConfigurationManager.AppSettings["passEmail"];

                            // IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                            // var model = baseConverter.ConvertObject(plv);

                            //tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                            //if (nv != null)
                            //{
                            //    userPushNotificationWeb.Add(nv.Username);

                            //    Message message = new Message();
                            //    message.NoiDung = phieuLenh + model.NoiDung + " vừa được cấp số bởi " + User.Identity.Name;
                            //    message.NgayTao = DateTime.Now;
                            //    message.NguoiTao = User.Identity.Name;
                            //    message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                            //    message.MaTaiKhoan = nv.Id;
                            //    message.TrangThai = (int)TrangThaiMessage.UnRead;
                            //    message.MA_DVIQLY = nv.DonViId;
                            //    message.MA_PBAN = model.PhongBanID.ToString();
                            //    message.PhienLamViecId = model.Id;

                            //    string errorMessage = "";

                            //    try
                            //    {
                            //        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                            //        messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                            //    }
                            //    catch
                            //    {
                            //    }

                            //    //try
                            //    //{
                            //    //    tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                            //    //    nhatKy.PhienLamViecId = plv.Id;
                            //    //    nhatKy.NgayTao = DateTime.Now;
                            //    //    nhatKy.NguoiTao = User.Identity.Name;
                            //    //    nhatKy.DonViId = plv.DonViId;
                            //    //    nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.VuaTao;
                            //    //    nhatKy.TrangThaiMoi = (int)TrangThaiPhienLV.DaDuyet;
                            //    //    nhatKy.GhiChu = "Cấp số" + phieuLenh;
                            //    //    nhatKy.PhongBanId = plv.PhongBanID;

                            //    //    string strError = "";
                            //    //    nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                            //    //}
                            //    //catch
                            //    //{

                            //    //}

                            //    try
                            //    {
                            //        NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                            //        noti.title = phieuLenh + "vừa được cấp số";
                            //        noti.body = phieuLenh + plv.NoiDung + " vừa được cấp số bởi " + User.Identity.Name;
                            //        noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                            //        noti.tag = model.Id.ToString();

                            //        string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                            //        using (var connection = new HubConnection(url, useDefaultUrl: false))
                            //        {
                            //            IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //            connection.Start().Wait();
                            //            hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //        }
                            //    }
                            //    catch (Exception ex)
                            //    {

                            //    }
                            //}

                            ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} cấp số " + phieuLenh + " {1} thành công", User.Identity.Name, plv.NoiDung));
                            var jsonDuyetPhienLV = new PhienLamViecResponse()
                            {
                                success = true,
                                responseText = ""
                            };

                            json.Add(jsonDuyetPhienLV);
                        }
                        else
                        {
                            var jsonDuyetPhienLV = new PhienLamViecResponse()
                            {
                                success = false,
                                responseText = ""
                            };

                            json.Add(jsonDuyetPhienLV);

                            error += plv.Id + " ";
                        }

                    }


                    var check = json.Where(x => x.success == false).FirstOrDefault();

                    if (check != null)
                    {
                        error += "không thành công!";
                        DisposeAll();

                        return Json(new { success = false, responseText = error, isDuyet = false }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        DisposeAll();
                        return Json(new { success = true, responseText = "Cấp số Phiếu/Lệnh thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Cấp số Phiếu/Lệnh không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                ////NLoger.Error("loggerDatabase", string.Format("Lỗi cấp số phiếu/lệnh công tác. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Cấp số phiếu/lệnh không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<ActionResult> CapSoPhieuLenh(string Id)
        {
            string kt = "";
            try
            {
                string errorUpdatePhieuCongTac = "";
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(int.Parse(Id));
                if (string.IsNullOrEmpty(phieuCongTacObj.NguoiDuyet))
                    return Json(new { success = false, responseText = "Phiếu/ Lệnh công tác chưa được duyệt !" }, JsonRequestBehavior.AllowGet);

                if (string.IsNullOrEmpty(phieuCongTacObj.SoPhieu))
                {
                    //#region sinh ma tu dong
                    ////  dungpv rem tạm begin
                    //try
                    //{
                    DateTime now = DateTime.Now;
                    string sophieu = "";
                    //    #region check chuyen thang
                    //var objCT = _thanglamviec_ser._GetMaxByDonViIdPhanHe(Session["DonViID"].ToString(), "CT");
                    //if (objCT != null)
                    //{
                    //    if ((objCT.Nam >= now.Year && objCT.Thang >= now.Month) || (objCT.Nam > now.Year && objCT.Thang < now.Month))
                    //        now = new DateTime(objCT.Nam ?? 0, objCT.Thang ?? 0, 1);
                    //    else
                    //        return Json(new { success = false, responseText = "Bạn chưa [Chuyển tháng lịch sử], vui lòng liên hệ với quản trị viên !" }, JsonRequestBehavior.AllowGet);
                    //}
                    //    #endregion

                    //var data = _SoPhieuHienTai_ser.GetObjByDate(System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString,
                    //            now.Month.ToString(), now.Year.ToString(),
                    //            Session["DonViID"].ToString(), phieuCongTacObj.MaLP.ToString(),
                    //            phieuCongTacObj.TramId.ToString());
                    //if (data != null)
                    //{
                    //    if (string.IsNullOrEmpty(data.SoPhieu))
                    //    {
                    //        sophieu = "00001/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2);
                    //        phieuCongTacObj.SoPhieu = sophieu;
                    //    }
                    //    else
                    //    {
                    //        sophieu = NextID(data.SoPhieu, "/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2), phieuCongTacObj.MaLP ?? 1, phieuCongTacObj.TramId.ToString());
                    //        phieuCongTacObj.SoPhieu = sophieu;
                    //    }
                    //}
                    //else
                    //{
                    //    sophieu = "00001/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2);
                    //    phieuCongTacObj.SoPhieu = sophieu;
                    //}

                    //    #region Luu lich su cap phieu
                    //    string errls = "";
                    //    plv_LichSuCapSoPhieu objls = new plv_LichSuCapSoPhieu();
                    //    objls.MaLP = phieuCongTacObj.MaLP;
                    //    objls.NgayTao = DateTime.Now;
                    //    objls.NguoiTao = User.Identity.Name;
                    //    objls.SoPhieu = phieuCongTacObj.SoPhieu;
                    //    objls.DonViId = Session["DonViID"].ToString();
                    //    objls.MaPCT = phieuCongTacObj.ID;
                    //    objls.Thang = now.Month;
                    //    objls.Nam = now.Year;
                    //    objls.TramId = phieuCongTacObj.TramId;
                    //    _lsCapSoPhieu_ser.Create(objls, ref errls);
                    //    var dtSP = _SoPhieuHienTai_ser.GetObjByDonVi(System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString,
                    //        Session["DonViID"].ToString(), phieuCongTacObj.MaLP.ToString(), phieuCongTacObj.TramId.ToString());
                    //    if (dtSP != null)
                    //    {
                    //        dtSP.NgayTao = DateTime.Now;
                    //        dtSP.NguoiTao = User.Identity.Name;
                    //        dtSP.SoPhieu = phieuCongTacObj.SoPhieu;
                    //        dtSP.MaPCT = phieuCongTacObj.ID;
                    //        dtSP.Thang = now.Month;
                    //        dtSP.Nam = now.Year;
                    //        _SoPhieuHienTai_ser.Update(dtSP, ref errls);
                    //    }
                    //    else
                    //    {
                    //        plv_SoPhieuHienTai objht = new plv_SoPhieuHienTai();
                    //        objht.MaLP = phieuCongTacObj.MaLP;
                    //        objht.NgayTao = DateTime.Now;
                    //        objht.NguoiTao = User.Identity.Name;
                    //        objht.SoPhieu = phieuCongTacObj.SoPhieu;
                    //        objht.DonViId = Session["DonViID"].ToString();
                    //        objht.MaPCT = phieuCongTacObj.ID;
                    //        objht.Thang = now.Month;
                    //        objht.Nam = now.Year;
                    //        objht.TramId = phieuCongTacObj.TramId;
                    //        _SoPhieuHienTai_ser.Create(objht, ref errls);
                    //    }
                    //    #endregion

                    //}
                    //catch (Exception ex)
                    //{
                    //}
                    //#endregion

                    // dungpv update số mới
                    //int sophieu= _pcongtac_ser.GetPhieuCTac(phieuCongTacObj.DonViId, DateTime.Now.Year, phieuCongTacObj.MaLP.Value);
                    //phieuCongTacObj.SoPhieu = sophieu + "/" + DateTime.Now.Year.ToString() + "/" + phieuCongTacObj.DonViId;

                    // Namcv update call store 05/03/2022
                    PhieuCongTacRepository pctRepo = new PhieuCongTacRepository();
                    sophieu = pctRepo.GetSoPhieuCtac(phieuCongTacObj.DonViId, DateTime.Now.Year, phieuCongTacObj.MaLP, Session["UserName"].ToString(), 0);
                    phieuCongTacObj.SoPhieu = sophieu;

                    //Cấp thành công thì cập nhật lịch sử cấp
                    #region Luu lich su cap phieu
                    string errls = "";
                    plv_LichSuCapSoPhieu objls = new plv_LichSuCapSoPhieu();
                    objls.MaLP = phieuCongTacObj.MaLP;
                    objls.NgayTao = DateTime.Now;
                    objls.NguoiTao = User.Identity.Name;
                    objls.SoPhieu = sophieu;
                    objls.DonViId = Session["DonViID"].ToString();
                    objls.MaPCT = phieuCongTacObj.ID;
                    objls.Thang = now.Month;
                    objls.Nam = now.Year;
                    objls.TramId = phieuCongTacObj.TramId;
                    _lsCapSoPhieu_ser.Create(objls, ref errls);
                    //var dtSP = _SoPhieuHienTai_ser.GetObjByDonVi(System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString,
                    //    Session["DonViID"].ToString(), phieuCongTacObj.MaLP.ToString(), phieuCongTacObj.TramId.ToString());
                    //if (dtSP != null)
                    //{
                    //    dtSP.NgayTao = DateTime.Now;
                    //    dtSP.NguoiTao = User.Identity.Name;
                    //    dtSP.SoPhieu = phieuCongTacObj.SoPhieu;
                    //    dtSP.MaPCT = phieuCongTacObj.ID;
                    //    dtSP.Thang = now.Month;
                    //    dtSP.Nam = now.Year;
                    //    _SoPhieuHienTai_ser.Update(dtSP, ref errls);
                    //}
                    //else
                    //{
                    //    plv_SoPhieuHienTai objht = new plv_SoPhieuHienTai();
                    //    objht.MaLP = phieuCongTacObj.MaLP;
                    //    objht.NgayTao = DateTime.Now;
                    //    objht.NguoiTao = User.Identity.Name;
                    //    objht.SoPhieu = phieuCongTacObj.SoPhieu;
                    //    objht.DonViId = Session["DonViID"].ToString();
                    //    objht.MaPCT = phieuCongTacObj.ID;
                    //    objht.Thang = now.Month;
                    //    objht.Nam = now.Year;
                    //    objht.TramId = phieuCongTacObj.TramId;
                    //    _SoPhieuHienTai_ser.Create(objht, ref errls);
                    //}
                    #endregion
                }

                //var nvcp = _nhanvien_ser.GetByUserName(User.Identity.Name);
                //phieuCongTacObj.NguoiCapPhieu = nvcp.TenNhanVien + " - " + nvcp.SoDT;
                //phieuCongTacObj.NguoiCapPhieu_Id = User.Identity.Name;

                int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                string phieuLenh = " [ Phiếu Công Tác ] ";
                if (phieuCongTacObj.MaLP == 2)
                {
                    phieuLenh = " [ Lệnh Công Tác ] ";
                }
                if (idPhieuCongTac > 0)
                {

                    tblPhienLamViec plv = _plviec_ser.GetByMaPhieuCongTac(idPhieuCongTac);


                    #region Gửi notify mobile
                    var userIds = new List<string>
                    {
                     plv.NguoiDuyet_SoPa_Id,
                     plv.NguoiChiHuy_Id,
                     plv.GiamSatVien_Id,
                     plv.NguoiKiemSoat_Id,
                     plv.NguoiKiemTraPhieu_Id,
                     plv.LanhDaoTrucBan_Id,
                     plv.LanhDaoCongViec_Id,
                     plv.NguoiCapPhieu_Id,
                     //plv.NguoiDaiDienKT_Id // Phiên làm việc
                    }.Where(id => !string.IsNullOrEmpty(id)).Distinct().ToList(); // Loại bỏ Id null hoặc rỗng
                    if (userIds.Any())
                    {
                        var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                        foreach (var userId in userIds)
                        {
                            var requestData = new
                            {
                                IDConect = "PN",
                                userId = userId,
                                title = "Cấp số phiên làm việc",
                                name = "NPCIT",
                                header = "header",
                                subtitle = " ",
                                contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Cấp số phiên làm việc",
                            };

                            var jsonContent = JsonConvert.SerializeObject(requestData);
                            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                            using (HttpClient httpClient = new HttpClient())
                            {
                                var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                var response = await httpClient.PostAsync(Api_Notify, content);

                                if (response.IsSuccessStatusCode)
                                {
                                    var result = await response.Content.ReadAsStringAsync();
                                    var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                    if (!apiResponse.Success)
                                    {
                                        return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }

                        //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                    }

                    #endregion

                    //string userName = WebConfigurationManager.AppSettings["userEmail"];
                    //string password = WebConfigurationManager.AppSettings["passEmail"];

                    //IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                    //var model = baseConverter.ConvertObject(plv);

                    //tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                    //if (nv != null)
                    //{
                    //    userPushNotificationWeb.Add(nv.Username);

                    //    Message message = new Message();
                    //    message.NoiDung = phieuLenh + model.NoiDung + " vừa được cấp số bởi " + User.Identity.Name;
                    //    message.NgayTao = DateTime.Now;
                    //    message.NguoiTao = User.Identity.Name;
                    //    message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                    //    message.MaTaiKhoan = nv.Id;
                    //    message.TrangThai = (int)TrangThaiMessage.UnRead;
                    //    message.MA_DVIQLY = nv.DonViId;
                    //    message.MA_PBAN = model.PhongBanID.ToString();
                    //    message.PhienLamViecId = model.Id;

                    //    string errorMessage = "";

                    //    try
                    //    {
                    //        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                    //        messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                    //    }
                    //    catch
                    //    {
                    //    }

                    //    //try
                    //    //{
                    //    //    tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                    //    //    nhatKy.PhienLamViecId = plv.Id;
                    //    //    nhatKy.NgayTao = DateTime.Now;
                    //    //    nhatKy.NguoiTao = User.Identity.Name;
                    //    //    nhatKy.DonViId = plv.DonViId;
                    //    //    nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.VuaTao;
                    //    //    nhatKy.TrangThaiMoi = (int)TrangThaiPhienLV.DaDuyet;
                    //    //    nhatKy.GhiChu = "Cấp số" + phieuLenh;
                    //    //    nhatKy.PhongBanId = plv.PhongBanID;

                    //    //    string strError = "";
                    //    //    nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                    //    //}
                    //    //catch
                    //    //{
                    //    //}

                    //}

                    ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} cấp số" + phieuLenh + " {1} thành công", User.Identity.Name, plv.NoiDung));

                    DisposeAll();

                    return Json(new { success = true, responseText = "Cấp số" + phieuLenh + "thành công" }, JsonRequestBehavior.AllowGet);
                }

                DisposeAll();

                return Json(new { success = false, responseText = "Cấp số" + phieuLenh + "không thành công" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                ////NLoger.Error("loggerDatabase", string.Format("Lỗi cấp số Phiếu/Lệnh. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Cấp số Phiếu/Lệnh không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public async Task<ActionResult> ChuyenHoanPhieuLenh(string Id)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(int.Parse(Id));
                string errorUpdatePhieuCongTac = "";
                string phieuLenh = " [ Phiếu Công Tác ] ";
                if (phieuCongTacObj.MaLP == 2)
                {
                    phieuLenh = " [ Lệnh Công Tác ] ";
                }

                if (phieuCongTacObj.MaTT == 1)
                {
                    int trangThaiCu = phieuCongTacObj.MaTT ?? 0;

                    phieuCongTacObj.MaTT = 5;

                    int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);

                    if (idPhieuCongTac > 0)
                    {
                        string userName = WebConfigurationManager.AppSettings["userEmail"];
                        string password = WebConfigurationManager.AppSettings["passEmail"];

                        tblPhienLamViec plv = _plviec_ser.GetByMaPhieuCongTac(idPhieuCongTac);
                        IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                        var model = baseConverter.ConvertObject(plv);

                        tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                        if (nv != null)
                        {
                            userPushNotificationWeb.Add(nv.Username);

                            Message message = new Message();
                            message.NoiDung = phieuLenh + model.NoiDung + " vừa được chuyển hoàn bởi " + User.Identity.Name;
                            message.NgayTao = DateTime.Now;
                            message.NguoiTao = User.Identity.Name;
                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                            message.MaTaiKhoan = nv.Id;
                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                            message.MA_DVIQLY = nv.DonViId;
                            message.MA_PBAN = model.PhongBanID.ToString();
                            message.PhienLamViecId = model.Id;

                            string errorMessage = "";

                            try
                            {
                                var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                            }
                            catch
                            {
                            }

                            try
                            {
                                tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                nhatKy.PhienLamViecId = plv.Id;
                                nhatKy.NgayTao = DateTime.Now;
                                nhatKy.NguoiTao = User.Identity.Name;
                                nhatKy.DonViId = plv.DonViId;
                                nhatKy.TrangThaiCu = trangThaiCu;
                                nhatKy.TrangThaiMoi = plv.TrangThai;
                                nhatKy.GhiChu = phieuLenh + " Chuyển hoàn";
                                nhatKy.PhongBanId = plv.PhongBanID;

                                string strError = "";
                                nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                            }
                            catch
                            {

                            }

                            //try
                            //{
                            //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                            //    noti.title = phieuLenh + "vừa được chuyển hoàn";
                            //    noti.body = phieuLenh + plv.NoiDung + " vừa được chuyển hoàn bởi " + User.Identity.Name;
                            //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                            //    noti.tag = model.Id.ToString();

                            //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                            //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                            //    {
                            //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //        connection.Start().Wait();
                            //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //    }
                            //}
                            //catch (Exception ex)
                            //{

                            //}
                        }

                        //NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} chuyển hoàn" + phieuLenh + " {1} thành công", User.Identity.Name, plv.NoiDung));
                        DisposeAll();
                        return Json(new { success = true, responseText = "Chuyển hoàn phiên làm việc thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Chuyển hoàn phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi chuyển hoàn phiên làm việc. Chi tiết: {0}", ex.Message));

                return Json(new { success = false, responseText = "Chuyển hoàn phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }


        #endregion

        #region Delete Multiple
        [HttpPost]
        public async Task<ActionResult> DeleteMultiple(List<string> listId)
        {
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();
                if (listId != null && listId.Count > 0)
                {
                    List<object> json = new List<object>();

                    foreach (var Id in listId)
                    {
                        string kt = "";
                        var plv = _plviec_ser.GetById(Id);

                        if (plv != null && plv.TrangThai == (int)TrangThaiPhienLV.VuaTao)
                        {
                            //plv.TrangThai = 6;
                            //_plviec_ser.Update(plv, ref kt);

                            kt = _plviec_ser.PhienLamViec_Delete(int.Parse(Id));

                            if (kt == "")
                            {
                                string userName = WebConfigurationManager.AppSettings["userEmail"];
                                string password = WebConfigurationManager.AppSettings["passEmail"];

                                IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                                var model = baseConverter.ConvertObject(plv);

                                tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                                if (nv != null)
                                {
                                    userPushNotificationWeb.Add(nv.Username);

                                    Message message = new Message();
                                    message.NoiDung = model.NoiDung + " vừa được xóa bởi " + User.Identity.Name;
                                    message.NgayTao = DateTime.Now;
                                    message.NguoiTao = User.Identity.Name;
                                    message.LoaiThongBao = (int)LoaiThongBao.XoaCongViec;
                                    message.MaTaiKhoan = nv.Id;
                                    message.TrangThai = (int)TrangThaiMessage.UnRead;
                                    message.MA_DVIQLY = nv.DonViId;
                                    message.MA_PBAN = model.PhongBanID.ToString();
                                    message.PhienLamViecId = model.Id;

                                    string errorMessage = "";

                                    try
                                    {
                                        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                        messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                    }
                                    catch
                                    {
                                    }

                                    //try
                                    //{
                                    //    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietXoaCongViecNhanVienEmail.cshtml", model);
                                    //    await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo xóa công việc", html));
                                    //}
                                    //catch
                                    //{
                                    //}

                                    //try
                                    //{
                                    //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                    //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                    //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                    //    TwilioClient.Init(accountSid, authToken);

                                    //    var from = new PhoneNumber(fromPhoneNumber);
                                    //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                                    //    var sms = await Task.Run(() => MessageResource.Create(
                                    //        to: to,
                                    //        from: from,
                                    //        body: plv.NoiDung + " vừa được duyệt bởi " + User.Identity.Name));
                                    //}
                                    //catch (Exception e)
                                    //{

                                    //}

                                    try
                                    {
                                        tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                        nhatKy.PhienLamViecId = plv.Id;
                                        nhatKy.NgayTao = DateTime.Now;
                                        nhatKy.NguoiTao = User.Identity.Name;
                                        nhatKy.DonViId = plv.DonViId;
                                        nhatKy.TrangThaiCu = plv.TrangThai;
                                        nhatKy.TrangThaiMoi = 6;
                                        nhatKy.GhiChu = "Xóa công việc";
                                        nhatKy.PhongBanId = plv.PhongBanID;

                                        string strError = "";
                                        nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                                    }
                                    catch
                                    {

                                    }

                                    //try
                                    //{
                                    //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                                    //    noti.title = "Phiên làm việc vừa được xóa";
                                    //    noti.body = plv.NoiDung + " vừa được xóa bởi " + User.Identity.Name;
                                    //    noti.link = "";
                                    //    noti.tag = model.Id.ToString();

                                    //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                                    //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                                    //    {
                                    //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                                    //        connection.Start().Wait();
                                    //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                                    //    }
                                    //}
                                    //catch (Exception ex)
                                    //{

                                    //}
                                }

                                //NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                var jsonDuyetPhienLV = new
                                {
                                    success = true,
                                    responseText = "Xóa phiên làm việc thành công"
                                };

                                json.Add(jsonDuyetPhienLV);
                            }
                            else
                            {
                                var jsonDuyetPhienLV = new
                                {
                                    success = false,
                                    responseText = "Xóa phiên làm việc không thành công"
                                };

                                json.Add(jsonDuyetPhienLV);
                            }

                        }
                        else
                        {
                            var jsonDuyetPhienLV = new
                            {
                                success = false,
                                responseText = "Không tồn tại phiên làm việc"
                            };

                            json.Add(jsonDuyetPhienLV);
                        }
                    }

                    DisposeAll();

                    return Json(json, JsonRequestBehavior.AllowGet);
                }

                DisposeAll();

                return Json(new { success = false, responseText = "Xóa phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                //NLoger.Error("loggerDatabase", string.Format("Lỗi xóa phiên làm việc. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Xóa phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region Gui NPC

        [HttpGet]
        public async Task<ActionResult> GuiNPCPhienLv(string Id)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();
                tblPhienLamViec plv = new tblPhienLamViec();

                plv = _plviec_ser.GetById(int.Parse(Id));

                if (plv != null && ((plv.TrangThai == (int)TrangThaiPhienLV.DaDuyet) || (plv.TrangThai == (int)TrangThaiPhienLV.DaXong)))
                {
                    plv.IsChuyenNPC = true;
                    plv.NgayDuyetNPC = DateTime.Now;
                    plv.NguoiDuyetNPC = User.Identity.Name;

                    kt = _plviec_ser.PhienLamViec_UpdateTrangThai(plv);
                    if (kt == "")
                    {
                        string userName = WebConfigurationManager.AppSettings["userEmail"];
                        string password = WebConfigurationManager.AppSettings["passEmail"];

                        IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                        var model = baseConverter.ConvertObject(plv);

                        tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                        if (nv != null)
                        {
                            userPushNotificationWeb.Add(nv.Username);

                            Message message = new Message();
                            message.NoiDung = model.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name;
                            message.NgayTao = DateTime.Now;
                            message.NguoiTao = User.Identity.Name;
                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                            message.MaTaiKhoan = nv.Id;
                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                            message.MA_DVIQLY = nv.DonViId;
                            message.MA_PBAN = model.PhongBanID.ToString();
                            message.PhienLamViecId = model.Id;

                            string errorMessage = "";

                            try
                            {
                                var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                            }
                            catch
                            {
                            }

                            //try
                            //{
                            //    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietDuyetNPCCongViecNhanVienEmail.cshtml", model);
                            //    await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo duyệt công việc NPC", html));
                            //}
                            //catch
                            //{
                            //}

                            //try
                            //{
                            //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                            //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                            //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                            //    TwilioClient.Init(accountSid, authToken);

                            //    var from = new PhoneNumber(fromPhoneNumber);
                            //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                            //    var sms = await Task.Run(() => MessageResource.Create(
                            //        to: to,
                            //        from: from,
                            //        body: plv.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name));
                            //}
                            //catch (Exception e)
                            //{

                            //}

                            try
                            {
                                tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                nhatKy.PhienLamViecId = plv.Id;
                                nhatKy.NgayTao = DateTime.Now;
                                nhatKy.NguoiTao = User.Identity.Name;
                                nhatKy.DonViId = plv.DonViId;
                                nhatKy.TrangThaiCu = plv.TrangThai;
                                nhatKy.TrangThaiMoi = plv.TrangThai;
                                nhatKy.GhiChu = "Gửi NPC";
                                nhatKy.PhongBanId = plv.PhongBanID;

                                string strError = "";
                                nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                            }
                            catch
                            {

                            }

                            //try
                            //{
                            //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                            //    noti.title = "Phiên làm việc vừa được duyệt NPC";
                            //    noti.body = plv.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name;
                            //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                            //    noti.tag = model.Id.ToString();

                            //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                            //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                            //    {
                            //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //        connection.Start().Wait();
                            //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //    }
                            //}
                            //catch (Exception ex)
                            //{

                            //}
                        }
                        //NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt phiên làm việc NPC {1} thành công", User.Identity.Name, plv.NoiDung));
                        DisposeAll();

                        return Json(new { success = true, responseText = "Duyệt phiên làm việc NPC thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Duyệt phiên làm việc NPC không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt phiên làm việc NPC. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt phiên làm việc NPC không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public async Task<ActionResult> GuiNPCPhieuLenh(string Id)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();


                string errorUpdatePhieuCongTac = "";
                int phieuLenhId = int.Parse(Id);
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(phieuLenhId);


                if (phieuCongTacObj != null && ((phieuCongTacObj.MaTT == (int)TrangThaiPhienLV.DaDuyet) || (phieuCongTacObj.MaTT == (int)TrangThaiPhienLV.DaXong)))
                {
                    phieuCongTacObj.IsChuyenNPC = true;
                    phieuCongTacObj.NgayDuyetNPC = DateTime.Now;
                    phieuCongTacObj.NguoiDuyetNPC = User.Identity.Name;
                    int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);

                    if (idPhieuCongTac > 0)
                    {
                        string phieuLenh = " [ Phiếu Công Tác ] ";
                        if (phieuCongTacObj.MaLP == 2)
                        {
                            phieuLenh = " [ Lệnh Công Tác ] ";
                        }
                        tblPhienLamViec plv = _plviec_ser.GetByMaPhieuCongTac(idPhieuCongTac);

                        string userName = WebConfigurationManager.AppSettings["userEmail"];
                        string password = WebConfigurationManager.AppSettings["passEmail"];

                        IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                        var model = baseConverter.ConvertObject(plv);

                        tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                        if (nv != null)
                        {
                            userPushNotificationWeb.Add(nv.Username);

                            Message message = new Message();
                            message.NoiDung = phieuLenh + model.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name;
                            message.NgayTao = DateTime.Now;
                            message.NguoiTao = User.Identity.Name;
                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                            message.MaTaiKhoan = nv.Id;
                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                            message.MA_DVIQLY = nv.DonViId;
                            message.MA_PBAN = model.PhongBanID.ToString();
                            message.PhienLamViecId = model.Id;

                            string errorMessage = "";

                            try
                            {
                                var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                            }
                            catch
                            {
                            }


                            try
                            {
                                tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                nhatKy.PhienLamViecId = plv.Id;
                                nhatKy.NgayTao = DateTime.Now;
                                nhatKy.NguoiTao = User.Identity.Name;
                                nhatKy.DonViId = plv.DonViId;
                                nhatKy.TrangThaiCu = plv.TrangThai;
                                nhatKy.TrangThaiMoi = plv.TrangThai;
                                nhatKy.GhiChu = phieuLenh + "Gửi NPC";
                                nhatKy.PhongBanId = plv.PhongBanID;

                                string strError = "";
                                nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                            }
                            catch
                            {

                            }

                            //try
                            //{
                            //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                            //    noti.title = phieuLenh + "vừa được duyệt NPC";
                            //    noti.body = phieuLenh + plv.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name;
                            //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                            //    noti.tag = model.Id.ToString();

                            //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                            //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                            //    {
                            //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //        connection.Start().Wait();
                            //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //    }
                            //}
                            //catch (Exception ex)
                            //{

                            //}
                        }
                        //NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt" + phieuLenh + "NPC {1} thành công", User.Identity.Name, plv.NoiDung));
                        DisposeAll();

                        return Json(new { success = true, responseText = "Duyệt" + phieuLenh + "NPC thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Duyệt Phiếu/Lệnh NPC không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt Phiếu/Lệnh NPC. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt Phiếu/Lệnh NPC không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region Gui List NPC

        [HttpPost]
        public async Task<ActionResult> GuiListNPCPhienLv(List<string> listId)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();

                if (listId != null && listId.Count > 0)
                {
                    List<object> json = new List<object>();

                    foreach (var Id in listId)
                    {
                        tblPhienLamViec plv = new tblPhienLamViec();

                        plv = _plviec_ser.GetById(int.Parse(Id));

                        plv.IsChuyenNPC = true;
                        plv.NgayDuyetNPC = DateTime.Now;
                        plv.NguoiDuyetNPC = User.Identity.Name;

                        kt = _plviec_ser.PhienLamViec_UpdateTrangThai(plv);
                        if (kt == "")
                        {
                            string userName = WebConfigurationManager.AppSettings["userEmail"];
                            string password = WebConfigurationManager.AppSettings["passEmail"];

                            IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                            var model = baseConverter.ConvertObject(plv);

                            tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                            if (nv != null)
                            {
                                userPushNotificationWeb.Add(nv.Username);

                                Message message = new Message();
                                message.NoiDung = model.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name;
                                message.NgayTao = DateTime.Now;
                                message.NguoiTao = User.Identity.Name;
                                message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                message.MaTaiKhoan = nv.Id;
                                message.TrangThai = (int)TrangThaiMessage.UnRead;
                                message.MA_DVIQLY = nv.DonViId;
                                message.MA_PBAN = model.PhongBanID.ToString();
                                message.PhienLamViecId = model.Id;

                                string errorMessage = "";

                                try
                                {
                                    var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                    messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                }
                                catch
                                {
                                }

                                //try
                                //{
                                //    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietDuyetNPCCongViecNhanVienEmail.cshtml", model);
                                //    await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo duyệt công việc NPC", html));
                                //}
                                //catch
                                //{
                                //}

                                //try
                                //{
                                //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                //    TwilioClient.Init(accountSid, authToken);

                                //    var from = new PhoneNumber(fromPhoneNumber);
                                //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                                //    var sms = await Task.Run(() => MessageResource.Create(
                                //        to: to,
                                //        from: from,
                                //        body: plv.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name));
                                //}
                                //catch (Exception e)
                                //{

                                //}

                                try
                                {
                                    tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                    nhatKy.PhienLamViecId = plv.Id;
                                    nhatKy.NgayTao = DateTime.Now;
                                    nhatKy.NguoiTao = User.Identity.Name;
                                    nhatKy.DonViId = plv.DonViId;
                                    nhatKy.TrangThaiCu = plv.TrangThai;
                                    nhatKy.TrangThaiMoi = plv.TrangThai;
                                    nhatKy.GhiChu = "Gửi NPC";
                                    nhatKy.PhongBanId = plv.PhongBanID;

                                    string strError = "";
                                    nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                                }
                                catch
                                {

                                }

                                //try
                                //{
                                //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                                //    noti.title = "Phiên làm việc vừa được duyệt NPC";
                                //    noti.body = plv.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name;
                                //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                                //    noti.tag = model.Id.ToString();

                                //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                                //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                                //    {
                                //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                                //        connection.Start().Wait();
                                //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                                //    }
                                //}
                                //catch (Exception ex)
                                //{

                                //}

                                var jsonNpcPhienLV = new
                                {
                                    success = true,
                                    responseText = "Duyệt phiên làm việc NPC thành công"
                                };

                                json.Add(jsonNpcPhienLV);
                            }
                            else
                            {
                                var jsonNpcPhienLV = new
                                {
                                    success = false,
                                    responseText = "Duyệt phiên làm việc NPC không thành công"
                                };

                                json.Add(jsonNpcPhienLV);
                            }

                            ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt phiên làm việc NPC {1} thành công", User.Identity.Name, plv.NoiDung));
                        }
                    }
                    DisposeAll();
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Duyệt phiên làm việc NPC không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt phiên làm việc NPC. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt phiên làm việc NPC không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<ActionResult> GuiListNPCPhieuLenh(List<string> listId)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();

                if (listId != null && listId.Count > 0)
                {
                    List<object> json = new List<object>();

                    foreach (var Id in listId)
                    {
                        string errorUpdatePhieuCongTac = "";
                        int phieuLenhId = int.Parse(Id);
                        plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(phieuLenhId);

                        phieuCongTacObj.IsChuyenNPC = true;
                        phieuCongTacObj.NgayDuyetNPC = DateTime.Now;
                        phieuCongTacObj.NguoiDuyetNPC = User.Identity.Name;

                        int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                        string phieuLenh = " [ Phiếu Công Tác ] ";
                        if (phieuCongTacObj.MaLP == 2)
                        {
                            phieuLenh = " [ Lệnh Công Tác ] ";
                        }
                        tblPhienLamViec plv = _plviec_ser.GetByMaPhieuCongTac(idPhieuCongTac);
                        if (idPhieuCongTac > 0)
                        {
                            string userName = WebConfigurationManager.AppSettings["userEmail"];
                            string password = WebConfigurationManager.AppSettings["passEmail"];

                            IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                            var model = baseConverter.ConvertObject(plv);

                            tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                            if (nv != null)
                            {
                                userPushNotificationWeb.Add(nv.Username);

                                Message message = new Message();
                                message.NoiDung = phieuLenh + model.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name;
                                message.NgayTao = DateTime.Now;
                                message.NguoiTao = User.Identity.Name;
                                message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                message.MaTaiKhoan = nv.Id;
                                message.TrangThai = (int)TrangThaiMessage.UnRead;
                                message.MA_DVIQLY = nv.DonViId;
                                message.MA_PBAN = model.PhongBanID.ToString();
                                message.PhienLamViecId = model.Id;

                                string errorMessage = "";

                                try
                                {
                                    var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                    messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                }
                                catch
                                {
                                }

                                try
                                {
                                    tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                    nhatKy.PhienLamViecId = plv.Id;
                                    nhatKy.NgayTao = DateTime.Now;
                                    nhatKy.NguoiTao = User.Identity.Name;
                                    nhatKy.DonViId = plv.DonViId;
                                    nhatKy.TrangThaiCu = plv.TrangThai;
                                    nhatKy.TrangThaiMoi = plv.TrangThai;
                                    nhatKy.GhiChu = phieuLenh + "Gửi NPC";
                                    nhatKy.PhongBanId = plv.PhongBanID;

                                    string strError = "";
                                    nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                                }
                                catch
                                {

                                }

                                //try
                                //{
                                //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                                //    noti.title = phieuLenh + "vừa được duyệt NPC";
                                //    noti.body = phieuLenh + plv.NoiDung + " vừa được duyệt NPC bởi " + User.Identity.Name;
                                //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                                //    noti.tag = model.Id.ToString();

                                //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                                //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                                //    {
                                //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                                //        connection.Start().Wait();
                                //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                                //    }
                                //}
                                //catch (Exception ex)
                                //{

                                //}

                                var jsonNpcPhienLV = new
                                {
                                    success = true,
                                    responseText = "Duyệt" + phieuLenh + "NPC thành công"
                                };

                                json.Add(jsonNpcPhienLV);
                            }
                            else
                            {
                                var jsonNpcPhienLV = new
                                {
                                    success = false,
                                    responseText = "Duyệt" + phieuLenh + "NPC không thành công"
                                };

                                json.Add(jsonNpcPhienLV);
                            }

                            ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} duyệt phiên làm việc NPC {1} thành công", User.Identity.Name, plv.NoiDung));
                        }
                    }
                    DisposeAll();
                    return Json(json, JsonRequestBehavior.AllowGet);
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Duyệt Phiếu/Lệnh NPC không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt Phiếu/Lệnh NPC. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Duyệt Phiếu/Lệnh NPC không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region Gui Lại

        [HttpGet]
        public async Task<ActionResult> GuiLaiPhienLv(string Id)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();
                tblPhienLamViec plv = new tblPhienLamViec();

                plv = _plviec_ser.GetById(int.Parse(Id));

                if (plv.TrangThai == 5)
                {
                    int trangThaiCu = plv.TrangThai ?? 0;
                    plv.TrangThai = 1;

                    kt = _plviec_ser.PhienLamViec_UpdateTrangThai(plv);
                    if (kt == "")
                    {
                        string userName = WebConfigurationManager.AppSettings["userEmail"];
                        string password = WebConfigurationManager.AppSettings["passEmail"];

                        IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                        var model = baseConverter.ConvertObject(plv);

                        tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                        if (nv != null)
                        {
                            try
                            {
                                var role = _roleManager.FindByName("Master");

                                IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == nv.DonViId).ToList();

                                if (users != null && users.Count() > 0)
                                {
                                    foreach (var item in users)
                                    {
                                        // Create messages to user
                                        try
                                        {
                                            Message message = new Message();
                                            message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                            message.NgayTao = DateTime.Now;
                                            message.NguoiTao = User.Identity.Name;
                                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                            message.MaTaiKhoan = item.Id;
                                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                                            message.MA_DVIQLY = item.DonViId;
                                            message.MA_PBAN = plv.PhongBanID.ToString();
                                            message.PhienLamViecId = plv.Id;

                                            string errorMessage = "";

                                            var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                            messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                        }
                                        catch
                                        {

                                        }

                                        //try
                                        //{
                                        //    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietDuyetNPCCongViecNhanVienEmail.cshtml", model);
                                        //    await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo duyệt công việc NPC", html));
                                        //}
                                        //catch
                                        //{
                                        //}

                                        //try
                                        //{
                                        //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                        //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                        //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                        //    TwilioClient.Init(accountSid, authToken);

                                        //    var from = new PhoneNumber(fromPhoneNumber);
                                        //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                        //    var sms = await Task.Run(() => MessageResource.Create(
                                        //        to: to,
                                        //        from: from,
                                        //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                        //}
                                        //catch (Exception e)
                                        //{

                                        //}

                                        userPushNotificationWeb.Add(item.Username);
                                    }
                                }
                            }
                            catch
                            {

                            }

                            try
                            {
                                tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                nhatKy.PhienLamViecId = plv.Id;
                                nhatKy.NgayTao = DateTime.Now;
                                nhatKy.NguoiTao = User.Identity.Name;
                                nhatKy.DonViId = plv.DonViId;
                                nhatKy.TrangThaiCu = trangThaiCu;
                                nhatKy.TrangThaiMoi = plv.TrangThai;
                                nhatKy.GhiChu = "Chuyền hoàn";
                                nhatKy.PhongBanId = plv.PhongBanID;

                                string strError = "";
                                nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                            }
                            catch
                            {

                            }

                            //try
                            //{
                            //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                            //    noti.title = "Phiên làm việc vừa được tạo";
                            //    noti.body = plv.NoiDung + " vừa được tạo bởi " + User.Identity.Name;
                            //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/0";
                            //    noti.tag = model.Id.ToString();

                            //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                            //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                            //    {
                            //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //        connection.Start().Wait();
                            //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //    }
                            //}
                            //catch (Exception ex)
                            //{

                            //}
                        }
                        DisposeAll();
                        ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} tạo phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));

                        return Json(new { success = true, responseText = "Tạo phiên làm việc thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Tạo phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi tạo phiên làm việc. Chi tiết: {0}", ex.Message));

                return Json(new { success = false, responseText = "Tạo phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        #endregion

        #region Chuyển Hoàn

        [HttpGet]
        public async Task<ActionResult> ChuyenHoanPhienLv(string Id)
        {
            string kt = "";
            try
            {
                List<string> userPushNotificationWeb = new List<string>();
                Dictionary<string, int> messageList = new Dictionary<string, int>();
                tblPhienLamViec plv = new tblPhienLamViec();

                plv = _plviec_ser.GetById(int.Parse(Id));


                if (plv.TrangThai == 1)
                {
                    int trangThaiCu = plv.TrangThai ?? 0;

                    plv.TrangThai = 5;

                    kt = _plviec_ser.PhienLamViec_UpdateTrangThai(plv);
                    if (kt == "")
                    {
                        string userName = WebConfigurationManager.AppSettings["userEmail"];
                        string password = WebConfigurationManager.AppSettings["passEmail"];

                        IBaseConverter<tblPhienLamViec, PhienLVModel> baseConverter = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                        var model = baseConverter.ConvertObject(plv);

                        tblNhanVien nv = _nhanvien_ser.GetByUserName(plv.NguoiTao);

                        if (nv != null)
                        {
                            userPushNotificationWeb.Add(nv.Username);

                            Message message = new Message();
                            message.NoiDung = model.NoiDung + " vừa được chuyển hoàn bởi " + User.Identity.Name;
                            message.NgayTao = DateTime.Now;
                            message.NguoiTao = User.Identity.Name;
                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                            message.MaTaiKhoan = nv.Id;
                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                            message.MA_DVIQLY = nv.DonViId;
                            message.MA_PBAN = model.PhongBanID.ToString();
                            message.PhienLamViecId = model.Id;

                            string errorMessage = "";

                            try
                            {
                                var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                            }
                            catch
                            {
                            }

                            //try
                            //{
                            //    string html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietChuyenHoanCongViecNhanVienEmail.cshtml", model);
                            //    await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo chuyển hoàn công việc NPC", html));
                            //}
                            //catch
                            //{
                            //}

                            //try
                            //{
                            //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                            //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                            //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                            //    TwilioClient.Init(accountSid, authToken);

                            //    var from = new PhoneNumber(fromPhoneNumber);
                            //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                            //    var sms = await Task.Run(() => MessageResource.Create(
                            //        to: to,
                            //        from: from,
                            //        body: plv.NoiDung + " vừa được chuyển hoàn bởi " + User.Identity.Name));
                            //}
                            //catch (Exception e)
                            //{

                            //}

                            try
                            {
                                tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                                nhatKy.PhienLamViecId = plv.Id;
                                nhatKy.NgayTao = DateTime.Now;
                                nhatKy.NguoiTao = User.Identity.Name;
                                nhatKy.DonViId = plv.DonViId;
                                nhatKy.TrangThaiCu = trangThaiCu;
                                nhatKy.TrangThaiMoi = plv.TrangThai;
                                nhatKy.GhiChu = "Chuyền hoàn";
                                nhatKy.PhongBanId = plv.PhongBanID;

                                string strError = "";
                                nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                            }
                            catch
                            {

                            }

                            //try
                            //{
                            //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                            //    noti.title = "Phiên làm việc vừa được chuyển hoàn";
                            //    noti.body = plv.NoiDung + " vừa được chuyển hoàn bởi " + User.Identity.Name;
                            //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + plv.Id + "/" + message.Id;
                            //    noti.tag = model.Id.ToString();

                            //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                            //    using (var connection = new HubConnection(url, useDefaultUrl: false))
                            //    {
                            //        IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                            //        connection.Start().Wait();
                            //        hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, nv.DonViId }).Wait();
                            //    }
                            //}
                            //catch (Exception ex)
                            //{

                            //}
                        }

                        //NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} chuyển hoàn phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                        DisposeAll();
                        return Json(new { success = true, responseText = "Chuyển hoàn phiên làm việc thành công" }, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Chuyển hoàn phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi chuyển hoàn phiên làm việc. Chi tiết: {0}", ex.Message));

                return Json(new { success = false, responseText = "Chuyển hoàn phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        #endregion

        #region DetailPhieuCongTac
        [HttpGet]
        public ActionResult DetailPhieuCongTac(int Id)
        {

            // chi tiet phien lam viec
            //PhienLVModel model = new PhienLVModel();
            var model = _plviec_ser.GetById(Id);

            var objPCT = _pcongtac_ser.GetById(model.MaPCT);
            // chi tiet phieu cong tac
            ViewBag.PhieuCongTac = objPCT;
            // chi tiet tai lieu phieu cong tac
            //ViewBag.TaiLieuPCT = _pcongtac_ser.GetTaiLieuByMaPhieu(objPCT.ID);
            DisposeAll();
            return View(model);
        }
        #endregion
        [HttpGet]
        public ActionResult DanhSachPLVChuaKiemTra(string NgayLamViec)
        {
            List<PhienLVModel> PhienLV = null;
            try
            {
                PhienLV = _plviec_ser.Get_Plv_ChuaKiemTra_TheoNgay(NgayLamViec);
            }
            catch (Exception ex)
            {
                var emptyItem = new List<PhienLVModel> { new PhienLVModel { Id = 0, NoiDung = "Không có dữ liệu" } };
                return PartialView(emptyItem);
            }
            if (PhienLV == null || !PhienLV.Any())
            {
                var emptyItem = new List<PhienLVModel> { new PhienLVModel { Id = 0, NoiDung = "Không có dữ liệu" } };
                return PartialView(emptyItem);
            }

            return PartialView(PhienLV);
        }
        #region

        public async Task<JsonResult> GetLinkCameraAsync(int Id)
        {
            try
            {
                string cameraid = _plviec_ser.GetCameraIdByPhienId(Id);
                string jsession = "";
                string linkSession = System.Configuration.ConfigurationManager.AppSettings["CamSesion"].ToString();
                string camSessionAcc = System.Configuration.ConfigurationManager.AppSettings["CamSesionAcc"].ToString();
                string camSessionPw = System.Configuration.ConfigurationManager.AppSettings["CamSesionPW"].ToString();
                string timeSession = System.Configuration.ConfigurationManager.AppSettings["TimeSession"].ToString();
                string pathCam = System.Configuration.ConfigurationManager.AppSettings["CameraGS"].ToString();
                //string pathSession = linkSession 

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                using (HttpClient httpClient = new HttpClient())
                {
                    Dictionary<string, string> valuePairs = new Dictionary<string, string>();

                    valuePairs.Add("account", camSessionAcc);
                    valuePairs.Add("password", camSessionPw);

                    var response = httpClient.PostAsync(linkSession, new FormUrlEncodedContent(valuePairs)).Result;

                    var kq = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    var result = JsonConvert.DeserializeObject<Dictionary<string, string>>(kq);
                    jsession = result["jsession"];
                }

                if (timeSession.Equals("0"))
                {
                    pathCam = pathCam + "&vehiIdno=" + cameraid + "&jsession=" + jsession + "&channel=1&chns=0";
                }
                else
                {
                    pathCam = pathCam + "&vehiIdno=" + cameraid + "&jsession=" + jsession + "&channel=1&chns=0&close=" + timeSession;
                }

                //Lấy link

                //Lấy link cấu hình
                return Json(new { success = false, responseText = pathCam }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();
                return Json(new { success = false, responseText = "Cập nhật số phiếu phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }

        }
        #endregion
        #region
        public JsonResult GetDsCamera()
        {
            var madvql = Session["DonViID"].ToString();
            var lstCam = new List<Camera>();
            lstCam = _plviec_ser.GetDsCamera(madvql);
            return Json(lstCam, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region Gắn camera cho Phiên làm việc
        [HttpPost]
        public async Task<JsonResult> addCameraToPhien(string Id, string CameraId)
        {
            string madvql = Session["DonViID"].ToString();
            string userid = User.Identity.Name;
            _plviec_ser.addCameraToPhien(madvql, Id, CameraId);

            return Json(new { success = true, responseText = "Cập nhật thành công!" }, JsonRequestBehavior.AllowGet);
        }
        #endregion

        public ActionResult ChiTietPhienLV(int id, int? messageId)
        {
            try
            {
                PhienLVModel phienLVModel = _plviec_ser.GetPhienLVByIdV2(id);
                Message model = messagesRepository.GetById(messageId);

                if (phienLVModel != null && phienLVModel.PhongBanID > 0)
                {
                    var phongban = _dvi_ser.Context.tblPhongBans.FirstOrDefault(x => x.Id == phienLVModel.PhongBanID);
                    if (phongban != null)
                    {
                        phienLVModel.TenPhongBan = phongban.TenPhongBan;
                    }

                    var taiLieuList = PhieuCongTacRepository.GetTaiLieuByMaPhieu(phienLVModel.MaPCT ?? 0);
                    var phienLVNhatKy = nhatKyPhienLamViecRepository.List().Where(x => x.PhienLamViecId == id).OrderBy(x => x.NgayTao).ToList();

                    ViewBag.TaiLieuList = taiLieuList;
                    ViewBag.PhienLVNhatKy = phienLVNhatKy;
                }

                if (model != null)
                {
                    string strError = "";
                    model.TrangThai = (int)TrangThaiMessage.IsRead;
                    messagesRepository.Update(model, ref strError);
                }

                DisposeAll();
                return View(phienLVModel);
            }
            catch (Exception)
            {
                DisposeAll();
                throw;
            }
        }

        #region ViewMapsImage
        public ActionResult ViewMapsImage(int Id)
        {
            ViewBag.lstImages = _img_ser.GetById(Id);
            DisposeAll();
            return View();
        }
        #endregion

        public ActionResult GetListDateNhanBan(string date = "")
        {
            try
            {
                List<DateTime> listDate = new List<DateTime>();

                DateTime currentDate = DateTime.ParseExact(date, "dd/MM/yyyy", CultureInfo.CurrentCulture);

                for (int i = 1; i <= 7; i++)
                {
                    listDate.Add(currentDate.AddDays(i));
                }
                DisposeAll();
                return PartialView("ListDateNhanBan", listDate);

            }
            catch (Exception ex)
            {
                DisposeAll();
                return PartialView("ListDateNhanBan", null);
            }
        }

        [HttpPost]
        public async Task<ActionResult> CreatePhienLVCopy(string id, List<string> listDate, bool IsTaoPhieuCongTac)
        {
            try
            {
                if (!string.IsNullOrEmpty(id) && listDate != null && listDate.Count() > 0)
                {
                    var plv = _plviec_ser.GetById(int.Parse(id));
                    int kt = 0;
                    var jsonList = new List<object>();

                    if (plv != null)
                    {
                        List<string> userPushNotificationWeb = new List<string>();
                        Dictionary<string, int> messageList = new Dictionary<string, int>();
                        string html = "";

                        foreach (var item in listDate)
                        {
                            DateTime? ngayLamViec = null;

                            try
                            {
                                ngayLamViec = DateTime.ParseExact(item, "dd/MM/yyyy", CultureInfo.CurrentCulture);
                            }
                            catch (Exception e)
                            {
                                ngayLamViec = null;
                            }

                            if (ngayLamViec != null)
                            {

                                var totalDays = (ngayLamViec.Value.Date - plv.GioBd.Date).TotalDays;

                                if (_plviec_ser.KiemTraTrung2(ngayLamViec.Value, plv.PhongBanID, plv.DiaDiem.Trim(), plv.GioBd.AddDays(totalDays), plv.NoiDung.Trim(), null))
                                {
                                    var json = new { success = false, responseText = "Phiên làm việc đã tồn tại!" };
                                    jsonList.Add(json);

                                    continue;
                                }

                                var model = new tblPhienLamViec();

                                model.PhongBanID = plv.PhongBanID;

                                model.PhongBanIDCreate = plv.PhongBanIDCreate;

                                model.NoiDung = plv.NoiDung;
                                model.DiaDiem = plv.DiaDiem;
                                model.NgayLamViec = ngayLamViec.Value;
                                model.GioBd = plv.GioBd.AddDays(totalDays);
                                model.GioKt = plv.GioKt.AddDays(totalDays);

                                model.NguoiDuyet_SoPa = plv.NguoiDuyet_SoPa;
                                model.NguoiChiHuy = plv.NguoiChiHuy;
                                model.GiamSatVien = plv.GiamSatVien;
                                model.NguoiKiemSoat = plv.NguoiKiemSoat;
                                model.NguoiKiemTraPhieu = plv.NguoiKiemTraPhieu;
                                model.LanhDaoTrucBan = plv.LanhDaoTrucBan;
                                model.NgayTao = DateTime.Now;
                                model.NguoiTao = User.Identity.Name;
                                model.TT_Phien = plv.TT_Phien;
                                model.LyDoThayDoi = plv.LyDoThayDoi;

                                model.NguoiDuyet_SoPa_Id = plv.NguoiDuyet_SoPa_Id;
                                model.NguoiChiHuy_Id = plv.NguoiChiHuy_Id;
                                model.GiamSatVien_Id = plv.GiamSatVien_Id;
                                model.NguoiKiemSoat_Id = plv.NguoiKiemSoat_Id;
                                model.NguoiKiemTraPhieu_Id = plv.NguoiKiemTraPhieu_Id;
                                model.LanhDaoTrucBan_Id = plv.LanhDaoTrucBan_Id;
                                //model.MaPCT = plv.MaPCT;
                                model.IsChuyenNPC = plv.IsChuyenNPC;

                                //Trạng thái : Vừa tạo, đã duyệt
                                model.TrangThai = plv.TrangThai;
                                model.DonViId = plv.DonViId;
                                model.NguoiCapPhieu_Id = plv.NguoiCapPhieu_Id;
                                model.NguoiCapPhieu = plv.NguoiCapPhieu;

                                kt = _plviec_ser.PhienLamViec_AddNew(model);

                                if (kt > 0)
                                {
                                    bool save_tbl_NhanVien_PhienLamViec = false;
                                    if (!string.IsNullOrEmpty(model.NguoiDuyet_SoPa_Id))
                                    {
                                        string[] arr_NguoiDuyet_SoPa_Id = model.NguoiDuyet_SoPa_Id.Split(',');
                                        if (arr_NguoiDuyet_SoPa_Id != null && arr_NguoiDuyet_SoPa_Id.Length > 0)
                                        {
                                            save_tbl_NhanVien_PhienLamViec = true;
                                            foreach (var nv in arr_NguoiDuyet_SoPa_Id)
                                            {
                                                var getNhanVien = _nhanvien_ser.GetById(nv);
                                                if (getNhanVien != null)
                                                {
                                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = nv, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiDuyet_SoPa, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });

                                                }
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(model.NguoiChiHuy_Id))
                                    {
                                        string[] arr_NguoiChiHuy_Id = model.NguoiChiHuy_Id.Split(',');
                                        if (arr_NguoiChiHuy_Id != null && arr_NguoiChiHuy_Id.Length > 0)
                                        {
                                            save_tbl_NhanVien_PhienLamViec = true;
                                            foreach (var nv in arr_NguoiChiHuy_Id)
                                            {
                                                var getNhanVien = _nhanvien_ser.GetById(nv);
                                                if (getNhanVien != null)
                                                {
                                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = nv, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiChiHuy, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });

                                                }
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(model.GiamSatVien_Id))
                                    {
                                        string[] arr_GiamSatVien_Id = model.GiamSatVien_Id.Split(',');
                                        if (arr_GiamSatVien_Id != null && arr_GiamSatVien_Id.Length > 0)
                                        {
                                            save_tbl_NhanVien_PhienLamViec = true;
                                            foreach (var nv in arr_GiamSatVien_Id)
                                            {
                                                var getNhanVien = _nhanvien_ser.GetById(nv);
                                                if (getNhanVien != null)
                                                {
                                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = nv, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.GiamSatVien, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                                }
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(model.NguoiKiemSoat_Id))
                                    {
                                        string[] arr_NguoiKiemSoat_Id = model.NguoiKiemSoat_Id.Split(',');
                                        if (arr_NguoiKiemSoat_Id != null && arr_NguoiKiemSoat_Id.Length > 0)
                                        {
                                            save_tbl_NhanVien_PhienLamViec = true;
                                            foreach (var nv in arr_NguoiKiemSoat_Id)
                                            {
                                                var getNhanVien = _nhanvien_ser.GetById(nv);
                                                if (getNhanVien != null)
                                                {
                                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = nv, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiKiemSoat, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                                }
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(model.NguoiKiemTraPhieu_Id))
                                    {
                                        string[] arr_NguoiKiemTraPhieu_Id = model.NguoiKiemTraPhieu_Id.Split(',');
                                        if (arr_NguoiKiemTraPhieu_Id != null && arr_NguoiKiemTraPhieu_Id.Length > 0)
                                        {
                                            save_tbl_NhanVien_PhienLamViec = true;
                                            foreach (var nv in arr_NguoiKiemTraPhieu_Id)
                                            {
                                                var getNhanVien = _nhanvien_ser.GetById(nv);
                                                if (getNhanVien != null)
                                                {
                                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = nv, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.NguoiKiemTraPhieu, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                                }
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(model.LanhDaoTrucBan_Id))
                                    {
                                        string[] arr_LanhDaoTrucBan_Id = model.LanhDaoTrucBan_Id.Split(',');
                                        if (arr_LanhDaoTrucBan_Id != null && arr_LanhDaoTrucBan_Id.Length > 0)
                                        {
                                            save_tbl_NhanVien_PhienLamViec = true;
                                            foreach (var nv in arr_LanhDaoTrucBan_Id)
                                            {
                                                var getNhanVien = _nhanvien_ser.GetById(nv);
                                                if (getNhanVien != null)
                                                {
                                                    _plviec_ser.Context.tbl_NhanVien_PhienLamViec.Add(new tbl_NhanVien_PhienLamViec() { NhanVienId = nv, VaiTroPhienLamViecId = (int)VaiTroPhienLamViec.LanhDaoTrucBan, PhienLamViecId = kt, DonViId = getNhanVien.DonViId, PhongBanId = getNhanVien.PhongBanId });
                                                }
                                            }
                                        }
                                    }

                                    _plviec_ser.Context.SaveChanges();

                                    var listPhienLVThuocTinh = phienLamViecThuocTinhPhienRepository.GetByPhienLamViecId(int.Parse(id));

                                    if (listPhienLVThuocTinh != null && listPhienLVThuocTinh.Count > 0)
                                    {
                                        foreach (var tt in listPhienLVThuocTinh)
                                        {
                                            tblPhienLamViec_ThuocTinh phienLV_ThuocTinh = new tblPhienLamViec_ThuocTinh();
                                            phienLV_ThuocTinh.ThuocTinhId = tt.ThuocTinhId;
                                            phienLV_ThuocTinh.PhienLamViecId = kt;
                                            phienLV_ThuocTinh.NgayTao = DateTime.Now;
                                            phienLV_ThuocTinh.NguoiTao = User.Identity.Name;
                                            _plviec_ser.Context.tblPhienLamViec_ThuocTinh.Add(phienLV_ThuocTinh);
                                        }
                                    }

                                    if (IsTaoPhieuCongTac)
                                    {
                                        var modelPhieuCongTac = _pcongtac_ser.GetById(plv.MaPCT);

                                        if (modelPhieuCongTac != null)
                                        {
                                            plv_PhieuCongTac phieuCongTac = new plv_PhieuCongTac();
                                            phieuCongTac.NoiDung = plv.NoiDung;
                                            phieuCongTac.MaLP = modelPhieuCongTac.MaLP;
                                            phieuCongTac.MaTT = 1;
                                            phieuCongTac.NgayTao = DateTime.Now;
                                            phieuCongTac.NguoiTao = User.Identity.Name;
                                            _plviec_ser.Context.plv_PhieuCongTac.Add(phieuCongTac);
                                            _plviec_ser.Context.SaveChanges();

                                            var _plviec_serud = new PhienLVRepository();
                                            var phienLVUpdate = _plviec_ser.GetById(model.Id);
                                            phienLVUpdate.MaPCT = phieuCongTac.ID;
                                            string strError = "";
                                            _plviec_serud.Update(phienLVUpdate, ref strError);

                                        }
                                    }
                                    else
                                    {
                                        var phienLVUpdate = _plviec_ser.GetById(model.Id);
                                        phienLVUpdate.MaPCT = plv.MaPCT;
                                        string strError = "";
                                        var _plviec_serud = new PhienLVRepository();
                                        _plviec_serud.Update(phienLVUpdate, ref strError);
                                    }

                                    #region Send Email AND Notify

                                    IBaseConverter<tblPhienLamViec, PhienLVModel> convert = new AutoMapConverter<tblPhienLamViec, PhienLVModel>();
                                    var modelEmail = convert.ConvertObject(model);
                                    html = RenderViewHelper.RenderRazorViewToString(this.ControllerContext, "~/Areas/Admin/Views/PhienLV/ChiTietCongViecNhanVienEmail.cshtml", modelEmail);

                                    var json = new { success = true, responseText = "Tạo phiên làm việc " + item + " thành công!" };
                                    jsonList.Add(json);
                                }
                                else
                                {
                                    var json = new { success = false, responseText = "Tạo phiên làm việc " + item + " không thành công!" };
                                    jsonList.Add(json);
                                }

                            }
                            else
                            {
                                var json = new { success = false, responseText = "Ngày làm việc không tồn tại!" };
                                jsonList.Add(json);
                            }
                        }

                        //MailService ms = new MailService();

                        string userName = WebConfigurationManager.AppSettings["userEmail"];
                        string password = WebConfigurationManager.AppSettings["passEmail"];

                        string donviId = null;
                        try
                        {
                            donviId = Session["DonViID"].ToString();
                        }
                        catch { }
                        DonViRepository dvr = new DonViRepository();

                        //1. Người tạo phiên
                        try
                        {
                            tblNhanVien nv = _nhanvien_ser.GetByUserName(User.Identity.Name);
                            if (nv != null)
                            {
                                try
                                {
                                    // Create messages to user

                                    Message message = new Message();
                                    message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                    message.NgayTao = DateTime.Now;
                                    message.NguoiTao = User.Identity.Name;
                                    message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                    message.MaTaiKhoan = nv.Id;
                                    message.TrangThai = (int)TrangThaiMessage.UnRead;
                                    message.MA_DVIQLY = donviId;
                                    message.MA_PBAN = plv.PhongBanID.ToString();
                                    message.PhienLamViecId = plv.Id;

                                    string errorMessage = "";

                                    var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));

                                    messageList.Add(nv.Username, int.Parse(messageId.ToString()));

                                }
                                catch
                                {

                                }

                                //try
                                //{
                                //    await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo công việc", html));
                                //}
                                //catch
                                //{

                                //}

                                //try
                                //{
                                //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                //    TwilioClient.Init(accountSid, authToken);

                                //    var from = new PhoneNumber(fromPhoneNumber);
                                //    var to = new PhoneNumber("+84" + nv.SoDT.Substring(1));

                                //    var sms = await Task.Run(() => MessageResource.Create(
                                //        to: to,
                                //        from: from,
                                //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                //}
                                //catch (Exception e)
                                //{

                                //}

                                userPushNotificationWeb.Add(nv.Username);

                            }
                            //ms.SendMail(nv.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));

                        }
                        catch (Exception ex) { }


                        //2. Lãnh đạo đơn vị cấp quản lý trực tiếp (master)
                        try
                        {
                            //IEnumerable<EmailSend> rms = _plviec_ser.GetEmailByDonViID(donviId, "master");
                            //if (rms != null)
                            //{
                            //foreach (var nv in rms)
                            //{
                            //    try
                            //    {
                            //        await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo công việc", html));
                            //    }
                            //    catch
                            //    {

                            //    }

                            //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                            //}
                            //}
                        }
                        catch { }

                        try
                        {
                            var role = _roleManager.FindByName("Master");

                            IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == donviId).ToList();

                            if (users != null && users.Count() > 0)
                            {
                                foreach (var nv in users)
                                {
                                    // Create messages to user
                                    try
                                    {
                                        Message message = new Message();
                                        message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                        message.NgayTao = DateTime.Now;
                                        message.NguoiTao = User.Identity.Name;
                                        message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                        message.MaTaiKhoan = nv.Id;
                                        message.TrangThai = (int)TrangThaiMessage.UnRead;
                                        message.MA_DVIQLY = donviId;
                                        message.MA_PBAN = plv.PhongBanID.ToString();
                                        message.PhienLamViecId = plv.Id;

                                        string errorMessage = "";

                                        var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));

                                        messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                    }
                                    catch
                                    {

                                    }

                                    //try
                                    //{
                                    //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                    //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                    //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                    //    TwilioClient.Init(accountSid, authToken);

                                    //    var from = new PhoneNumber(fromPhoneNumber);
                                    //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                    //    var sms = await Task.Run(() => MessageResource.Create(
                                    //        to: to,
                                    //        from: from,
                                    //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                    //}
                                    //catch (Exception e)
                                    //{

                                    //}

                                    userPushNotificationWeb.Add(nv.Username);

                                }


                            }
                        }
                        catch
                        {

                        }

                        //3. Cán bộ phòng vận hành an toàn + quản lý cấp công ty (manager + admin ) đơn vị Điện Lực Hải Phòng (cấp tổng)

                        //lấy DonviID cap trên
                        tblDonVi dvch = dvr.GetById(donviId);
                        //nếu có đơn vị cấp trên thì gửi email cho đơn vị cấp trên
                        if (dvch != null)
                        {
                            try
                            {

                                if (string.IsNullOrEmpty(dvch.DviCha.ToString()))
                                {
                                    //IEnumerable<EmailSend> rms2 = _plviec_ser.GetEmailByDonViID(dvch.DviCha, "manager");
                                    //if (rms2 != null)
                                    //{
                                    //foreach (var nv in rms2)
                                    //{
                                    //    try
                                    //    {
                                    //        await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo công việc", html));
                                    //    }
                                    //    catch
                                    //    {
                                    //    }

                                    //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                    //}
                                    //}

                                    var role = _roleManager.FindByName("Manager");

                                    IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == dvch.DviCha).ToList();

                                    if (users != null && users.Count() > 0)
                                    {
                                        foreach (var nv in users)
                                        {
                                            try
                                            {
                                                // Create messages to user

                                                Message message = new Message();
                                                message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                                message.NgayTao = DateTime.Now;
                                                message.NguoiTao = User.Identity.Name;
                                                message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                                message.MaTaiKhoan = nv.Id;
                                                message.TrangThai = (int)TrangThaiMessage.UnRead;
                                                message.MA_DVIQLY = donviId;
                                                message.MA_PBAN = plv.PhongBanID.ToString();
                                                message.PhienLamViecId = plv.Id;

                                                string errorMessage = "";

                                                var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));

                                                messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                            }
                                            catch
                                            {

                                            }

                                            //try
                                            //{
                                            //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                            //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                            //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                            //    TwilioClient.Init(accountSid, authToken);

                                            //    var from = new PhoneNumber(fromPhoneNumber);
                                            //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                            //    var sms = await Task.Run(() => MessageResource.Create(
                                            //        to: to,
                                            //        from: from,
                                            //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                            //}
                                            //catch (Exception e)
                                            //{

                                            //}
                                            userPushNotificationWeb.Add(nv.Username);
                                        }


                                    }

                                }
                            }
                            catch { }

                            try
                            {
                                if (string.IsNullOrEmpty(dvch.DviCha.ToString()))
                                {
                                    //IEnumerable<EmailSend> rms3 = _plviec_ser.GetEmailByDonViID(dvch.DviCha, "admin");
                                    //if (rms3 != null)
                                    //{
                                    //foreach (var nv in rms3)
                                    //{
                                    //    try
                                    //    {
                                    //        await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo công việc", html));
                                    //    }
                                    //    catch
                                    //    {

                                    //    }

                                    //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                    //}
                                    //}

                                    var role = _roleManager.FindByName("Admin");

                                    IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == dvch.DviCha).ToList();

                                    if (users != null && users.Count() > 0)
                                    {
                                        foreach (var nv in users)
                                        {
                                            try
                                            {
                                                // Create messages to user

                                                Message message = new Message();
                                                message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                                message.NgayTao = DateTime.Now;
                                                message.NguoiTao = User.Identity.Name;
                                                message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                                message.MaTaiKhoan = nv.Id;
                                                message.TrangThai = (int)TrangThaiMessage.UnRead;
                                                message.MA_DVIQLY = donviId;
                                                message.MA_PBAN = plv.PhongBanID.ToString();
                                                message.PhienLamViecId = plv.Id;

                                                string errorMessage = "";

                                                var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));

                                                messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                            }
                                            catch
                                            {

                                            }

                                            //try
                                            //{
                                            //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                            //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                            //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                            //    TwilioClient.Init(accountSid, authToken);

                                            //    var from = new PhoneNumber(fromPhoneNumber);
                                            //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                            //    var sms = await Task.Run(() => MessageResource.Create(
                                            //        to: to,
                                            //        from: from,
                                            //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                            //}
                                            //catch (Exception e)
                                            //{

                                            //}

                                            userPushNotificationWeb.Add(nv.Username);
                                        }
                                    }
                                }
                            }
                            catch { }
                        }
                        // nếu không tìm thấy đơn vị cấp trên tức là cấp cao nhất thì sẽ gửi email cho cấp hiện tại
                        else
                        {
                            try
                            {
                                //IEnumerable<EmailSend> rms2 = _plviec_ser.GetEmailByDonViID(donviId, "manager");
                                //if (rms2 != null)
                                //{
                                //foreach (var nv in rms2)
                                //{
                                //    try
                                //    {
                                //        await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo công việc", html));
                                //    }
                                //    catch
                                //    {

                                //    }

                                //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                //}
                                //}

                                var role = _roleManager.FindByName("Manager");

                                IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == donviId).ToList();

                                if (users != null && users.Count() > 0)
                                {
                                    foreach (var nv in users)
                                    {
                                        try
                                        {
                                            // Create messages to user

                                            Message message = new Message();
                                            message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                            message.NgayTao = DateTime.Now;
                                            message.NguoiTao = User.Identity.Name;
                                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                            message.MaTaiKhoan = nv.Id;
                                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                                            message.MA_DVIQLY = donviId;
                                            message.MA_PBAN = plv.PhongBanID.ToString();
                                            message.PhienLamViecId = plv.Id;

                                            string errorMessage = "";

                                            var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                            messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                        }
                                        catch
                                        {

                                        }



                                        //try
                                        //{
                                        //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                        //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                        //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                        //    TwilioClient.Init(accountSid, authToken);

                                        //    var from = new PhoneNumber(fromPhoneNumber);
                                        //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                        //    var sms = await Task.Run(() => MessageResource.Create(
                                        //        to: to,
                                        //        from: from,
                                        //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                        //}
                                        //catch (Exception e)
                                        //{

                                        //}
                                        userPushNotificationWeb.Add(nv.Username);
                                    }

                                }
                            }
                            catch { }

                            try
                            {
                                //IEnumerable<EmailSend> rms2 = _plviec_ser.GetEmailByDonViID(donviId, "admin");
                                //if (rms2 != null)
                                //{
                                //foreach (var nv in rms2)
                                //{
                                //    try
                                //    {
                                //        await Task.Run(() => MailHelper.SendMail(userName, password, nv.Email, "v/v Thông báo công việc", html));
                                //    }
                                //    catch
                                //    {
                                //    }
                                //    //ms.SendMail(item.Email, "", "", string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung), string.Format("Tài khoản {0} thêm phiên làm việc {1} thành công", User.Identity.Name, plv.NoiDung));
                                //}
                                //}

                                var role = _roleManager.FindByName("Admin");

                                IEnumerable<tblNhanVien> users = _nhanvien_ser.ListNhanVienByRoleId(role.Id).Where(x => x.DonViId == donviId).ToList();

                                if (users != null && users.Count() > 0)
                                {
                                    foreach (var nv in users)
                                    {
                                        try
                                        {
                                            // Create messages to user

                                            Message message = new Message();
                                            message.NoiDung = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                                            message.NgayTao = DateTime.Now;
                                            message.NguoiTao = User.Identity.Name;
                                            message.LoaiThongBao = (int)LoaiThongBao.TaoCongViec;
                                            message.MaTaiKhoan = nv.Id;
                                            message.TrangThai = (int)TrangThaiMessage.UnRead;
                                            message.MA_DVIQLY = donviId;
                                            message.MA_PBAN = plv.PhongBanID.ToString();
                                            message.PhienLamViecId = plv.Id;

                                            string errorMessage = "";

                                            var messageId = await Task.Run(() => messagesRepository.Create(message, ref errorMessage));
                                            messageList.Add(nv.Username, int.Parse(messageId.ToString()));
                                        }
                                        catch
                                        {
                                        }

                                        //try
                                        //{
                                        //    string accountSid = WebConfigurationManager.AppSettings["accountSid"];
                                        //    string authToken = WebConfigurationManager.AppSettings["authToken"];
                                        //    string fromPhoneNumber = WebConfigurationManager.AppSettings["fromPhoneNumber"];

                                        //    TwilioClient.Init(accountSid, authToken);

                                        //    var from = new PhoneNumber(fromPhoneNumber);
                                        //    var to = new PhoneNumber("+84" + item.SoDT.Substring(1));

                                        //    var sms = await Task.Run(() => MessageResource.Create(
                                        //        to: to,
                                        //        from: from,
                                        //        body: plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao));
                                        //}
                                        //catch (Exception e)
                                        //{

                                        //}

                                        userPushNotificationWeb.Add(nv.Username);
                                    }
                                }
                            }
                            catch { }
                        }
                        #endregion

                        //try
                        //{
                        //    NotificationBrowserViewModel noti = new NotificationBrowserViewModel();
                        //    noti.title = "Phiên làm việc vừa được tạo mới";
                        //    noti.body = plv.NoiDung + " vừa được tạo bởi " + plv.NguoiTao;
                        //    noti.link = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/Admin/PhienLV/ChiTietPhienLV/" + kt;
                        //    noti.tag = kt.ToString();

                        //    string url = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + ":" + Request.Url.Port + "/signalr";

                        //    var connection = new HubConnection(url, useDefaultUrl: false);
                        //    IHubProxy hub = connection.CreateHubProxy("MessagesHub");
                        //    connection.Start().Wait();

                        //    hub.Invoke("SendMessagesToUsers", new object[] { userPushNotificationWeb, messageList, noti, donviId }).Wait();
                        //}
                        //catch { }
                        DisposeAll();

                        return Json(jsonList, JsonRequestBehavior.AllowGet);
                    }
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Phiên làm việc không tồn tại để nhân bản" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                return await Task.Run(() => Json(new { success = false, responseText = "Đã có lỗi xảy ra" }, JsonRequestBehavior.AllowGet));
                //return Json(new { success = false, responseText = "Đã có lỗi xảy ra" }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult CapNhatSoPhieuPhienLV(string Id, string SoPhieu)
        {
            try
            {
                if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SoPhieu))
                {
                    var plv = _plviec_ser.GetById(int.Parse(Id));

                    if (plv != null && plv.MaPCT != null && plv.MaPCT > 0)
                    {
                        var phieuCongTac = _pcongtac_ser.GetById(plv.MaPCT);

                        phieuCongTac.SoPhieu = SoPhieu;

                        string error = "";

                        _pcongtac_ser.Update(phieuCongTac, ref error);

                        if (error == "")
                        {
                            DisposeAll();
                            return Json(new { success = true, responseText = "Cập nhật số phiếu phiên làm việc thành công" }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    DisposeAll();
                    return Json(new { success = false, responseText = "Phiên làm việc chưa chọn Phiếu công tác hoặc Lệnh công tác" }, JsonRequestBehavior.AllowGet);
                }
                DisposeAll();
                return Json(new { success = false, responseText = "Cập nhật số phiếu phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();
                return Json(new { success = false, responseText = "Cập nhật số phiếu phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult PhieuCongTac(int phienlvid)
        {
            int phieucongtacid = 0;
            try
            {

                ViewBag.phienlvid = phienlvid;
                ViewBag.ThuocTinhPhienLV = _kh_ser.Context.plv_ThuocTinhPhien.AsNoTracking().ToList();
                PhienLVModel phienLVModel = _plviec_ser.GetPhienLVById(phienlvid);

                ViewBag.PhieuCongTac = null;
                if (phienLVModel != null)
                {
                    var objPCT = _pcongtac_ser.GetById(phienLVModel.MaPCT);
                    ViewBag.PhieuCongTac = objPCT;
                    if (objPCT != null)
                    {
                        phieucongtacid = objPCT.ID;
                    }
                    if (phienLVModel.PhongBanID > 0)
                    {
                        var phongban = _dvi_ser.Context.tblPhongBans.FirstOrDefault(x => x.Id == phienLVModel.PhongBanID);
                        if (phongban != null)
                        {
                            phienLVModel.TenPhongBan = phongban.TenPhongBan;
                            var donVi = _dvi_ser.Context.tblDonVis.FirstOrDefault(x => x.Id == phongban.MaDVi);
                            ViewBag.DonVi = donVi;
                        }
                    }

                    List<plv_PhieuCT_NhanVien> nhanVienCongTac = _nvphieucontac.GetListByMaPhieuV2(objPCT.ID,
                        System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString);
                    if (nhanVienCongTac != null && nhanVienCongTac.Count > 0)
                    {
                        ViewBag.NhanVienCongTac = nhanVienCongTac;
                    }
                }
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(phieucongtacid);
                if (phieuCongTacObj != null)
                {
                    if (phieuCongTacObj.PhongBanID_PCT > 0)
                    {
                        ViewBag.PhongBanObj = _dvi_ser.Context.tblPhongBans.FirstOrDefault(x => x.Id == (int)phieuCongTacObj.PhongBanID_PCT);
                    }
                    if (phieuCongTacObj.MaLP == 2)
                    {
                        return RedirectToAction("LenhCongTac", "PhienLV", new { phienlvid = phienlvid, lenhcongtacid = phieuCongTacObj.ID });
                    }
                    ViewBag.PhieuCongTac = phieuCongTacObj;
                }
                ViewBag.phieucongtacid = phieucongtacid;
                DisposeAll();
                return View(phienLVModel);
            }
            catch (Exception)
            {
                DisposeAll();
                throw;
            }
        }



        public string NextID(string lastID, string prefixID, int MaLP, string TramId)
        {
            if (lastID == "")
            {
                return "00001" + prefixID;  // fixwidth default
            }

            var dtSP = _SoPhieuHienTai_ser.GetObjByDonVi(System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString,
                                    Session["DonViID"].ToString(), MaLP.ToString(), TramId);
            if (dtSP != null)
            {
                if (lastID != dtSP.SoPhieu)
                    lastID = dtSP.SoPhieu;
            }

            int nextID = int.Parse(lastID.Remove(5, prefixID.Length)) + 1;
            int lengthNumerID = lastID.Length - prefixID.Length;
            string zeroNumber = "";
            for (int i = 1; i <= lengthNumerID; i++)
            {
                if (nextID < Math.Pow(10, i))
                {
                    for (int j = 1; j <= lengthNumerID - i; i++)
                    {
                        zeroNumber += "0";
                    }
                    return zeroNumber + nextID.ToString() + prefixID;
                }
            }
            return nextID + prefixID;
        }

        #region UpdatePhieuCongTac
        [HttpPost]
        public async Task<ActionResult> UpdatePhieuCongTac(ECP_V2.WebApplication.Areas.Admin.Models.PhieuCongTacModels model)
        {
            try
            {
                string errorUpdatePhieuCongTac = string.Empty;
                string errorUpdatePhienLamViec = string.Empty;
                StringBuilder strResult = new StringBuilder();
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(model.phieucongtacid);

                if (phieuCongTacObj.MaTT >= 2)
                {
                    return Json(new { success = false, responseText = "Phiếu đã được duyệt không được sửa!" }, JsonRequestBehavior.AllowGet);
                }

                DateTime thoiGianBd = DateTime.ParseExact(model.GioBd, "HH:mm dd/MM/yyyy", null);
                DateTime thoiGianKt = DateTime.ParseExact(model.GioKt, "HH:mm dd/MM/yyyy", null);

                if (string.IsNullOrEmpty(model.LoaiCongViec))
                {
                    return Json(new { success = false, responseText = "Loại công việc không được để trống." }, JsonRequestBehavior.AllowGet);
                }

                try
                {
                    phieuCongTacObj.PhongBan_PCT = model.PhongBan_PCT;
                    if (!string.IsNullOrEmpty(model.PhongBanID_PCT))
                    {
                        phieuCongTacObj.PhongBanID_PCT = int.Parse(model.PhongBanID_PCT);
                    }
                    else
                    {
                        phieuCongTacObj.PhongBanID_PCT = null;
                    }
                }
                catch
                {
                    DisposeAll();
                    return Json(new { success = false, responseText = "Phòng ban tổ đội cấp phiếu chưa chính xác." }, JsonRequestBehavior.AllowGet);
                }

                if (thoiGianBd == null || thoiGianKt == null || thoiGianBd.Year < 2000 || thoiGianKt.Year < 2000)
                {
                    DisposeAll();
                    return Json(new { success = false, responseText = "(1.6) thời gian kế hoạch không chính xác." }, JsonRequestBehavior.AllowGet);
                }
                if (model.NgayGioKT_B2.Length > 4)
                {
                    try
                    {
                        DateTime thoiGian_NgayGioKT_B2 = DateTime.ParseExact(model.NgayGioKT_B2, "HH:mm dd/MM/yyyy", null);
                        if (thoiGian_NgayGioKT_B2 == null || thoiGian_NgayGioKT_B2.Year < 2000)
                        {
                            DisposeAll();
                            return Json(new { success = false, responseText = "(2.5) thời gian không chính xác." }, JsonRequestBehavior.AllowGet);
                        }
                        phieuCongTacObj.NgayGioKT_B2 = thoiGian_NgayGioKT_B2;
                    }
                    catch
                    {
                        DisposeAll();
                        return Json(new { success = false, responseText = "(2.5) thời gian không chính xác." }, JsonRequestBehavior.AllowGet);
                    }
                }

                if (model.NgayGioKT_B3.Length > 4)
                {
                    try
                    {
                        DateTime thoiGian_NgayGioKT_B3 = DateTime.ParseExact(model.NgayGioKT_B3, "HH:mm dd/MM/yyyy", null);
                        if (thoiGian_NgayGioKT_B3 == null || thoiGian_NgayGioKT_B3.Year < 2000)
                        {
                            DisposeAll();
                            return Json(new { success = false, responseText = "(3.3) thời gian không chính xác." }, JsonRequestBehavior.AllowGet);
                        }
                        phieuCongTacObj.NgayGioKT_B3 = thoiGian_NgayGioKT_B3;
                    }
                    catch
                    {
                        DisposeAll();
                        return Json(new { success = false, responseText = "(3.3) thời gian không chính xác." }, JsonRequestBehavior.AllowGet);
                    }
                }

                List<string> userPushNotificationWeb = new List<string>();

                List<tblPhienLamViec> listPhienLamViecObj = _plviec_ser.GetListByMaPhieuCongTac(model.phieucongtacid);
                bool checkEndSession = false;
                if (phieuCongTacObj != null && listPhienLamViecObj != null && listPhienLamViecObj.Count > 0)
                {
                    //Namcv kiểm tra thêm phiên đã xong không cho sửa số phiếu.
                    //Một Phiếu công tác cho nhiều phiên làm việc.
                    //All phiên kết thúc => Phiếu kết thúc.
                    foreach (tblPhienLamViec phienLamViec in listPhienLamViecObj)
                    {
                        if (phienLamViec.TrangThai <= 2)
                        {
                            checkEndSession = true;
                            break;
                        }
                    }

                    if (!checkEndSession)
                    {
                        return Json(new { success = false, responseText = "Công việc đã kết thúc không thể cập nhật." }, JsonRequestBehavior.AllowGet);
                    }

                    if (!string.IsNullOrEmpty(model.phieucongtac))
                    {
                        //Cập nhật lại số phiếu công tác
                        //if (_pcongtac_ser.CheckExistSoPhieu(phieuCongTacObj.ID, model.phieucongtac) == false)
                        //{
                        //    phieuCongTacObj.SoPhieu = model.phieucongtac.Trim();
                        //    phieuCongTacObj.MaTT = 2;
                        //}
                        //else
                        //{
                        //    return Json(new { success = true, responseText = "Số phiếu công tác đã tồn tại."}, JsonRequestBehavior.AllowGet);
                        //}

                        //if (CheckSoPhieu(model.phieucongtac))
                        //        return Json(new { success = false, responseText = "Số phiếu không đúng định dạng." }, JsonRequestBehavior.AllowGet);

                        //Namcv add 06/03/2022
                        //Check thêm trường hợp nằm trong số phiếu đã giữ
                        //Không cập nhật lại số phiếu (Giữ nguyên theo số đã cấp, Trường hợp chưa có vẫn cập nhật bình thường).

                        //UpdateSoPhieuMoiNhat(phieuCongTacObj);
                    }
                    else
                    {
                        //phieuCongTacObj.MaTT = 1;
                    }

                    if (!string.IsNullOrEmpty(model.NhanVienDonViCongTac_SelectEmp))
                    {
                        string[] nvct = model.NhanVienDonViCongTac_SelectEmp.Split('*');
                        string res = "";
                        List<plv_PhieuCT_NhanVien> listNhanVienPCT = _nvphieucontac.GetListByMaPhieu(phieuCongTacObj.ID);
                        if (listNhanVienPCT != null && listNhanVienPCT.Count > 0)
                        {
                            foreach (var item in listNhanVienPCT)
                            {
                                _nvphieucontac.Delete(item.Id, ref res);
                            }
                        }

                        if (nvct != null && nvct.Count() > 0)
                        {
                            List<string> listNhanVienID = new List<string>();
                            foreach (var item in nvct)
                            {
                                string[] infoNhanVien = item.Split('|');
                                if (infoNhanVien != null && infoNhanVien.Count() == 2 && !listNhanVienID.Any(x => x.Equals(infoNhanVien[1].Trim())))
                                {
                                    listNhanVienID.Add(infoNhanVien[1].Trim());
                                    var nhanVien = _nhanvien_ser.GetById(infoNhanVien[1].Trim());
                                    if (nhanVien != null)
                                    {
                                        plv_PhieuCT_NhanVien pctNhanVien = new plv_PhieuCT_NhanVien();
                                        pctNhanVien.IsDen = false;
                                        pctNhanVien.IsRut = false;
                                        pctNhanVien.MaNV = nhanVien.Id;
                                        pctNhanVien.MaPCT = phieuCongTacObj.ID;
                                        pctNhanVien.TenNV = nhanVien.TenNhanVien + " - " + nhanVien.SoDT;
                                        pctNhanVien.BacAnToan = nhanVien.BacAnToan;
                                        _nvphieucontac.Create(pctNhanVien, ref res);
                                    }
                                    else if (!string.IsNullOrEmpty(infoNhanVien[0]))
                                    {
                                        plv_PhieuCT_NhanVien pctNhanVien = new plv_PhieuCT_NhanVien();
                                        pctNhanVien.IsDen = false;
                                        pctNhanVien.IsRut = false;
                                        pctNhanVien.MaPCT = phieuCongTacObj.ID;
                                        pctNhanVien.TenNV = infoNhanVien[0].Trim();
                                        pctNhanVien.BacAnToan = nhanVien.BacAnToan;
                                        _nvphieucontac.Create(pctNhanVien, ref res);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        string res = "";
                        List<plv_PhieuCT_NhanVien> listNhanVienPCT = _nvphieucontac.GetListByMaPhieu(phieuCongTacObj.ID);
                        if (listNhanVienPCT != null && listNhanVienPCT.Count > 0)
                        {
                            foreach (var item in listNhanVienPCT)
                            {
                                _nvphieucontac.DeleteNhanVienPhieuCT(phieuCongTacObj.ID, item.MaNV, ref res);
                            }
                        }
                    }
                    phieuCongTacObj.TramId = model.TramId;
                    phieuCongTacObj.DieuKienAnToan = model.DieuKienAnToan;
                    phieuCongTacObj.DonViLienQuanQLVH = model.DonViLienQuanQLVH;

                    phieuCongTacObj.ChiTietCatDien = model.ChiTietCatDien;
                    phieuCongTacObj.ChiTietNoiDat = model.ChiTietNoiDat;
                    phieuCongTacObj.ChiTietRaoChan = model.ChiTietRaoChan;
                    phieuCongTacObj.ChiTietBienBao = model.ChiTietBienBao;
                    phieuCongTacObj.PhamViLamViec = model.PhamViLamViec;
                    phieuCongTacObj.CanhBaoNguyHiem = model.CanhBaoNguyHiem;

                    phieuCongTacObj.NoiDatTai = model.NoiDatTai;
                    phieuCongTacObj.AnToanKhac = model.AnToanKhac;
                    phieuCongTacObj.LoaiCongViecId = Convert.ToInt32(model.LoaiCongViec);
                    phieuCongTacObj.MaYeuCauCRM = model.MaYeuCauCRM;
                    phieuCongTacObj.NgayCN = DateTime.Now;
                    phieuCongTacObj.NguoiCN = User.Identity.Name;

                    int intSoNguoiThamGia = 0;
                    if (!string.IsNullOrEmpty(model.SoNguoiThamGia))
                    {
                        try
                        {
                            intSoNguoiThamGia = int.Parse(model.SoNguoiThamGia);
                        }
                        catch
                        { }
                    }
                    phieuCongTacObj.SoNguoiThamGia = intSoNguoiThamGia;
                    int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                    if (idPhieuCongTac > 0)
                    {
                        //Lưu PCT thành công
                    }
                    else
                    {
                        //Lưu PCT thành công
                        strResult.Append(errorUpdatePhieuCongTac);
                    }

                    foreach (var item in listPhienLamViecObj)
                    {
                        //item.LanhDaoTrucBan = LanhDaoTrucBan;
                        //item.LanhDaoTrucBan_Id = LanhDaoTrucBan_Id;

                        item.NguoiChiHuy = model.NguoiChiHuy;
                        item.NguoiChiHuy_Id = model.NguoiChiHuy_Id;

                        item.GiamSatVien = model.GiamSatVien;
                        item.GiamSatVien_Id = model.GiamSatVien_Id;

                        item.LanhDaoCongViec = model.LanhDaoCongViec;
                        item.LanhDaoCongViec_Id = model.LanhDaoCongViec_Id;

                        item.NguoiCapPhieu = model.NguoiCapPhieu;
                        item.NguoiCapPhieu_Id = model.NguoiCapPhieu_Id;

                        //item.NguoiKiemSoat = NguoiKiemSoat;
                        //item.NguoiKiemSoat_Id = NguoiKiemSoat_Id;

                        //item.NguoiKiemTraPhieu = NguoiKiemTraPhieu;
                        //item.NguoiKiemTraPhieu_Id = NguoiKiemTraPhieu_Id;

                        item.PhongBanID = int.Parse(model.PhongBanID);
                        //item.NoiDung = NoiDung;
                        //item.DiaDiem = DiaDiem;
                        //item.NgayLamViec = new DateTime(thoiGianBd.Year, thoiGianBd.Month, thoiGianBd.Day);
                        //item.GioBd = thoiGianBd;
                        //item.GioKt = thoiGianKt;

                        int updatePhienLamViecItemResult = _plviec_ser.PhienLamViec_UpdateNew(item);
                        if (updatePhienLamViecItemResult < 1)
                        {
                            strResult.Append("Phiên làm việc " + item.Id + " cập nhật không thành công. ");
                        }
                    }
                }

                DisposeAll();

                string responseText = strResult.ToString();
                if (string.IsNullOrEmpty(responseText))
                {
                    return Json(new { success = true, responseText = responseText }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { success = false, responseText = "Cập nhật phiếu công tác thành công!" }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                DisposeAll();

                //NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt phiên làm việc. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Lỗi cập nhật phiếu công tác. Chi tiết: " + ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion
        #region PhieuCongTac
        [HasCredential(MenuCode = "PCT;DSPLCT")]
        public ActionResult IndexPhieuCongTac(string listLCV = "", string id = "", string date = "")
        {
            var listTCPhien = tinhChatPhienRepository.List();
            ViewBag.ListTCPhien = listTCPhien;

            var listTTPhien = trangThaiPhienRepository.List();
            ViewBag.ListTTPhien = listTTPhien;

            var listThuocTinhPhienCatDien = thuocTinhPhienRepository.GetByLoaiThuocTinh(3);
            ViewBag.ThuocTinhPhienCatDien = listThuocTinhPhienCatDien;

            var listThuocTinhPhienTiepDia = thuocTinhPhienRepository.GetByLoaiThuocTinh(4);
            ViewBag.ThuocTinhPhienTiepDia = listThuocTinhPhienTiepDia;

            var listThuocTinhPhien5 = thuocTinhPhienRepository.GetByLoaiThuocTinh(5);
            ViewBag.ThuocTinhPhien5 = listThuocTinhPhien5;

            var listLoaiCongViec = loaicv_ser.List();
            ViewBag.ListLoaiCongViec = listLoaiCongViec;

            if (!string.IsNullOrEmpty(id))
            {
                DateTime dts = new DateTime();
                DateTime dte = new DateTime();

                dts = DateTime.Now;
                dte = DateTime.Now;
                //PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);

                ViewBag.TuNgay = dts.ToString("dd/MM/yyyy");
                ViewBag.DenNgay = dte.ToString("dd/MM/yyyy");
                ViewBag.DonViID = id;
            }

            if (!string.IsNullOrEmpty(date))
            {
                ViewBag.TuNgay = date;
                ViewBag.DenNgay = date;
            }

            var lstTram = tramRepository.ListByPhongBanId(Session["PhongBanId"].ToString(), strcon).ToList();
            if (lstTram != null && lstTram.Count > 0)
            {
                ViewBag.IsTram = true;
            }

            ViewBag.listLCV = listLCV;


            DisposeAll();

            return View();
        }

        [HttpGet]
        public ActionResult ListPhieuCongTac(int page, int pageSize, string filter, int tcphien, int catdien, int tiepdia, int khac, string DateFrom, string DateTo, string DonViId, string PhongBanId, int ttPhien, string loaiCV, int? chuyenNPC, int? phieuky, int loaiPhieuLenh = 0)
        {
            //var temp = (listLCV != "" && listLCV != null) ? listLCV.Split(',').Select(int.Parse).ToList() : null;
            //var loaiCV = temp != null ? temp[0] : 0;

            if (loaiCV == null || loaiCV == "")
                loaiCV = "0,0,0";

            int filterOption = -1;
            string filterTemp = "";
            if (!string.IsNullOrEmpty(filter))
            {
                if (filter.IndexOf("0:") > -1)
                {
                    filterOption = 0;
                    filterTemp = filter.Replace("0:", "").Trim().ToUpper();
                    filter = "";

                }
                else if (filter.IndexOf("1:") > -1)
                {
                    filterOption = 1;
                    filter = filter.Replace("1:", "").Trim().ToUpper();
                }
            }

            int page1 = (page - 1) * pageSize;
            int pagelength1 = page * pageSize;
            int Count = 0;
            int Duyet = 0;

            string donviId = null;
            try
            {
                donviId = Session["DonViID"].ToString();
            }
            catch { }

            //if (DonViId == "0")
            //    DonViId = "";

            ////if (User.IsInRole("DuyetViec"))
            ////    Duyet = "Chưa Duyệt";
            ////else
            ////    Duyet = "Đã Duyệt";

            //if (!String.IsNullOrEmpty(ttPhien))
            //{
            //    Duyet = ttPhien;
            //}
            //else
            //{
            //    Duyet = "all";
            //}

            if (ttPhien > 0)
            {
                Duyet = ttPhien;
            }

            //if (donviId == null)
            //{
            //    model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, DateFrom, DateTo, DonViId, PhongBanId, "Đã Duyệt").ToList();
            //    Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, DateFrom, DateTo, DonViId, PhongBanId, "Đã Duyệt");
            //}
            //else
            //{
            //    if (string.IsNullOrEmpty(DonViId))
            //    {
            //        model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, DateFrom, DateTo, donviId.ToString(), PhongBanId, Duyet).ToList();
            //        Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, DateFrom, DateTo, donviId.ToString(), PhongBanId, Duyet);
            //    }
            //    else
            //    {
            //        model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, DateFrom, DateTo, DonViId, PhongBanId, Duyet).ToList();
            //        Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, DateFrom, DateTo, DonViId, PhongBanId, Duyet);
            //    }
            //}
            List<PhienLVModel> model;
            if (DonViId != null)
            {
                if (string.IsNullOrEmpty(DonViId))
                {
                    model = _plviec_ser.AdvancedSearchPhieuCongTac(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV).ToList();
                    Count = _plviec_ser.CountTotalPhieuCongTac(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV);
                }
                else
                {
                    var donVi = _dvi_ser.GetById(donviId);

                    if (donVi != null)
                    {
                        if (((donviId.Length == 4 && donVi.DviCha.Equals("PA")) || donviId.ToUpper().Equals("PH") || donviId.ToUpper().Equals("PN") || donviId.ToUpper().Equals("PM")) && (User.IsInRole("Master") || User.IsInRole("Manager")))
                        {
                            if (Duyet == 0)
                            {
                                model = _plviec_ser.AdvancedSearchPhieuCongTac(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaDuyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV).ToList();
                                List<PhienLVModel> modelDaXong = _plviec_ser.AdvancedSearchPhieuCongTac(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaXong, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV).ToList();
                                List<PhienLVModel> modelHuyBo = _plviec_ser.AdvancedSearchPhieuCongTac(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.HuyBo, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV).ToList();

                                Count = _plviec_ser.CountTotalPhieuCongTac(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaDuyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV);
                                int CountDaXong = _plviec_ser.CountTotalPhieuCongTac(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaXong, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV);
                                int CountHuyBo = _plviec_ser.CountTotalPhieuCongTac(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.HuyBo, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV);

                                Count += (CountDaXong + CountHuyBo);
                                model.AddRange(modelDaXong);
                                model.AddRange(modelHuyBo);
                            }
                            else if (Duyet == (int)TrangThaiPhienLV.DaXong || Duyet == (int)TrangThaiPhienLV.DaDuyet || Duyet == (int)TrangThaiPhienLV.HuyBo || Duyet == (int)TrangThaiPhienLV.VuaTao)
                            {
                                model = _plviec_ser.AdvancedSearchPhieuCongTac(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV).ToList();
                                Count = _plviec_ser.CountTotalPhieuCongTac(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV);
                            }
                            else
                            {
                                model = new List<PhienLVModel>();
                                Count = 0;
                            }
                        }
                        else
                        {
                            if (User.IsInRole("Leader"))
                            {
                                string phongBanID = Session["PhongBanId"].ToString();

                                model = _plviec_ser.AdvancedSearchPhieuCongTac(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, phongBanID, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "leader", loaiCV).ToList();
                                Count = _plviec_ser.CountTotalPhieuCongTac(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, phongBanID, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "leader", loaiCV);
                            }
                            else
                            {
                                model = _plviec_ser.AdvancedSearchPhieuCongTac(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV).ToList();
                                Count = _plviec_ser.CountTotalPhieuCongTac(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV);
                            }

                        }
                    }
                    else
                    {
                        model = new List<PhienLVModel>();
                        Count = 0;
                    }
                }
            }
            else
            {
                model = _plviec_ser.AdvancedSearchPhieuCongTac(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV).ToList();
                Count = _plviec_ser.CountTotalPhieuCongTac(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC ?? -1, phieuky ?? -1, "", loaiCV);
            }

            var ListNewsPageSize = new PageData<PhienLVModel>();
            if (model.Count() > 0)
            {
                model = model.ToList().Where(x => (x.TrangThai == 2 || x.TrangThai == 3) && x.NguoiDuyet != null).ToList();
                foreach (var item in model)
                {
                    var objPCT = _pcongtac_ser.GetById(item.MaPCT);
                    if (objPCT != null)
                    {
                        //item.TT_Phien = (int)objPCT.MaTT;
                        item.IdPhieuCongTac = objPCT.ID;
                        item.SoPhieu = objPCT.SoPhieu;
                        item.MaLP = (int)objPCT.MaLP;
                        item.NguoiDuyetPCT = objPCT.NguoiDuyet;
                        item.NgayDuyetPCT = objPCT.NgayDuyet;
                        item.MaYeuCauCRM = objPCT.MaYeuCauCRM;
                        item.NguoiCNPCT = objPCT.NguoiCN != null ? objPCT.NguoiCN : objPCT.NguoiTao;
                        item.NgayCNPCT = objPCT.NgayCN != null ? objPCT.NgayCN : objPCT.NgayTao;
                    }
                }
                if (filterOption == 0 && !string.IsNullOrEmpty(filterTemp) && model != null)
                {
                    model = model.ToList().Where(x => !string.IsNullOrEmpty(x.SoPhieu) && x.SoPhieu.IndexOf(filterTemp) > -1 && (loaiPhieuLenh == 0 || loaiPhieuLenh == x.MaLP)).ToList();
                }
                if (loaiPhieuLenh > 0)
                {
                    model = model.ToList().Where(x => x.MaLP == loaiPhieuLenh).ToList();
                }

                ListNewsPageSize.Data = model;
                ListNewsPageSize.Page = new Page()
                {
                    RecordsName = "Phiên làm việc",
                    NumberOfPages = Convert.ToInt32(Math.Ceiling((double)Count / pageSize)),
                    RecordsPerPage = pageSize,
                    CurrentPage = page,
                    TotalRecords = Count
                };

                DateTime dts = new DateTime();
                DateTime dte = new DateTime();

                try
                {
                    if (!string.IsNullOrEmpty(DateFrom) && !string.IsNullOrEmpty(DateTo))
                    {
                        dts = DateTime.ParseExact(DateFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        dte = DateTime.ParseExact(DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        //PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);
                        dts = DateTime.Now;
                        dte = DateTime.Now;
                    }

                    Session["TuNgay"] = dts.ToString("dd/MM/yyyy");
                    Session["DenNgay"] = dte.ToString("dd/MM/yyyy");
                }
                catch (Exception ex)
                {
                    Session["TuNgay"] = "";
                    Session["DenNgay"] = "";
                }
            }
            else
            {
                ListNewsPageSize.Data = new List<PhienLVModel>();
                ListNewsPageSize.Page = new Page()
                {
                    RecordsName = "Phiên làm việc",
                    NumberOfPages = 0,
                    RecordsPerPage = 0,
                    CurrentPage = 0,
                    TotalRecords = 0
                };

                Session["TuNgay"] = "";
                Session["DenNgay"] = "";
            }

            //    ViewBag.PhienLVTong = model.Count;
            //    ViewBag.PhienLVDaXong = model.Count(x => x.TrangThai == "Đã xong");
            //    ViewBag.PhienLVDaDuyet = model.Count(x => x.TrangThai == "Đã Duyệt");
            //    ViewBag.PhienLVChuaDuyet = model.Count(x => x.TrangThai != "Đã xong" && x.TrangThai != "Đã Duyệt");

            ViewBag.PhienLVTong = model.Count();
            ViewBag.PhienLVDaXong = model.Count(x => x.TrangThai == 3);
            ViewBag.PhienLVDaDuyet = model.Count(x => x.TrangThai == 2);
            ViewBag.PhienLVChuaDuyet = model.Count(x => x.TrangThai == 1);
            ViewBag.PhienLVHuyBo = model.Count(x => x.TrangThai == 7);

            var lstTram = tramRepository.ListByPhongBanId(Session["PhongBanId"].ToString(), strcon).ToList();
            if (lstTram != null && lstTram.Count > 0)
            {
                //Namcv bổ sung, trường hợp là cao thế
                var objPCTHT = _SoPhieuHienTai_ser.GetObjByDonVi(strcon,
                                    Session["DonViID"].ToString(), "1", Session["PhongBanId"].ToString());
                if (objPCTHT != null)
                {
                    //namcv sửa lại theo mẫu phiếếu mới
                    //06/03/2022
                    if (objPCTHT.SoPhieu != "0")
                    {
                        ViewBag.PCTHienTai = (int.Parse(objPCTHT.SoPhieu)).ToString() + "/" + objPCTHT.Nam + "/" + objPCTHT.DonViTen;
                    }

                }

                var objLCTHT = _SoPhieuHienTai_ser.GetObjByDonVi(strcon,
                                        Session["DonViID"].ToString(), "2", Session["PhongBanId"].ToString());
                if (objLCTHT != null)
                {
                    if (objLCTHT.SoPhieu != "0")
                    {
                        ViewBag.LCTHienTai = (int.Parse(objLCTHT.SoPhieu)).ToString() + "/" + objLCTHT.Nam + "/" + objLCTHT.DonViTen;
                    }

                }
            }
            else
            {
                var objPCTHT = _SoPhieuHienTai_ser.GetObjByDonVi(strcon,
                                    Session["DonViID"].ToString(), "1", "");
                if (objPCTHT != null)
                {
                    //namcv sửa lại theo mẫu phiếếu mới
                    //06/03/2022
                    if (objPCTHT.SoPhieu != "0")
                    {
                        ViewBag.PCTHienTai = (int.Parse(objPCTHT.SoPhieu)).ToString() + "/" + objPCTHT.Nam + "/" + objPCTHT.DonViTen;
                    }

                }

                var objLCTHT = _SoPhieuHienTai_ser.GetObjByDonVi(strcon,
                                        Session["DonViID"].ToString(), "2", "");
                if (objLCTHT != null)
                {
                    if (objLCTHT.SoPhieu != "0")
                    {
                        ViewBag.LCTHienTai = (int.Parse(objLCTHT.SoPhieu)).ToString() + "/" + objLCTHT.Nam + "/" + objLCTHT.DonViTen;
                    }

                }
            }

            DisposeAll();

            return PartialView("_ListPhieuCongTac", ListNewsPageSize);
            //return null;
        }
        #endregion

        #region LenhCongTac
        public ActionResult IndexLenhCongTac(string id = "", string date = "")
        {
            var listTCPhien = tinhChatPhienRepository.List();
            ViewBag.ListTCPhien = listTCPhien;

            var listTTPhien = trangThaiPhienRepository.List();
            ViewBag.ListTTPhien = listTTPhien;

            var listThuocTinhPhienCatDien = thuocTinhPhienRepository.GetByLoaiThuocTinh(3);
            ViewBag.ThuocTinhPhienCatDien = listThuocTinhPhienCatDien;

            var listThuocTinhPhienTiepDia = thuocTinhPhienRepository.GetByLoaiThuocTinh(4);
            ViewBag.ThuocTinhPhienTiepDia = listThuocTinhPhienTiepDia;

            var listThuocTinhPhien5 = thuocTinhPhienRepository.GetByLoaiThuocTinh(5);
            ViewBag.ThuocTinhPhien5 = listThuocTinhPhien5;

            if (!string.IsNullOrEmpty(id))
            {
                DateTime dts = new DateTime();
                DateTime dte = new DateTime();
                PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);

                ViewBag.TuNgay = dts.ToString("dd/MM/yyyy");
                ViewBag.DenNgay = dte.ToString("dd/MM/yyyy");
                ViewBag.DonViID = id;
            }

            if (!string.IsNullOrEmpty(date))
            {
                ViewBag.TuNgay = date;
                ViewBag.DenNgay = date;
            }

            DisposeAll();

            return View();
        }

        [HttpGet]
        public ActionResult ListLenhCongTac(int page, int pageSize, string filter, int tcphien, int catdien, int tiepdia, int khac, string DateFrom, string DateTo, string DonViId, string PhongBanId, int ttPhien, int chuyenNPC, int phieuky)
        {
            filter = filter.Trim().ToUpper();
            int page1 = (page - 1) * pageSize;
            int pagelength1 = page * pageSize;
            int Count = 0;
            int Duyet = 0;
            string donviId = null;
            try
            {
                donviId = Session["DonViID"].ToString();
            }
            catch { }


            if (ttPhien > 0)
            {
                Duyet = ttPhien;
            }

            List<PhienLVModel> model;
            if (DonViId != null)
            {
                if (string.IsNullOrEmpty(DonViId))
                {
                    model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC, phieuky, "").ToList();
                    Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC, phieuky, "");
                }
                else
                {
                    var donVi = _dvi_ser.GetById(donviId);

                    if (donVi != null)
                    {
                        if (((donviId.Length == 4 && donVi.DviCha.Equals("PA")) || donviId.ToUpper().Equals("PH") || donviId.ToUpper().Equals("PN") || donviId.ToUpper().Equals("PM")) && (User.IsInRole("Master") || User.IsInRole("Manager")))
                        {
                            if (Duyet == 0)
                            {
                                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaDuyet, chuyenNPC, phieuky, "").ToList();
                                List<PhienLVModel> modelDaXong = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaXong, chuyenNPC, phieuky, "").ToList();
                                List<PhienLVModel> modelHuyBo = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.HuyBo, chuyenNPC, phieuky, "").ToList();

                                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaDuyet, chuyenNPC, phieuky, "");
                                int CountDaXong = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.DaXong, chuyenNPC, phieuky, "");
                                int CountHuyBo = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, (int)TrangThaiPhienLV.HuyBo, chuyenNPC, phieuky, "");

                                Count += (CountDaXong + CountHuyBo);
                                model.AddRange(modelDaXong);
                                model.AddRange(modelHuyBo);
                            }
                            else if (Duyet == (int)TrangThaiPhienLV.DaXong || Duyet == (int)TrangThaiPhienLV.DaDuyet || Duyet == (int)TrangThaiPhienLV.HuyBo || Duyet == (int)TrangThaiPhienLV.VuaTao)
                            {
                                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC, phieuky, "").ToList();
                                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC, phieuky, "");
                            }
                            else
                            {
                                model = new List<PhienLVModel>();
                                Count = 0;
                            }
                        }
                        else
                        {
                            if (User.IsInRole("Leader"))
                            {
                                string phongBanID = Session["PhongBanId"].ToString();

                                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, phongBanID, Duyet, chuyenNPC, phieuky, "leader").ToList();
                                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, phongBanID, Duyet, chuyenNPC, phieuky, "leader");
                            }
                            else
                            {
                                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC, phieuky, "").ToList();
                                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC, phieuky, "");
                            }

                        }
                    }
                    else
                    {
                        model = new List<PhienLVModel>();
                        Count = 0;
                    }
                }
            }
            else
            {
                model = _plviec_ser.AdvancedSearchPhienLv(page1, pagelength1, filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC, phieuky, "").ToList();
                Count = _plviec_ser.CountTotalPhienLV(filter, tcphien, catdien, tiepdia, khac, DateFrom, DateTo, DonViId, PhongBanId, Duyet, chuyenNPC, phieuky, "");
            }

            var ListNewsPageSize = new PageData<PhienLVModel>();
            if (model.Count() > 0)
            {
                foreach (var item in model)
                {
                    var objPCT = _pcongtac_ser.GetById(item.MaPCT);
                    if (objPCT != null)
                    {
                        item.SoPhieu = objPCT.SoPhieu;
                        item.MaLP = (int)objPCT.MaLP;
                    }
                }


                ListNewsPageSize.Data = model;
                ListNewsPageSize.Page = new Page()
                {
                    RecordsName = "Phiên làm việc",
                    NumberOfPages = Convert.ToInt32(Math.Ceiling((double)Count / pageSize)),
                    RecordsPerPage = pageSize,
                    CurrentPage = page,
                    TotalRecords = Count
                };

                DateTime dts = new DateTime();
                DateTime dte = new DateTime();

                try
                {
                    if (!string.IsNullOrEmpty(DateFrom) && !string.IsNullOrEmpty(DateTo))
                    {
                        dts = DateTime.ParseExact(DateFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        dte = DateTime.ParseExact(DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        //PhienLVRepository.GetDateStartEnd_FromDateNow(ref dts, ref dte, DateTime.Now);
                        dts = DateTime.Now;
                        dte = DateTime.Now;
                    }

                    Session["TuNgay"] = dts.ToString("dd/MM/yyyy");
                    Session["DenNgay"] = dte.ToString("dd/MM/yyyy");
                }
                catch (Exception ex)
                {
                    Session["TuNgay"] = "";
                    Session["DenNgay"] = "";
                }
            }
            else
            {
                ListNewsPageSize.Data = new List<PhienLVModel>();
                ListNewsPageSize.Page = new Page()
                {
                    RecordsName = "Phiên làm việc",
                    NumberOfPages = 0,
                    RecordsPerPage = 0,
                    CurrentPage = 0,
                    TotalRecords = 0
                };

                Session["TuNgay"] = "";
                Session["DenNgay"] = "";
            }

            ViewBag.PhienLVTong = model.Count();
            ViewBag.PhienLVDaXong = model.Count(x => x.TrangThai == 3);
            ViewBag.PhienLVDaDuyet = model.Count(x => x.TrangThai == 2);
            ViewBag.PhienLVChuaDuyet = model.Count(x => x.TrangThai == 1);
            ViewBag.PhienLVHuyBo = model.Count(x => x.TrangThai == 7);

            DisposeAll();

            return PartialView("_ListPhieuCongTac", ListNewsPageSize);
        }
        #endregion

        public ActionResult LenhCongTac(int phienlvid)
        {
            int phieucongtacid = 0;
            try
            {

                ViewBag.phienlvid = phienlvid;
                ViewBag.ThuocTinhPhienLV = _kh_ser.Context.plv_ThuocTinhPhien.AsNoTracking().ToList();
                PhienLVModel phienLVModel = _plviec_ser.GetPhienLVById(phienlvid);

                ViewBag.PhieuCongTac = null;
                if (phienLVModel != null)
                {
                    var objPCT = _pcongtac_ser.GetById(phienLVModel.MaPCT);
                    ViewBag.PhieuCongTac = objPCT;
                    if (objPCT != null)
                    {
                        phieucongtacid = objPCT.ID;
                    }
                    if (phienLVModel.PhongBanID > 0)
                    {
                        var phongban = _dvi_ser.Context.tblPhongBans.FirstOrDefault(x => x.Id == phienLVModel.PhongBanID);
                        if (phongban != null)
                        {
                            phienLVModel.TenPhongBan = phongban.TenPhongBan;
                        }
                    }
                    List<plv_PhieuCT_NhanVien> nhanVienCongTac = _nvphieucontac.GetListByMaPhieuV2(objPCT.ID, strcon);
                    if (nhanVienCongTac != null && nhanVienCongTac.Count > 0)
                    {
                        ViewBag.NhanVienCongTac = nhanVienCongTac;
                    }
                }
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(phieucongtacid);
                if (phieuCongTacObj != null)
                {
                    if (phieuCongTacObj.MaLP == 1)
                    {
                        return RedirectToAction("PhieuCongTac", "PhienLV", new { phienlvid = phienlvid, phieucongtacid = phieuCongTacObj.ID });
                    }
                    ViewBag.PhieuCongTac = phieuCongTacObj;
                }
                ViewBag.phieucongtacid = phieucongtacid;

                DisposeAll();
                return View(phienLVModel);
            }
            catch (Exception)
            {
                DisposeAll();
                throw;
            }
        }

        [HttpPost]
        public ActionResult UpdateLenhCongTac(
            int phieucongtacid,
            int phienlvid,
          string phieucongtac,
          string NoiDung,
          string DiaDiem,
          string DieuKienAnToan,
          string SoNguoiThamGia,
          string TenDonVi_LCT,
          string NhanVienDonViCongTac_SelectEmp,
          string LoaiCongViec,
          string MaYeuCauCRM,
         int? TramId
          )
        {
            try
            {
                string errorUpdatePhieuCongTac = string.Empty;
                string errorUpdatePhienLamViec = string.Empty;
                StringBuilder strResult = new StringBuilder();
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(phieucongtacid);

                List<string> userPushNotificationWeb = new List<string>();

                List<tblPhienLamViec> listPhienLamViecObj = _plviec_ser.GetListByMaPhieuCongTac(phieucongtacid);
                bool checkEndSession = false;
                if (phieuCongTacObj != null && listPhienLamViecObj != null && listPhienLamViecObj.Count > 0)
                {

                    //Namcv kiểm tra thêm phiên đã xong không cho sửa số phiếu.
                    //Một Phiếu công tác cho nhiều phiên làm việc.
                    //All phiên kết thúc => Phiếu kết thúc.
                    foreach (tblPhienLamViec phienLamViec in listPhienLamViecObj)
                    {
                        if (phienLamViec.TrangThai <= 2)
                        {
                            checkEndSession = true;
                            break;
                        }
                    }

                    if (!checkEndSession)
                    {
                        return Json(new { success = false, responseText = "Công việc đã kết thúc không thể cập nhật." }, JsonRequestBehavior.AllowGet);
                    }
                    //tblPhienLamViec plviec= listPhienLamViecObj.First();

                    //if(plviec.TrangThai > 2)
                    //{
                    //    return Json(new { success = false, responseText = "Phiên kết thúc không thể cập nhật." }, JsonRequestBehavior.AllowGet);
                    //}

                    if (string.IsNullOrEmpty(LoaiCongViec))
                    {
                        return Json(new { success = false, responseText = "Loại công việc không được để trống." }, JsonRequestBehavior.AllowGet);
                    }

                    if (string.IsNullOrEmpty(TenDonVi_LCT))
                    {
                        return Json(new { success = false, responseText = "Tên đơn vị không được bỏ trống." }, JsonRequestBehavior.AllowGet);
                    }

                    if (!string.IsNullOrEmpty(phieucongtac))
                    {
                        //if (_pcongtac_ser.CheckExistSoPhieu(phieuCongTacObj.ID, phieucongtac) == false)
                        //{
                        //phieuCongTacObj.SoPhieu = phieucongtac.Trim();

                        //if (CheckSoPhieu(phieucongtac))
                        //    return Json(new { success = false, responseText = "Số phiếu không đúng định dạng." }, JsonRequestBehavior.AllowGet);

                        //UpdateSoPhieuMoiNhat(phieuCongTacObj);
                        phieuCongTacObj.MaTT = 2;
                        //}
                        //else
                        //{
                        //    return Json(new { success = true, responseText = "Số lệnh công tác đã tồn tại." }, JsonRequestBehavior.AllowGet);
                        //}
                    }
                    else
                    {
                        phieuCongTacObj.MaTT = 1;
                    }


                    int intSoNguoiThamGia = 0;
                    if (!string.IsNullOrEmpty(SoNguoiThamGia))
                    {
                        try
                        {
                            intSoNguoiThamGia = int.Parse(SoNguoiThamGia);
                        }
                        catch
                        { }
                    }

                    phieuCongTacObj.TramId = TramId;
                    phieuCongTacObj.SoNguoiThamGia = intSoNguoiThamGia;
                    phieuCongTacObj.DieuKienAnToan = DieuKienAnToan;
                    phieuCongTacObj.TenDonVi_LCT = TenDonVi_LCT;
                    phieuCongTacObj.LoaiCongViecId = Convert.ToInt32(LoaiCongViec);
                    phieuCongTacObj.MaYeuCauCRM = MaYeuCauCRM;
                    phieuCongTacObj.NgayCN = DateTime.Now;
                    phieuCongTacObj.NguoiCN = User.Identity.Name;

                    int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                    if (idPhieuCongTac > 0)
                    {
                        //Lưu PCT thành công
                    }
                    else
                    {
                        //Lưu PCT thành công
                        strResult.Append(errorUpdatePhieuCongTac);
                    }

                    foreach (var item in listPhienLamViecObj)
                    {
                        item.NoiDung = NoiDung;
                        item.DiaDiem = DiaDiem;

                        int updatePhienLamViecItemResult = _plviec_ser.PhienLamViec_UpdateNew(item);
                        if (updatePhienLamViecItemResult < 1)
                        {
                            strResult.Append("Phiên làm việc " + item.Id + " cập nhật không thành công. ");
                        }
                    }

                    if (!string.IsNullOrEmpty(NhanVienDonViCongTac_SelectEmp))
                    {
                        string[] nvct = NhanVienDonViCongTac_SelectEmp.Split('*');
                        string res = "";
                        List<plv_PhieuCT_NhanVien> listNhanVienPCT = _nvphieucontac.GetListByMaPhieu(phieuCongTacObj.ID);
                        if (listNhanVienPCT != null && listNhanVienPCT.Count > 0)
                        {
                            foreach (var item in listNhanVienPCT)
                            {
                                _nvphieucontac.Delete(item.Id, ref res);
                            }
                        }

                        if (nvct != null && nvct.Count() > 0)
                        {
                            List<string> listNhanVienID = new List<string>();
                            foreach (var item in nvct)
                            {
                                string[] infoNhanVien = item.Split('|');
                                if (infoNhanVien != null && infoNhanVien.Count() == 2 && !listNhanVienID.Any(x => x.Equals(infoNhanVien[1].Trim())))
                                {
                                    listNhanVienID.Add(infoNhanVien[1].Trim());
                                    var nhanVien = _nhanvien_ser.GetById(infoNhanVien[1].Trim());
                                    if (nhanVien != null)
                                    {
                                        plv_PhieuCT_NhanVien pctNhanVien = new plv_PhieuCT_NhanVien();
                                        pctNhanVien.IsDen = false;
                                        pctNhanVien.IsRut = false;
                                        pctNhanVien.MaNV = nhanVien.Id;
                                        pctNhanVien.MaPCT = phieuCongTacObj.ID;
                                        pctNhanVien.TenNV = nhanVien.TenNhanVien + " - " + nhanVien.SoDT;
                                        pctNhanVien.BacAnToan = nhanVien.BacAnToan;
                                        _nvphieucontac.Create(pctNhanVien, ref res);
                                    }
                                    else if (!string.IsNullOrEmpty(infoNhanVien[0]))
                                    {
                                        plv_PhieuCT_NhanVien pctNhanVien = new plv_PhieuCT_NhanVien();
                                        pctNhanVien.IsDen = false;
                                        pctNhanVien.IsRut = false;
                                        //pctNhanVien.MaPCT = phieuCongTacObj.ID;
                                        pctNhanVien.TenNV = infoNhanVien[0].Trim();
                                        pctNhanVien.BacAnToan = nhanVien.BacAnToan;
                                        _nvphieucontac.Create(pctNhanVien, ref res);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        string res = "";
                        List<plv_PhieuCT_NhanVien> listNhanVienPCT = _nvphieucontac.GetListByMaPhieu(phieuCongTacObj.ID);
                        if (listNhanVienPCT != null && listNhanVienPCT.Count > 0)
                        {
                            foreach (var item in listNhanVienPCT)
                            {
                                _nvphieucontac.DeleteNhanVienPhieuCT(phieuCongTacObj.ID, item.MaNV, ref res);
                            }
                        }
                    }
                }

                DisposeAll();

                string responseText = strResult.ToString();
                if (string.IsNullOrEmpty(responseText))
                {
                    return Json(new { success = true, responseText = responseText }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { success = false, responseText = "Cập nhật lệnh công tác thành công!" }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                DisposeAll();

                //NLoger.Error("loggerDatabase", string.Format("Lỗi Duyệt lệnh làm việc. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Lỗi cập nhật lệnh công tác. Chi tiết: " + ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }
        #region UpdateDiaDiem
        [HttpPost]
        public async Task<ActionResult> UpdateDiaDiem(List<string> listId, decimal lat, decimal lng, string DiaDiem)
        {
            try
            {
                if (listId != null && listId.Count > 0)
                {
                    List<object> json = new List<object>();

                    foreach (var Id in listId)
                    {
                        string kt = "";
                        var plv = _plviec_ser.GetById(Id);
                        if (plv != null)
                        {
                            plv.KinhDo = lng;
                            plv.ViDo = lat;
                            int kq = _plviec_ser.PhienLamViec_UpdateNew(plv);
                            if (kq > 0)
                            {
                                var jsonDuyetPhienLV = new
                                {
                                    success = true,
                                    responseText = "Cập nhật địa điểm phiên làm việc thành công"
                                };

                                json.Add(jsonDuyetPhienLV);
                            }
                            else
                            {
                                var jsonDuyetPhienLV = new
                                {
                                    success = false,
                                    responseText = "Cập nhật địa điểm phiên làm việc không thành công"
                                };
                            }

                        }
                        else
                        {
                            var jsonDuyetPhienLV = new
                            {
                                success = false,
                                responseText = "Không tồn tại phiên làm việc"
                            };

                            json.Add(jsonDuyetPhienLV);
                        }
                    }

                    DisposeAll();

                    return Json(json, JsonRequestBehavior.AllowGet);
                }

                DisposeAll();

                return Json(new { success = false, responseText = "Cập nhật địa điểm phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();
                //NLoger.Error("loggerDatabase", string.Format("Lỗi cập nhật địa điểm phiên làm việc. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Cập nhật địa điểm phiên làm việc không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region KetThucPhienLv
        [HttpGet]
        public async Task<ActionResult> KetThucPhienLv(string Id)
        {
            string kt = "";
            try
            {
                tblPhienLamViec plv = _plviec_ser.GetById(int.Parse(Id));

                if (plv == null)
                {
                    DisposeAll();

                    return Json("Phiên làm việc không tồn tại!", JsonRequestBehavior.AllowGet);
                }

                //var sla = _plviec_ser.CountImagePLVByNhom(int.Parse(Id), 4);
                //if (sla <= 0)
                //{
                //    DisposeAll();

                //    return Json("Chưa có ảnh bước 3, không thể kết thúc công việc này!", JsonRequestBehavior.AllowGet);
                //}

                plv.TrangThai = 3;
                plv.NgayKetThuc = DateTime.Now;
                plv.NguoiKetThuc = User.Identity.Name;
                plv.IsEndByWeb = true;
                var kq = _plviec_ser.Update(plv, ref kt);

                if (int.Parse(kq.ToString()) > 0)
                {
                    try
                    {
                        tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();

                        nhatKy.PhienLamViecId = plv.Id;
                        nhatKy.NgayTao = DateTime.Now;
                        nhatKy.NguoiTao = User.Identity.Name;
                        nhatKy.DonViId = plv.DonViId;
                        nhatKy.TrangThaiCu = plv.TrangThai;
                        nhatKy.TrangThaiMoi = 6;
                        nhatKy.GhiChu = "Kết thúc công việc";
                        nhatKy.PhongBanId = plv.PhongBanID;

                        string strError = "";
                        nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);

                        //Bổ sung gọi API PMIS kết thúc
                        try
                        {


                            ECP_V2Entities db = new ECP_V2Entities();
                            var plv_tb = db.KTDK_PHIENLV.Where(d => d.id_phien == plv.Id).ToList();
                            var tt = db.KTDK_XLTT.Where(d => d.ID_PHIEN == plv.Id).Select(g => new { id_tontai = g.ID_TONTAI }).ToList();
                            if (plv_tb.Count > 0 || tt.Count > 0)
                            {

                                string baseUrlpmis = System.Configuration.ConfigurationManager.AppSettings["API_PMIS"].ToString();
                                string keypdf = System.Configuration.ConfigurationManager.AppSettings["PDKEY"].ToString();
                                string strbody = Newtonsoft.Json.JsonConvert.SerializeObject(tt);
                                // update cho pmis
                                var path = String.Format("/PMIS_Web/shared/service/S_ServiceClient.jsf?SOAP_NAME=at_ktdk_end_JSON&PDKEY={0}&id_phien={1}&MA_DVIQLY={2}&ngay={3}&nguoiph={4}",
                                                                                                   keypdf, plv.Id, plv.DonViId, plv.NgayLamViec.ToString("yyyy-MM-dd"), User.Identity.Name);

                                HttpClient c = new HttpClient();



                                ////// tạo form post
                                var form = new MultipartFormDataContent();
                                form.Add(new StringContent(strbody), "ds_tt");
                                var res = c.PostAsync(baseUrlpmis + path, form).Result;
                                if (res.IsSuccessStatusCode)
                                {
                                    foreach (var v in plv_tb)
                                    {
                                        var tbi = db.KTDK_TBI_LOAI.Where(d => d.ASSETID == v.assetid && d.ID_LOAIKTR == v.id_loaiktr).FirstOrDefault();
                                        if (tbi != null)
                                            tbi.NGAY_TH_MAX = plv.NgayLamViec;
                                    }
                                    //new ElogService(config).SaveLog(plv.Id, plv.DonViId, "PLV_KT_PMIS_OK", res.Content.ReadAsStringAsync().Result, strbody, baseUrlpmis + path);

                                }
                                else
                                {
                                    //new ElogService(config).SaveLog(plv.Id, plv.DonViId, "PLV_KT_PMIS_Fail", res.Content.ReadAsStringAsync().Result, strbody, baseUrlpmis + path);
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            //new ElogService(config).SaveLog(plv.Id, plv.DonViId, "PLV_KT_PMIS_EX", ex.InnerException.ToString(), "", "");

                        }
                    }
                    catch
                    {

                    }

                    ////NLoger.Info("loggerDatabase", string.Format("Tài khoản {0} kết thúc phiên làm việc {1} thành công", User.Identity.Name, plv.DiaDiem));
                    #region Gửi notify mobile
                    var userIds = new List<string>
                    {
                     plv.NguoiDuyet_SoPa_Id,
                     plv.NguoiChiHuy_Id,
                     plv.GiamSatVien_Id,
                     plv.NguoiKiemSoat_Id,
                     plv.NguoiKiemTraPhieu_Id,
                     plv.LanhDaoTrucBan_Id,
                     plv.LanhDaoCongViec_Id,
                     plv.NguoiCapPhieu_Id,
                     //plv.NguoiDaiDienKT_Id // Phiên làm việc
                    }.Where(id => !string.IsNullOrEmpty(id)).ToList(); // Loại bỏ Id null hoặc rỗng
                    if (userIds.Any())
                    {
                        var UserThaoTac = _nhanvien_ser.GetByUserName(User.Identity.Name);
                        foreach (var userId in userIds)
                        {
                            var requestData = new
                            {
                                IDConect = "PN",
                                userId = userId,
                                title = "Kết thúc phiên làm việc",
                                name = "NPCIT",
                                header = " ",
                                subtitle = " ",
                                contents = UserThaoTac.TenNhanVien + " - " + UserThaoTac.ChucVu + "- Kết thúc phiên làm việc",
                            };

                            var jsonContent = JsonConvert.SerializeObject(requestData);
                            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                            using (HttpClient httpClient = new HttpClient())
                            {
                                var Api_Notify = ApiNotify + "api/v1.0/Notify/PushNotificationByUser";

                                var response = await httpClient.PostAsync(Api_Notify, content);

                                if (response.IsSuccessStatusCode)
                                {
                                    var result = await response.Content.ReadAsStringAsync();
                                    var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(result);

                                    if (!apiResponse.Success)
                                    {
                                        return Json(new { success = false, message = "Gửi thông báo thất bại với ID: " + userId }, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }
                        }

                        //return Json(new { success = true, message = "Thông báo đã được gửi đến tất cả người dùng!" }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        //return Json(new { success = false, message = "Không có Id nào hợp lệ để gửi thông báo!" }, JsonRequestBehavior.AllowGet);
                    }

                    #endregion

                }
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                //NLoger.Error("loggerDatabase", string.Format("Lỗi kết thúc phiên làm việc. Chi tiết: {0}", ex.Message));
            }

            DisposeAll();

            return Json(kt, JsonRequestBehavior.AllowGet);
        }

        #endregion

        [HttpPost]
        public async Task<ActionResult> LuuNhayPhieu(int SoLuong, int MaLP, int? TramId)
        {
            string kt = "";
            try
            {

                for (int i = 0; i < SoLuong; i++)
                {
                    PhieuCongTacRepository _pcongtac_ser = new PhieuCongTacRepository();
                    LichSuCapSoPhieuRepository _lsCapSoPhieu_ser = new LichSuCapSoPhieuRepository();
                    SoPhieuHienTaiRepository _SoPhieuHienTai_ser = new SoPhieuHienTaiRepository();

                    #region sinh ma tu dong
                    string sophieumoi = "";
                    DateTime now = DateTime.Now;
                    try
                    {
                        //#region check chuyen thang
                        //var objCT = _thanglamviec_ser._GetMaxByDonViIdPhanHe(Session["DonViID"].ToString(), "CT");
                        //if (objCT != null)
                        //{
                        //    if ((objCT.Nam >= now.Year && objCT.Thang >= now.Month) || (objCT.Nam > now.Year && objCT.Thang < now.Month))
                        //        now = new DateTime(objCT.Nam ?? 0, objCT.Thang ?? 0, 1);
                        //    else
                        //        continue;
                        //}
                        //#endregion

                        //var data = _SoPhieuHienTai_ser.GetObjByDate(System.Configuration.ConfigurationManager.ConnectionStrings["IdentityDbContext"].ConnectionString,
                        //            now.Month.ToString(), now.Year.ToString(),
                        //            Session["DonViID"].ToString(), MaLP.ToString()
                        //            , TramId.ToString());
                        //if (data != null)
                        //{
                        //    sophieumoi = data.SoPhieu + "/" + data.Nam + "/" + data.DonViId;
                        //    //if (string.IsNullOrEmpty(data.SoPhieu))
                        //    //{
                        //    //    sophieumoi = "00001/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2);
                        //    //}
                        //    //else
                        //    //{
                        //        //sophieumoi = NextID(data.SoPhieu, "/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2), MaLP, data.TramId.ToString());
                        //    //}
                        //}
                        //else
                        //{
                        //    sophieumoi = "00001/" + String.Format("{0:MM}", now) + "/" + String.Format("{0:yyyy}", now).Remove(0, 2);
                        //}                        
                        sophieumoi = _pcongtac_ser.GetSoPhieuCtac(Session["DonViId"].ToString(), DateTime.Now.Year, MaLP, Session["UserName"].ToString(), 0);
                        //phieuCongTacObj.SoPhieu = sophieu;

                    }
                    catch (Exception ex)
                    {

                    }
                    #endregion

                    string errls = "";
                    plv_LichSuCapSoPhieu objls = new plv_LichSuCapSoPhieu();
                    objls.MaLP = MaLP;
                    objls.NgayTao = DateTime.Now;
                    objls.NguoiTao = User.Identity.Name;
                    objls.SoPhieu = sophieumoi;
                    objls.IsHand = true;
                    objls.DonViId = Session["DonViID"].ToString();
                    objls.Nam = now.Year;
                    objls.Thang = now.Month;
                    objls.TramId = TramId;
                    _lsCapSoPhieu_ser.Create(objls, ref errls);

                    DisposeAll();
                }

                //Cập nhật lại số phiếu hiện tại
                //Gọi thủ tục xử lý                
                //var dtSP = _SoPhieuHienTai_ser.GetObjByDonVi(conn,
                //        Session["DonViID"].ToString(), MaLP.ToString(), Session["PhongBanId"].ToString());
                ////Cập nhật
                ////Check trường hợp trạm 110kv.

                _SoPhieuHienTai_ser.updateSoPhieuHienTai(strcon, DateTime.Now, User.Identity.Name, SoLuong.ToString(), true, null, DateTime.Now.Year, int.Parse(Session["PhongBanId"].ToString()), MaLP, Session["DonViID"].ToString());

                //if (dtSP != null)
                //{                   
                //    _SoPhieuHienTai_ser.updateSoPhieuHienTai(conn, DateTime.Now, User.Identity.Name, SoLuong.ToString(), true, null, DateTime.Now.Year, int.Parse(Session["PhongBanId"].ToString()), MaLP, Session["DonViID"].ToString());
                //}
                //else
                //{
                //    plv_SoPhieuHienTai objht = new plv_SoPhieuHienTai();
                //    objht.MaLP = MaLP;
                //    objht.NgayTao = DateTime.Now;
                //    objht.NguoiTao = User.Identity.Name;
                //    objht.SoPhieu = sophieumoi;
                //    objht.DonViId = Session["DonViID"].ToString();
                //    objht.IsHand = true;
                //    objht.Nam = now.Year;
                //    objht.Thang = now.Month;
                //    objht.TramId = TramId;
                //    _SoPhieuHienTai_ser.Create(objht, ref errls);
                //}

                string phieuLenh = " [ Phiếu Công Tác ] ";
                if (MaLP == 2)
                {
                    phieuLenh = " [ Lệnh Công Tác ] ";
                }
                DisposeAll();
                return Json(new { success = true, responseText = "Nhảy số" + phieuLenh + "thành công" }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                return Json(new { success = false, responseText = "Nhảy số Phiếu/Lệnh không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult CmbSoPhieuCongTac(int MaLP, int PhieuID)
        {
            try
            {
                var objPCT = _pcongtac_ser.GetById(PhieuID);
                string html = "";
                var dtSP = _lsCapSoPhieu_ser.GetListSearch(strcon, Session["DonViID"].ToString(), MaLP.ToString(), objPCT.TramId.ToString());
                var lstTram = tramRepository.ListByPhongBanId(Session["PhongBanId"].ToString(), strcon).ToList();
                foreach (var item in dtSP)
                {
                    if (item.TramId != null)
                    {
                        var objt = lstTram.FirstOrDefault(o => o.Id == item.TramId);
                        if (objt != null)
                            html += "<option value=" + item.ID + ">" + item.SoPhieu.Trim() + " - " + objt.TenDV + "</option>";
                        else
                            html += "<option value=" + item.ID + ">" + item.SoPhieu.Trim() + "</option>";
                    }
                    else
                        html += "<option value=" + item.ID + ">" + item.SoPhieu.Trim() + "</option>";
                }
                ViewBag.DanhSachPhieu = html;

                DisposeAll();
                return View();
            }
            catch (Exception ex)
            {
                DisposeAll();
                //NLoger.Error("loggerDatabase", string.Format("Không lấy được danh sách số phiếu", User.Identity.Name, ex.Message));
                return View();
            }

        }

        [HttpGet]
        public ActionResult CmbSoPhieuHienTaiTheoTram(int MaLP)
        {
            try
            {
                string html = "";
                var lstTram = tramRepository.ListByPhongBanId(Session["PhongBanId"].ToString(), strcon).ToList();

                foreach (var item in lstTram)
                {
                    string SoPhieu = "";
                    var objPCTHT = _SoPhieuHienTai_ser.GetObjByDonVi(strcon, Session["DonViID"].ToString(), MaLP.ToString(), item.Id.ToString());
                    if (objPCTHT != null)
                    {
                        SoPhieu = objPCTHT.SoPhieu;
                        html += "<option value=" + item.Id + ">" + item.TenDV.Trim() + " - " + SoPhieu + "</option>";
                    }
                    else
                        html += "<option value=" + item.Id + ">" + item.TenDV.Trim() + "</option>";
                }
                ViewBag.SoPhieuHienTaiTheoTram = html;

                DisposeAll();
                return View();
            }
            catch (Exception ex)
            {
                DisposeAll();
                return View();
            }
        }


        [HttpPost]
        public async Task<ActionResult> LuuChonSoPhieuLenh(string Id, int MaSoPhieu)
        {
            string kt = "";
            string errorUpdatePhieuCongTac = "";
            try
            {
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(int.Parse(Id));

                var objP = _lsCapSoPhieu_ser.GetById(MaSoPhieu);

                phieuCongTacObj.SoPhieu = objP.SoPhieu;

                string errls = "";
                objP.MaPCT = phieuCongTacObj.ID;
                _lsCapSoPhieu_ser.Update(objP, ref errls);

                int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                string phieuLenh = " [ Phiếu Công Tác ] ";
                if (phieuCongTacObj.MaLP == 2)
                {
                    phieuLenh = " [ Lệnh Công Tác ] ";
                }
                if (idPhieuCongTac > 0)
                {
                    DisposeAll();
                    return Json(new { success = true, responseText = "Cập nhật số" + phieuLenh + "thành công" }, JsonRequestBehavior.AllowGet);
                }

                DisposeAll();
                return Json(new { success = false, responseText = "Cập nhật số" + phieuLenh + "không thành công" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                ////NLoger.Error("loggerDatabase", string.Format("Lỗi cấp số Phiếu/Lệnh. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Cập nhật số Phiếu/Lệnh không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        public bool UpdateSoPhieuMoiNhat(plv_PhieuCongTac obj)
        {
            bool kq = false;
            try
            {
                List<plv_PhieuCongTac> lstP = _pcongtac_ser.GetObjPhieu(strcon, Session["DonViID"].ToString(), obj.MaLP.ToString(), obj.TramId.ToString());
                List<SoPhieuModel> lstD = new List<SoPhieuModel>();
                foreach (var item in lstP)
                {
                    try
                    {
                        SoPhieuModel objM = new SoPhieuModel();
                        objM.ID = item.ID;
                        objM.SoPhieu = item.SoPhieu;
                        objM.Ngay = item.NgayTao ?? DateTime.Now;//new DateTime(int.Parse(objM.SoPhieu.Split('/')[1]), int.Parse(item.NgayTao.Month()), 1);
                        objM.SoLuong = int.Parse(objM.SoPhieu.Split('/')[0]);

                        lstD.Add(objM);
                    }
                    catch (Exception ex)
                    { }
                }

                //try
                //{
                //    SoPhieuModel objM = new SoPhieuModel();
                //    objM.ID = obj.ID;
                //    objM.SoPhieu = obj.SoPhieu;
                //    objM.Ngay = DateTime.Now; //new DateTime(2000 + int.Parse(objM.SoPhieu.Split('/')[2]), int.Parse(objM.SoPhieu.Split('/')[1]), 1);
                //    objM.SoLuong = int.Parse(objM.SoPhieu.Split('/')[0]);

                //    lstD.Add(objM);
                //}
                //catch (Exception ex)
                //{ }

                var objF = lstD.OrderByDescending(o => o.Ngay).FirstOrDefault();
                var lstdata = lstD.Where(o => o.Ngay.Year == objF.Ngay.Year);
                var objOK = lstdata.OrderByDescending(o => o.SoLuong).FirstOrDefault();
                string errls = "";
                String DonViId = Session["DonViID"].ToString();
                var dtSP = new plv_SoPhieuHienTai();
                if (DonViId.EndsWith("CT") == true && DonViId != "PA07CT")
                {
                    dtSP = _SoPhieuHienTai_ser.
                    GetObjByDonVi(strcon, DonViId
                            , obj.MaLP.ToString(), Session["PhongBanId"].ToString());
                }
                else
                {
                    dtSP = _SoPhieuHienTai_ser.
                    GetObjByDonVi(strcon, DonViId
                            , obj.MaLP.ToString(), obj.TramId.ToString());
                }

                int voteNew = int.Parse(obj.SoPhieu.Split('/')[0]);

                if (dtSP.SoPhieu.Length > 0)
                {
                    if (voteNew > int.Parse(objOK.SoPhieu.Split('/')[0]))
                    {
                        dtSP.SoPhieu = (voteNew).ToString();
                    }
                    else
                    {
                        dtSP.SoPhieu = (objOK.SoLuong).ToString();
                    }

                    _SoPhieuHienTai_ser.updateSoPhieuHienTai(strcon, DateTime.Now, User.Identity.Name, dtSP.SoPhieu, false, objOK.ID.ToString(), DateTime.Now.Year, int.Parse(Session["PhongBanId"].ToString()), obj.MaLP.Value, DonViId);
                }
                else
                {
                    plv_SoPhieuHienTai objht = new plv_SoPhieuHienTai();
                    objht.MaLP = obj.MaLP;
                    objht.NgayTao = DateTime.Now;
                    objht.NguoiTao = User.Identity.Name;
                    if (voteNew > int.Parse(objOK.SoPhieu.Split('/')[0]))
                    {
                        dtSP.SoPhieu = (voteNew + 1).ToString();
                    }
                    else
                    {
                        dtSP.SoPhieu = (objOK.SoLuong + 1).ToString();
                    }
                    objht.DonViId = Session["DonViID"].ToString();
                    objht.MaPCT = objOK.ID;
                    objht.Thang = DateTime.Now.Month;
                    objht.Nam = DateTime.Now.Year;
                    _SoPhieuHienTai_ser.Create(objht, ref errls);
                }

                kq = true;
            }
            catch (Exception ex)
            {

            }
            return kq;
        }

        //Namcv add 06/03/2022
        //Check lại theo yêu cầu định dạng số phiếu mới STT/Năm/Mã đơn vị 100/2022/PNYM00
        //Có thể check thêm trường hợp không nằm trong khoảng đăng ký giữ số.

        public bool CheckSoPhieu(string SoPhieu)
        {
            bool kt = false;
            //try
            //{
            //    if (SoPhieu.Split('/').Length != 3)
            //        kt = true;
            //    else
            //    {
            //        int n;
            //        if (SoPhieu.Split('/')[0].Length != 5 || SoPhieu.Split('/')[1].Length != 2 || SoPhieu.Split('/')[2].Length != 2
            //            || !int.TryParse(SoPhieu.Split('/')[0], out n) || !int.TryParse(SoPhieu.Split('/')[1], out n) || !int.TryParse(SoPhieu.Split('/')[2], out n))
            //            kt = true;
            //    }
            //}
            //catch (Exception ex)
            //{ }

            try
            {
                if (SoPhieu.Split('/').Length != 3)
                    kt = true;
                else
                {
                    //Bổ sung điều kiện check SoPhieu.Split('/')[2] là mã đơn vị đăng nhập

                    int n;
                    //if (SoPhieu.Split('/')[1].Length != 4
                    //    || !int.TryParse(SoPhieu.Split('/')[0], out n) || !int.TryParse(SoPhieu.Split('/')[1], out n)
                    //    || !Session["DonViID"].ToString().Equals(SoPhieu.Split('/')[2]))
                    //    kt = true;
                    //Tam bo phan check don vi
                    if (SoPhieu.Split('/')[1].Length != 4
                        || !int.TryParse(SoPhieu.Split('/')[0], out n) || !int.TryParse(SoPhieu.Split('/')[1], out n)
                        )
                        kt = true;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return kt;
        }

        public async Task<ActionResult> ReLoadKeHoachTuan()
        {
            return PartialView("~/Views/Shared/KeHoachTuan.cshtml", true);
        }

        [HttpPost]
        public async Task<ActionResult> LuuTablePhieuLenh(string Id, int Wtable1, int Htable1, int Wtable2, int Htable2
            , int Wtable3, int Htable3, int Wtable4, int Htable4, int Wtable5, int Htable5)
        {
            string kt = "";
            string errorUpdatePhieuCongTac = "";
            try
            {
                plv_PhieuCongTac phieuCongTacObj = _pcongtac_ser.GetById(int.Parse(Id));
                //phieuCongTacObj.SoPhieu = objP.SoPhieu;


                int idPhieuCongTac = (int)_pcongtac_ser.Update(phieuCongTacObj, ref errorUpdatePhieuCongTac);
                string phieuLenh = " [ Phiếu Công Tác ] ";
                if (phieuCongTacObj.MaLP == 2)
                {
                    phieuLenh = " [ Lệnh Công Tác ] ";
                }
                if (idPhieuCongTac > 0)
                {
                    DisposeAll();
                    return Json(new { success = true, responseText = "Cập nhật bảng" + phieuLenh + "thành công" }, JsonRequestBehavior.AllowGet);
                }

                DisposeAll();
                return Json(new { success = false, responseText = "Cập nhật bảng" + phieuLenh + "không thành công" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                DisposeAll();

                kt = ex.Message;
                ////NLoger.Error("loggerDatabase", string.Format("Lỗi cấp số Phiếu/Lệnh. Chi tiết: {0}", ex.Message));
                return Json(new { success = false, responseText = "Cập nhật bảng Phiếu/Lệnh không thành công" }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult BangTongHopLoaiHinhCongViec()
        {

            return View();
        }

        public async Task<ActionResult> ListBangTongHopLoaiHinhCongViec(string DonViId, string DateFrom, string DateTo)
        {
            if (String.IsNullOrEmpty(DonViId))
            {
                DonViId = "";
            }

            List<BangTongHopLoaiCongViec> LstData = new List<BangTongHopLoaiCongViec>();

            try
            {
                var list = loaicv_ser.GetList();
                var lstdv = _dvi_ser.List().Where(o => o.Id == DonViId || o.DviCha == DonViId);
                foreach (var lc in list)
                {
                    try
                    {
                        BangTongHopLoaiCongViec obj = new BangTongHopLoaiCongViec();
                        obj.TenLoai = lc.TenLoaiCongViec;
                        obj.TenNhom = lc.TenLoai;
                        obj.STT = lc.STT;
                        obj.STTLoai = lc.STTLoai;
                        foreach (var item in lstdv)
                        {
                            try
                            {
                                var HoanThanh = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByLoaiCongViec(DateFrom, DateTo, lc.Id.ToString(), "DX", item.Id);
                                var HuyBo = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByLoaiCongViec(DateFrom, DateTo, lc.Id.ToString(), "HB", item.Id);
                                var ChuaXong = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByLoaiCongViec(DateFrom, DateTo, lc.Id.ToString(), "DD", item.Id);

                                obj.SLDaThucHienXong = (obj.SLDaThucHienXong ?? 0) + HoanThanh;
                                obj.SLHoanHuy = (obj.SLHoanHuy ?? 0) + HuyBo;
                                obj.SLDangThucHien = (obj.SLDangThucHien ?? 0) + ChuaXong;
                            }
                            catch (Exception ex)
                            { }
                        }

                        LstData.Add(obj);
                    }
                    catch (Exception ex)
                    { }
                }


            }
            catch (Exception ex)
            { }

            return PartialView("ListBangTongHopLoaiHinhCongViec", LstData);
        }

        #region BieuDoTronCongViec
        public ActionResult BieuDoTronCongViec()
        {

            clsKyBaoCao kbc = new clsKyBaoCao();
            ViewBag.ListKBC = kbc.Source.Select(r => new SelectListItem { Value = r.ID.ToString(), Text = r.Ten });
            return View();
        }
        #endregion

        #region LoadKhoangThoiGian
        [HttpGet]
        public ActionResult LoadKhoangThoiGian(int? KyBaoCao)
        {
            try
            {
                if (KyBaoCao == null)
                    KyBaoCao = 1;
                clsKyBaoCao clskbc = new clsKyBaoCao();
                clskbc.Index = (int)KyBaoCao;
                clskbc.SetToDate();
                ViewBag.NgayBD = clskbc.DateFrom.ToString("dd/MM/yyyy");
                ViewBag.NgayKT = clskbc.DateTo.ToString("dd/MM/yyyy");

            }
            catch (Exception ex)
            {
            }
            return PartialView("LoadKhoangThoiGian");
        }
        #endregion

        #region ListBieuDoTronCongViec
        public ActionResult ListBieuDoTronCongViec(string DonViId, string DateFrom, string DateTo)
        {
            string donviId = null;
            try
            {
                donviId = Session["DonViID"].ToString();
            }
            catch { }

            if (string.IsNullOrEmpty(DonViId) && ((donviId.Length == 4) || donviId.ToUpper() == "PH" || donviId.ToUpper() == "PN" || donviId.ToUpper() == "PM"))
                DonViId = "";
            else if (string.IsNullOrEmpty(DonViId))
                DonViId = donviId;

            List<KeHoachTuanV2> LstData = new List<KeHoachTuanV2>();


            if (!string.IsNullOrEmpty(DonViId))
            {
                try
                {
                    var objDV = _dvi_ser.GetById(DonViId);

                    var KH = _plviec_ser.Get_TongSoPhienLV_ByTC_ByDonVi(DateFrom, DateTo, "KH", objDV.Id);
                    var BS = _plviec_ser.Get_TongSoPhienLV_ByTC_ByDonVi(DateFrom, DateTo, "BS", objDV.Id);
                    var DX = _plviec_ser.Get_TongSoPhienLV_ByTC_ByDonVi(DateFrom, DateTo, "DX", objDV.Id);
                    var HoanThanh = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByDonVi(DateFrom, DateTo, "", objDV.Id, "DX");
                    var ChuaXong = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByDonVi(DateFrom, DateTo, "", objDV.Id, "DD");
                    var HuyBo = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByDonVi(DateFrom, DateTo, "", objDV.Id, "HB");
                    var HinhAnh = _plviec_ser.Get_TongSoHinhAnh_ByDonVi(DateFrom, DateTo, "", objDV.Id, "");
                    var PLVKiemTra = _plviec_ser.Get_TongSoPhienDaKiemTra_ByDonVi(DateFrom, DateTo, "", objDV.Id, "");
                    var PLVChuaKiemTraSauBC110 = _plviec_ser.Get_PLVChuaKiemTraSauBC110_ByDonVi(DateFrom, objDV.Id);
                    var PLVDaKiemTraSauBC110 = _plviec_ser.Get_PLVDaKiemTraSauBC110_ByDonVi(DateFrom, objDV.Id);

                    KeHoachTuanV2 obj = new KeHoachTuanV2();
                    obj.KH = KH;
                    obj.BS = BS;
                    obj.DX = DX;
                    obj.HoanThanh = HoanThanh;
                    obj.ChuaXong = ChuaXong;
                    obj.HuyBo = HuyBo;
                    obj.MaDonVi = objDV.Id.ToUpper();
                    obj.TenDonVi = string.IsNullOrEmpty(objDV.SDT) ? objDV.TenDonVi.Trim().ToUpper() :
                           objDV.TenDonVi.Trim().ToUpper() + " (" + objDV.SDT + ")";
                    obj.HinhAnh = HinhAnh;
                    obj.PLVKiemTra = PLVKiemTra;
                    obj.PLVChuaKiemTraSauBC110 = PLVChuaKiemTraSauBC110;
                    obj.PLVDaKiemTraSauBC110 = PLVDaKiemTraSauBC110;

                    LstData.Add(obj);
                }
                catch (Exception ex)
                { }

            }
            else
            {
                var lstCom = _dvi_ser.List();
                foreach (var item in lstCom)
                {
                    try
                    {
                        var KH = _plviec_ser.Get_TongSoPhienLV_ByTC_ByDonVi(DateFrom, DateTo, "KH", item.Id);
                        var BS = _plviec_ser.Get_TongSoPhienLV_ByTC_ByDonVi(DateFrom, DateTo, "BS", item.Id);
                        var DX = _plviec_ser.Get_TongSoPhienLV_ByTC_ByDonVi(DateFrom, DateTo, "DX", item.Id);
                        var HoanThanh = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByDonVi(DateFrom, DateTo, "", item.Id, "DX");
                        var ChuaXong = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByDonVi(DateFrom, DateTo, "", item.Id, "DD");
                        var HuyBo = _plviec_ser.Get_TongSoPhienLV_ByTrangThai_ByDonVi(DateFrom, DateTo, "", item.Id, "HB");
                        var HinhAnh = _plviec_ser.Get_TongSoHinhAnh_ByDonVi(DateFrom, DateTo, "", item.Id, "");
                        var PLVKiemTra = _plviec_ser.Get_TongSoPhienDaKiemTra_ByDonVi(DateFrom, DateTo, "", item.Id, "");
                        var PLVChuaKiemTraSauBC110 = _plviec_ser.Get_PLVChuaKiemTraSauBC110_ByDonVi(DateFrom, item.Id);
                        var PLVDaKiemTraSauBC110 = _plviec_ser.Get_PLVDaKiemTraSauBC110_ByDonVi(DateFrom, item.Id);

                        KeHoachTuanV2 obj = new KeHoachTuanV2();
                        obj.KH = KH;
                        obj.BS = BS;
                        obj.DX = DX;
                        obj.HoanThanh = HoanThanh;
                        obj.ChuaXong = ChuaXong;
                        obj.HuyBo = HuyBo;
                        obj.MaDonVi = item.Id.ToUpper();
                        obj.TenDonVi = string.IsNullOrEmpty(item.SDT) ? item.TenDonVi.Trim().ToUpper() :
                               item.TenDonVi.Trim().ToUpper() + " (" + item.SDT + ")";
                        obj.HinhAnh = HinhAnh;
                        obj.PLVKiemTra = PLVKiemTra;
                        obj.PLVChuaKiemTraSauBC110 = PLVChuaKiemTraSauBC110;
                        obj.PLVDaKiemTraSauBC110 = PLVDaKiemTraSauBC110;

                        LstData.Add(obj);

                    }
                    catch (Exception ex)
                    { }
                }
            }

            return PartialView("ListBieuDoTronCongViec", LstData);
        }
        #endregion

        #region 'Cập nhật người kiểm soát không thuộc đơn vị đang thao tác'
        public JsonResult getDsDvi(string madvql, string kieudv)
        {
            DataTable dsDvi = new DataTable();
            dsDvi = safeTrainRepository.getDsPlvDonvi(madvql, kieudv);

            List<DonVi> lstDonvi = new List<DonVi>();

            foreach (DataRow dr in dsDvi.Rows)
            {
                DonVi newObj = new DonVi();
                newObj.Id = dr["Id"].ToString();
                newObj.TenDonVi = dr["TenDonVi"].ToString();

                lstDonvi.Add(newObj);
            }
            return Json(lstDonvi, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region 'Lấy danh sách nhân viên'
        public JsonResult getDsNvien(string cty, string dluc)
        {
            DataTable dsDvi = new DataTable();
            dsDvi = safeTrainRepository.getDsPlvNvien(cty, dluc);

            List<tblNhanVien> lstDonvi = new List<tblNhanVien>();

            foreach (DataRow dr in dsDvi.Rows)
            {
                tblNhanVien newObj = new tblNhanVien();
                newObj.Id = dr["Id"].ToString();
                newObj.TenNhanVien = dr["TenNhanVien"].ToString();

                lstDonvi.Add(newObj);
            }
            return Json(lstDonvi, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region 'Cập nhật'

        [HttpPost]
        public async Task<ActionResult> CapNhatNguoiKsoat(string donvi, string idnhanvien, string idphien)
        {
            try
            {
                safeTrainRepository.CapNhatNguoiKsoat(donvi, idnhanvien, idphien);

                try
                {
                    tblPhienLamViec_NhatKy nhatKy = new tblPhienLamViec_NhatKy();
                    tblPhienLamViec plv = _plviec_ser.GetById(idphien);

                    nhatKy.PhienLamViecId = plv.Id;
                    nhatKy.NgayTao = DateTime.Now;
                    nhatKy.NguoiTao = User.Identity.Name;
                    nhatKy.DonViId = plv.DonViId;
                    nhatKy.TrangThaiCu = (int)TrangThaiPhienLV.VuaTao;
                    nhatKy.TrangThaiMoi = plv.TrangThai;
                    nhatKy.GhiChu = "Cập nhật lại Người giám sát";
                    nhatKy.PhongBanId = plv.PhongBanID;

                    string strError = "";
                    nhatKyPhienLamViecRepository.Create(nhatKy, ref strError);
                }
                catch
                {

                }

                DisposeAll();
                return Json("OK");
            }
            catch (Exception ex)
            {
                return Json("ERROR-" + ex.Message);
            }
        }
        #endregion



    }
}
public class DataSign

{
    public DataSign()
    {
        this.CommentSign = "Ky so";
    }

    public byte[] FileDataSign { set; get; } // data file
    public string TypeSign { set; get; } // BigImage(Ky nhay), Text(khong anh), MiniImage(Ky thuong), CODAU,table
    public string Provider { set; get; } // vt, vn,evnca,usb
    public string DinhDanhKy { set; get; }  // so dien thoai ky
    public string KeyWord { get; set; }
    public byte[] ImageSign { set; get; } // anh ky
                                          //public int NV_ID { set; get; }
                                          //public string FullName { set; get; } // tọa độ ký số

    //public string FileType { set; get; } //' loai file (pdf hoac doc,docx)// neu la doc se tu dong convert

    public byte[] SignatureData { set; get; } // 
    public string Cer { set; get; }
    public string CommentSign { set; get; } // tin nhắn ký báo về cho điện thoại
                                            //public string NDung_Ky { set; get; } // cho nội dung chỉ đạo ký

    //public string LinkQrCode { set; get; }

    //public string SignPosition { set; get; } // Sign tren, Sign Duoi // defaul SignDuoi

    public string APPID { set; get; }  // APP ID

    public string Password { set; get; }  // password
    public KetQuaTimKiem k { set; get; }

    public string LoaiHThi { set; get; }
    public string MESSAGE { set; get; }


}
public class KetQuaTimKiem
{
    public int X { set; get; }
    public int Y { set; get; }
    public int Height { set; get; }
    public int Width { set; get; }
    public int PageNumber { set; get; }
    public int PageHeight { set; get; }
    public int PageWidth { set; get; }
    //public string Tag { set; get; }
    //public string FieldName { set; get; }
}

public class ResponseDataX
{
    public bool State;
    public object Data;
    public String Mess;
    public static ResponseData ReturnSucess(object d)
    {
        return new ResponseData() { State = 1, Data = d, Mess = "" };

    }

    public static ResponseData ReturnFail(string mess)
    {
        return new ResponseData() { State = 0, Data = null, Mess = mess };

    }
}